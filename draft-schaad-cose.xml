<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc comments="yes" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7049 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7049.xml">
<!ENTITY RFC7159 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7159.xml">
<!ENTITY CDDL SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.greevenbosch-appsawg-cbor-cddl.xml">
]>

<rfc category="info" docName="draft-schaad-cose-latest" ipr="trust200902">
  <front>
    <title>CBOR Encoded Message Syntax</title>
    <author initials="J." surname="Schaad" fullname="Jim Schaad">
      <organization>August Cellars</organization>
      <address>
        <email>ietf@augustcellars.com</email>
      </address>
    </author>
    <date/>
    <area>Security</area>
    <abstract>
      <t>Make JOSE work with CBOR - but don't care about crypto compatability</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction">
      <t>
        The JOSE working group produced a set of documents that defined how to perform encryption, signatures and message authentication (MAC) operations for JSON documents and then to encode the results using the JSON format <xref target="RFC7159"/>.
        This document does the same work for use with the CBOR <xref target="RFC7049"/> document format.
        While there is a strong attempt to keep the flavor of the original JOSE documents, two considerations are taking into account:
        <list>
          <t>
            CBOR has capabilities that are not present in JSON and should be used.
            One example of this is the fact that CBOR has a method of encoding binary directly without first converting it into a base64 encoded sting.
          </t>
          <t>
            The authors did not always agree with some of the decisions made by the JOSE working group.
            Many of these decisions have been re-examined, and where it seems to the authors to be superior, replaced.
          </t>
        </list>
      </t>

      <section title="Requirements Terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
        <t>When the words appear in lower case, their natural language meaning is used.</t>
      </section>

      <section title="CBOR Grammar">
        <t>
          There currently is no standard CBOR grammar available for use by specifications.
          In this document, we use a modified version of the CBOR data definition language (CDDL) defined in <xref target="I-D.greevenbosch-appsawg-cbor-cddl"/>.
          The differences between the defined grammar and the one we used are mostly self explanatory.
          The biggest difference being the addition of the choice operator '|'.
        </t>
      </section>

    </section>

    <section title="The COSE_MSG structure">
      <t>
        The COSE_MSG structure is a top level CBOR object which corresponds to the DataContent type in <xref target="CMS"/>.
        This structure allows for a top level message to be sent which could be any of the different security services, where the security service is identified.
        The presence of this structure does not preclude a protocol to use one of the individual structures as a stand alone component.
      </t>

      <figure>
      <artwork>
*COSE_MSG {
  msg_type : uint;
  ?sign_msg: COSE-Sign;         # present if msg_type = 0
  ?encrypt_msg: COSE-Encrypt;   # present if msg_type = 1
  ?mac_msg: COSE-MAC;           # present if msg_type = 2
}
      </artwork>
      </figure>

      <t>
        This structure is encoded as an array by CBOR.
        Descriptions of the fields:
        <list>
          <t>
            msg_type indicates which of the security structures is in this block.
          </t>
        </list>
      </t>
    </section>
    <section title="Key Format">
      
    </section>
    <section title="Signing Structure">
      <t>
        Describe an overview of things
      </t>

      <figure>
      <artwork>
COSE-Sign : {
    payload : bstr;
    signatures: COSE-signature* | COSE-signature;
}
      </artwork>
      </figure>

      <t>
        This structure is encoded as a map.
        <cref source="JLS">
          Do we want to change the top level maps to arrays?
          There is goodness and badness in doing so.
          Size wise it should be smaller in a general case.
          The only fun question is what to do if the payload element is not present.
        </cref>

        Field descriptions:

        <list>
          <t>payload contains the serialized content to be signed.</t>
          <t>
            signatures is either a single signature or an array of signature values.
            <cref source="JLS">
              Does it make sense to retain the flattened structure to save 1 or 2(?) bytes?
            </cref>
          </t>
        </list>
      </t>

      <figure>
      <artwork>
COSE-signature :  {
    protected : bstr | null;
    unprotected : map(tstr);
    signature : bstr;
}
      </artwork>
      </figure>

      <t>
        Field descriptions:
        <list>
          <t>
            protected is optional and contains additional information to be authenticated by the signature.
            The field generally holds data about the signture operation or inner content.
          </t>
          <t>
            header is optional and contains additional information for evaluation of the signature.
          </t>
        </list>
      </t>

      <t>
        How to compute a signature:
        <list>
          <t>
            Concatenate the "protected" field and the "payload" field into a single octet string.
            If the "protected" field is absent, use a zero length bstr object for it.
          </t>
          <t>Hash the resulting string</t>
          <t>Sign the hash</t>
        </list>
      </t>
    </section>

    <section title="Encryption object">
      <t>
        In this section we describe the structure and methods to be used when doing an encryption in COSE.
        In COSE, we use the same techniques and structures for encrypting both the plain text and the keys used to protect the text.
        This is different from the approach used by both <xref target="CMS"/> and <xref target="JWE"/> where different structures are used both for the plain text and for the different key management techniques.
      </t>
        
      <t>
        One of the by products of using the same technique for encrypting and encoding bot the content and the keys using the various key managment techniques, is a requirement that all of the key management techniques use an Authenticated Encryption (AE) algorithm.
        When encrypting the plain text, it is normal to use an Authenticated Encryption with Additional Data (AEAD) algorithm.  For key management, either AE or AEAD algorithms can be used.
        See <xref target="AE-algo"/> for more details about the different types of algorithms.
      </t>

      <t>
        The structure has two bags where data about the content can be placed.
        The data placed here is also the data which is used to control how the decryption is to be done for this object.
        When data is placed in these two structures, it is extremely poor practice to have data which is applicable to a different level.
        For example, the unprotected field at the level of a key management decryption should not contain information either about how to interpret the plain text (i.e. content type) or how to convert the cipher text back to plain text (i.e. the kid for the recipient).
      </t>

      <figure>
      <artwork>
COSE_encrypt {
  protected : bstr | null;
  unprotected : map(tstr) | null;
  iv : bstr | null;
  aad : bstr | null;
  ciphertext : bstr | null;
  tag : bstr;
  recipients : COSE_encrypt_a* | null;
}

* COSE_encrypt_a : COSE_encrypt

      </artwork>
      </figure>

      <t>
        Description of the fields:

        <list>
          <t>tag <cref source="JLS">Is life easier if this goes away and becomes part of the cipher text?</cref></t>
          <t>
            recipients is an array of recipient information.
            <cref source="JLS"> 
              Is there a reason to do a flatten on the recipient array?
              This is easier if we make the recipient structure a map as it becomes a difference between array vs map as the next item down.
              If we flatten for arrays, then it because a question of checking - "array, bstr" vs "array, array, bstr".  
              I don't know how hard this is to deal with.
              We can also do the flattening in a different way as we can look at the length of the array if we just append the recipient vs doing an array of recipients.
              I think this would work.
              Implies the rule:  recipients : COSE_encrypt | COSE_encrypt_a* | null;
            </cref>
          </t>
        </list>
      </t>

      <section title="Header Parameters">
        <t>
          The header parameters discussed here are taken from <xref target="JWE"/>.
          For the most part they are interpreted the same here as for JOSE.
        </t>

        <t>
          <list style="hanging">
            <t hangText="alg">
              contains the algorithm identifier used to encrypt the plain text.
            </t>

            <t hangText="epk">
              contains an ephemeral key for key agreement management algorithms.
            </t>

            <t hangText="zip">
              contains a compression algorithm identifier if the plain text was compressed prior to being encrypted.
            </t>

            <t hangText="jku">
              contains a URL pointing to a JWK Set (defined in <xref target="JWK"/>).
              <cref source="JLS">Do we defined a cku as well?</cref>
            </t>

            <t hangText="cwk">
              contains the public key fields for the key used to encrypt the object.
            </t>

            <t hangText="kid">
              contains a value which can be used to select a key from one or more keys the application has access to.
            </t>

            <t hangText="cty">
              contains a string which identifies the content of the plain text.
            </t>
          </list>
        </t>

        <t>
          There are a number of header fields defined in <xref target="JWE"/> which are not used.
          These include PUT THE LIST OF UNUSED ITEMS HERE.  Includes 'enc'?
        </t>
      </section>
            

      <section title="Encryption Algorithm for AEAD algorithsm">
        <t>
          Nice short encryption algorithm.

        <list style="numbers">
          <t>
            Construct the octet string to be placed in the protected field:  CBOR encode the protected data map, place it the protected field.
          </t>
          <t>
            Construct the octet string to be used as the AAD value for the AEAD algorithm:  Concatenate the values in the protected and aad fields after applying the CBOR bstr encoding to them.
          </t>
          <t>
            Encrypt the plain text and place it in the ciphertext field.  The AAD value is passed in as part of the encryption process.
          </t>
          <t>
            For each recipient of the message, recursively perform the encryption algorithm for that recipient using the encryption key as the plain text.
          </t>
        </list>
        </t>
      </section>

      <section title="Encryption algorithm for AE algorithms">
        <t>
        <list style="numbers">
          <t>
            Verify that the protected field is empty.
          </t>
          <t>
            Verify that the aad field is empty.
          </t>
          <t>
            Encrypt the plain text and place in the ciphertext field.
          </t>
        </list>
        </t>
      </section>

    </section>
    <section title="MAC objects">
      <t> add description </t>
      <figure>
      <artwork>
COSE-mac :  {
   payload : bstr;
   protected : bstr | null;
   unprotected" : map(tstr) | null;
   tag : bstr;
   recipients : COSE_encrypt_a* | null;
}
      </artwork>
      </figure>

        
    </section>

    <section title="Key Structure">
      <t>
        For COSE we use the same set of fields that were defined in <xref target="JWK"/>.
      </t>

      <figure>
        <artwork>
COSE_key : map (tstr)
        </artwork>
      </figure>

      <t>
        The same fields defined in <xref target="JWK"/> are used here with the following changes in rules:
        <list>
          <t>Any item which is base64 encoded in JWK, is bstr encoded for COSE.</t>
          <t>Any item which is integer encoded in JWK, is int encoded for COSE.</t>
          <t>Any item which is string (but not base64) encoded in JWK, is tstr encoded for COSE.</t>
          <t>
            Exceptions to this are the following fields:
            <list style="hanging">
              <t hangText="kid">
                is always bstr encoded rather than tstr encoded.
                This change in encoded is due to the fact that frequently, values such as a hash of the public key is used for a kid value.
                Since the field is defined as not having a specific structure, making it binary rather than textual makes sense.
              </t>
            </list>
          </t>
        </list>
      </t>
    </section>
  </middle>
  <back>
    <references title="Informational References">
<reference anchor='CMS'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author initials='R.' surname='Housley' fullname='R. Housley'>
<organization /></author>
<date year='2009' month='September' />
<abstract>
<t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='STD' value='70' />
<seriesInfo name='RFC' value='5652' />
<format type='TXT' octets='126813' target='http://www.rfc-editor.org/rfc/rfc5652.txt' />
</reference>

<reference anchor='JWE'>
<front>
<title>JWE</title>
<author initials='' surname='JOSE' fullname='JOSE'>
<organization /></author>
<date/>
</front>
</reference>

<reference anchor='JWK'>
<front>
<title>JWK</title>
<author initials='' surname='JOSE' fullname='JOSE'>
<organization /></author>
<date/>
</front>
</reference>

&RFC2119;
&RFC7049;
&RFC7159;
&CDDL;
    </references>
    <section title="AEAD and AE algorithms" anchor="AE-algo">
      <t>
        PKCS v1.5 is not an AE algorithm RSA OAEP is.  Don't use v1.5.
      </t>
    </section>

    <section title="Examples">
      <section title="Direct MAC">
      <figure>
<artwork>
{ "payload" : "xxxxx",
  "unprotected" : {
      "alg" : "HMAC-SHA2",
      "kid" : "bilbo"
  }
}
</artwork>
      </figure>
      </section>

      <section title="Wrapped MAC - PSK">
      <figure>
        <artwork>
{ "payload" : "xxxxx",
  "protected" : { "alg" : "HMAC-SHA2" },
  "recipients" : [
     {
        "unprotected" : {
           "kid": "bilbo",
           "alg": "AESKW"
        },
        "ciphertext" : "xx"
     },
     {
        "unprotected" : {
           "kid" : "samwise",
           "alg" : "RSA_1.5"
        },
        "ciphertext" : "yyy"
     }
  ]
}
        </artwork>
      </figure>
      </section>
      <section title="Big encryption">
      <figure>
        <artwork>
{ "ciphertext" : "xxxx",
  "iv" : "yyy",
  "aad" : "zzz",
  "protected" : "{'alg':'A128KW','kid':'bilbo','enc':'A128GCM'}",
  "unprotected" : { "cty" : "vcard" }
  "tag" : "aaaa",
  "recipients" : [
      {
          "ciphertext" : "mmmm",
          "unprotected" : { "alg": "RSA1_5", "kid": "frodo" }
      {
          "unprotected" : {
             "alg" : "ECDH-ES+A256KW",
             "kid" : "peregrin",
             "epk" : {...}
          },
          "ciphertext" : "qqqqq"
       },
       {
           "ciphertext" : "rrrrr",
           "unprotected" : {
               "alg" : "A256GCMKW",
               "kid" : "bilbo",
               "tag" : "rrrrr1",
               "iv" : "rrrrr2",
           }
       },
       {
           "ciphertext" : "nnnnn",
           "unprotected" : {
               "alg": "A256GCMKW",
               "tag": "ddddd1",
               "iv" : "ddddd2",
               "key" : {
                   "ciphertext" : "oooooo",
                   "unprotected" : { "alg":"RSA1_5", "kid":"two_wrap" }
               }         
            }
        }
    ]
}
        </artwork>
      </figure>
      </section>
    </section>
  </back>
</rfc>


