<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2104 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2104.xml" >
  <!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml" >

  <!ENTITY RFC2633 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2633.xml" >
  <!ENTITY RFC2898 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2898.xml" >
  <!ENTITY RFC3394 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3394.xml" >
  <!ENTITY RFC3447 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3447.xml" >
  <!ENTITY RFC3610 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3610.xml" >
  <!ENTITY RFC4231 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4231.xml" >
  <!ENTITY RFC4262 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4262.xml" >
  <!ENTITY RFC4493 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4493.xml" >
  <!ENTITY RFC4949 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4949.xml" >
  <!ENTITY RFC5480 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5480.xml" >
  <!ENTITY RFC5652 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5652.xml" >
  <!ENTITY RFC5751 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5751.xml" >
  <!ENTITY RFC5752 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5752.xml" >
  <!ENTITY RFC5869 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5869.xml" >
  <!ENTITY RFC5990 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5990.xml" >
  <!ENTITY RFC6090 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6090.xml" >
  <!ENTITY RFC6151 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6151.xml" >
  <!ENTITY RFC6979 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6979.xml" >
  <!ENTITY RFC6982 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6982.xml" >
  <!ENTITY RFC7049 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7049.xml" >
  <!ENTITY RFC7159 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7159.xml" >
  <!ENTITY RFC7252 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7252.xml" >
  <!ENTITY RFC7515 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7515.xml" >
  <!ENTITY RFC7516 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7516.xml" >
  <!ENTITY RFC7517 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7517.xml" >
  <!ENTITY RFC7518 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7518.xml" >
  <!ENTITY RFC7539 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7539.xml" >
  <!ENTITY RFC7748 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7748.xml" >

  <!ENTITY CDDL SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.greevenbosch-appsawg-cbor-cddl.xml" >
  <!ENTITY CBCMAC SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.mcgrew-aead-aes-cbc-hmac-sha2.xml" >
  <!ENTITY CFRG-EDDSA SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.irtf-cfrg-eddsa.xml" >

<!ENTITY Appendix_A SYSTEM "includes/Appendix_A.xml">
<!ENTITY Appendix_B_3_1 SYSTEM "includes/Appendix_B_3_1.xml">
<!ENTITY Appendix_B_3_2 SYSTEM "includes/Appendix_B_3_2.xml">
<!ENTITY Appendix_B_3_3 SYSTEM "includes/Appendix_B_3_3.xml">
<!ENTITY Appendix_B_4_1 SYSTEM "includes/Appendix_B_4_1.xml">
<!ENTITY Appendix_B_4_2 SYSTEM "includes/Appendix_B_4_2.xml">
<!ENTITY Appendix_B_3_4 SYSTEM "includes/Appendix_B_3_4.xml">
<!ENTITY Appendix_B_5_2 SYSTEM "includes/Appendix_B_5_2.xml">
<!ENTITY Appendix_B_5_3 SYSTEM "includes/Appendix_B_5_3.xml">
<!ENTITY Appendix_B_5_4 SYSTEM "includes/Appendix_B_5_4.xml">
<!ENTITY Appendix_B_5_1 SYSTEM "includes/Appendix_B_5_1.xml">
<!ENTITY Appendix_B_6_1 SYSTEM "includes/Appendix_B_6_1.xml">
<!ENTITY Appendix_B_1_1 SYSTEM "includes/Appendix_B_1_1.xml">
<!ENTITY Appendix_B_1_2 SYSTEM "includes/Appendix_B_1_2.xml">
<!ENTITY Appendix_B_1_3 SYSTEM "includes/Appendix_B_1_3.xml">
<!ENTITY Appendix_B_1_4 SYSTEM "includes/Appendix_B_1_4.xml">
<!ENTITY Appendix_B_2_1 SYSTEM "includes/Appendix_B_2_1.xml">
<!ENTITY PrivKeys SYSTEM "includes/private-keyset.xml">
<!ENTITY PubKeys SYSTEM "includes/public-keyset.xml">

]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-cose-msg-latest" category="std">
  <front>
    <title>CBOR Encoded Message Syntax</title>

    <author initials="J." surname="Schaad" fullname="Jim Schaad">
      <organization>August Cellars</organization>
      <address>
        <email>ietf@augustcellars.com</email>
      </address>
    </author>

    <date/>

    <area>Security</area>
    <workgroup>COSE Working Group</workgroup>
    <abstract>
      <t>
        Concise Binary Object Representation (CBOR) is data format designed for small code size and small message size.
        There is a need for the ability to have the basic security services defined for this data format.
        This document specifies processing for signatures, message authentication codes, and encryption using CBOR.
        This document also specifies a representation for cryptographic keys using CBOR.
      </t>
    </abstract>

    <note title="Contributing to this document">
      <!-- RFC EDITOR - Please remove this note before publishing -->
      <t>
        The source for this draft is being maintained in GitHub.
        Suggested changes should be submitted as pull requests  at <eref target="https://github.com/cose-wg/cose-spec"/>.
        Instructions are on that page as well.
        Editorial changes can be managed in GitHub, but any substantial issues need to be discussed on the COSE mailing list.
      </t>
    </note>
  </front>

  <middle>

    <section anchor="introduction" title="Introduction">

      <t>
        There has been an increased focus on the small, constrained devices that make up the Internet of Things (IoT). 
        One of the standards that has come out of this process is the Concise Binary Object Representation (CBOR) <xref target="RFC7049"/>. 
        CBOR extended the data model of the JavaScript Object Notation (JSON) <xref target="RFC7159"/> by allowing for binary data among other changes. 
        CBOR is being adopted by several of the IETF working groups dealing with the IoT world as their encoding of data structures. 
        CBOR was designed specifically to be both small in terms of messages transport and implementation size as well having a schema free decoder.
        A need exists to provide message security services for IoT and using CBOR as the message encoding format makes sense.
      </t>

      <t>
        The JOSE working group produced a set of documents <xref target="RFC7515"/><xref target="RFC7516"/><xref target="RFC7517"/><xref target="RFC7518"/> using JSON that specified how to process encryption, signatures and message authentication (MAC) operations, and how to encode keys using JSON.
        This document does the same work for use with the CBOR document format.
        While there is a strong attempt to keep the flavor of the original JOSE documents, two considerations are taken into account:
      </t>

      <t>
        <list style="symbols">
          <t>
            CBOR has capabilities that are not present in JSON and should be used. 
            One example of this is the fact that CBOR has a method of encoding binary directly without first converting it into a base64 encoded string.
          </t>
          <t>
            COSE is not a direct copy of the JOSE specification.
            In the process of creating COSE, decisions that were made for JOSE were re-examined.
            In many cases different results were decided on as the criteria was not always the same.
            <!--
                Hannes
                
                For a working group draft it does not matter whether the author agrees or disagrees. I would suggest to remove this paragraph.

                REPLACED TEXT:
                The author did not always agree with some of the decisions made by the JOSE working group. 
                Many of these decisions have been re-examined, and where it seems to the author to be superior or simpler, replaced.
            -->
          </t>
        </list>
      </t>

      <section anchor="design-changes-from-jose" title="Design changes from JOSE">

        <t>
          <list style="symbols">
            <t>
              Define a single top level message structure so that encrypted, signed and MACed messages can easily identified and still have a consistent view.
            </t>
            <t>
              Signed messages separate the concept of protected and unprotected parameters that are for the content and the signature.
            </t>
            <t>
              MAC messages are separated from signed messages.
            </t>
            <t>
              MAC messages have the ability to use the same set of recipient algorithms as enveloped messages for obtaining the MAC authentication key.
            </t>
            <t>
              Use binary encodings for binary data rather than base64url encodings.
            </t>
            <t>
              Combine the authentication tag for encryption algorithms with the cipher text.
            </t>
            <t>
              The set of cryptographic algorithms has been expanded in some directions, and trimmed in others.
            </t>
          </list>
        </t>

      </section>

      
      <section anchor="requirements-terminology" title="Requirements Terminology">
        <!--  NOTE FOR AUTHORS:
             We use the following terms in the document
             
             field - an entry in a CBOR array
             parameter - an element in a CBOR map (as oppose to 'member' which is frequently used in JSON
             label - the key of an element in a CBOR map.   Unless otherwise separated from text, enclose with single quote marks
             value - the value of an element in a CBOR map
        -->

        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.
        </t>

        <t>
          When the words appear in lower case, their natural language meaning is used.
        </t>

      </section>
      
      <section anchor="cbor-grammar" title="CBOR Grammar">

        <t>
          There currently is no standard CBOR grammar available for use by specifications.
          We therefore describe the CBOR structures in prose.
        </t>

        <t>
          The document was developed by first working on the grammar and then developing the prose to go with it.
          An artifact of this is that the prose was written using the primitive type strings defined by CBOR Data Definition Language (CDDL) <xref target="I-D.greevenbosch-appsawg-cbor-cddl"/>.
         In this specification, the following primitive types are used:
         <list style="empty">
           <t>any - non-specific value that permits all CBOR values to be placed here.</t>
            <t>bool - a boolean value (true: major type 7, value 21; false: major type 7, value 20).</t>
            <t>bstr - byte string (major type 2).</t>
            <t>int - an unsigned integer or a negative integer.</t>
            <t>nil - a null value (major type 7, value 22).</t>
            <t>nint - a negative integer (major type 1).</t>
            <t>tstr - a UTF-8 text string (major type 3).</t>
            <t>uint - an unsigned integer (major type 0).</t>
          </list>
        </t>

        <t>
          As well as the prose description, a version of a CBOR grammar is presented in CDDL.
          Since CDDL has not been published as an RFC, this grammar may not work with the final version of CDDL.
          The CDDL grammar is informational, the prose description is normative.
      </t>
      
      <t>
        The collected CDDL can be extracted from the XML version of this document via the following XPath expression below.
        (Depending on the XPath evaluator one is using, it may be necessary to deal with &amp;gt; as an entity.)
      </t>

      <t>
        <figure><artwork type='XPATH'><![CDATA[
//artwork[@type='CDDL']/text()
]]></artwork></figure>         
      </t>

      <t>
        CDDL expects the initial non-terminal symbol to be the first symbol in the file.
        For this, reason the first fragment of CDDL is presented here.
      </t>

      <figure><artwork type='CDDL'><![CDATA[
start = COSE_Messages / COSE_Key / COSE_KeySet / Internal_Types

; This is defined to make the tool quieter
Internal_Types = Sig_structure / Enc_structure / MAC_structure /
        COSE_KDF_Context
]]></artwork></figure>

        <t>
          The non-terminal Internal_Types is defined for dealing with the automated validation tools used during the writing of this document.
          It references those non-terminals that are used for security computations, but are not emitted for transport.
        </t>
      </section>

      <section title="CBOR Related Terminology" anchor="label">
        <t>
          In JSON, maps are called objects and only have one kind of map key: a string.
          In COSE, we use strings, negative integers and unsigned integers as map keys.
          The integers are used for compactness of encoding and easy comparison.
          Since the word "key" is mainly used in its other meaning, as a cryptographic key, we use the term "label" for this usage as a map key.
        </t>

        <t>
          The presence of a label in a map which is not a string or an integer is an error.
          Applications can either fail processing or process messages with incorrect labels, however they MUST NOT create messages with incorrect labels.
        </t>

        <t>
          A CDDL grammar fragment is defined that defines the non-terminals 'label' as in the previous paragraph and 'values' which permits any value to be used.
        </t>

        <figure><artwork type='CDDL'><![CDATA[
label = int / tstr
values = any
]]></artwork></figure>

      </section>

      <section title="Document Terminology">
        <t>
          In this document we use the following terminology:
        </t>
        
        <t>Byte is a synonym for octet.</t>
        <t>
          Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use in constrained systems.
          It is defined in <xref target="RFC7252"/>.
        </t>

        <!--
        <t>
          Key management is used as a term to describe how a key at level n is obtained from level n+1 in encrypted and MACed messages.
          The term is also used to discuss key life cycle management,  this document does not discuss key life cycle operations.
          <! - - Ilari DONE
               Should we remove the term "KEY MANAGEMENT" in this location as well.

          JLS - perhaps we should do a discussion of how the term is used in different places and punt?

          Now gone.
        </t>
          -->
      </section>

    </section>
    
    <section anchor="the-cosemsg-structure" title="Basic COSE Structure">
      <t>
        The COSE Message structure is designed so that there can be a large amount of common code when parsing and processing the different security messages.
        All of the message structures are built on the CBOR array type.
        The first three elements of the array contain the same information.
        <list style="numbers">
          <t>The set of protected header parameters wrapped in a bstr.</t>
          <t>The set of unprotected header parameters as a map.</t>
          <t>
            The content of the message.  
            The content is either the plain text or the cipher text as appropriate.
            The content may be detached, but the location is still used.
            The content is wrapped in a bstr when present and is a nil value when detached.
          </t>
        </list>
        Elements after this point are dependent on the specific message type.
      </t>

      <t>
        Identification of which type of message has been presented is done by the following method:
        <list style="numbers">
          <t>
            The specific message type is known from the context.
            This may be defined by a marker in the containing structure or by restrictions specified by the application protocol.
          </t>
          <t>
            The message type is identified by a CBOR tag.
            This document defines a CBOR tag for each of the message structures.
            These tags can be found in <xref target="CBOR-Tags"/>.
          </t>
          <t>
            When a COSE object is carried in a media type of application/cose, the optional parameter 'cose-type' can be used to identify the embedded object.
            The parameter is OPTIONAL if the tagged version of the structure is used.
            The parameter is REQUIRED if the untagged version of the structure is used.
            The value to use with the parameter for each of the structures can be found in <xref target="CBOR-Tags"/>.
          </t>
          <t>
            When a COSE object is carried as a CoAP payload, the CoAP
            Content-Format Option can be used to identify the message content.
            The CoAP Content-Format values can be found in <xref target="CoAP_content_type"/>.
            The CBOR tag for the message structure is not required as each security message is uniquely identified.
          </t>
        </list>
      </t>

          <texttable anchor="CBOR-Tags" title="COSE Object Identification">
            <ttcol>CBOR Tag</ttcol>    <ttcol>cose-type</ttcol>        <ttcol>Data Item</ttcol>        <ttcol>Semantics</ttcol>
            <c>TBD1</c>                 <c>cose-sign</c>                <c>COSE_Sign</c>                <c>COSE Signed Data Object</c>
            <c>TBD7</c>                 <c>cose-sign1</c>               <c>COSE_Sign1</c>               <c>COSE Single Signer Data Object</c>
            <c>TBD2</c>                 <c>cose-encrypt</c>           <c>COSE_Encrypt</c>           <c>COSE Encrypted Data Object</c>
            <c>TBD3</c>                 <c>cose-encrypt1</c>           <c>COSE_Encrypt1</c>           <c>COSE Single Recipient Encrypted Data Object</c>
            <c>TBD4</c>                 <c>cose-mac</c>                 <c>COSE_Mac</c>                 <c>COSE Mac-ed Data Object</c>
            <c>TBD6</c>                 <c>cose-mac0</c>                <c>COSE_Mac0</c>                <c>COSE Mac w/o Recipients Object</c>
            <c>TBD5</c>                 <c>N/A</c>                      <c>COSE_Key, COSE_KeySet</c>    <c>COSE Key or COSE Key Set Object</c>
          </texttable>
      
      <!--
      <t>
        The COSE_MSG structure is a top level CBOR object that corresponds to the DataContent type in the Cryptographic Message Syntax (CMS) <xref target="RFC5652"/>.
        < ! - - Hannes
             I would remove references to CMS and S/MIME since they are most likely only helpful to a very small audience.

             OPEN
        - - >
        <cref source="Hannes">I would remove references to CMS and S/MIME since they are most likely only helpful to a very small audience.</cref>

        This structure allows for a top level message to be sent that could be any of the different security services.
        The security service is identified within the message.
        </t>

        <t>
        The COSE_Tagged_MSG CBOR type takes the COSE_MSG and prepends a CBOR tag of TBD1 to the encoding of COSE_MSG.
        By having both a tagged and untagged version of the COSE_MSG structure, it becomes easy to either use COSE_MSG as a top level object or embedded in another object.
        The tagged version allows for a method of placing the COSE_MSG structure into a choice, using a consistent tag value to determine that this is a COSE object.
        </t>

      <t>
        The existence of the COSE_MSG and COSE_Tagged_MSG CBOR data types are not intended to prevent protocols from using the individual security primitives directly.
        Where only a single service is required, that structure can be used directly.
      </t>

      <t>
        Each of the top-level security objects use a CBOR array as the base structure.
        For each of the top-level security objects, the first field is a 'msg_type'.
        The CBOR type for a 'msg_type' is 'int'.
        The 'msg_type' is defined to distinguish between the different structures when they appear as part of a COSE_MSG object.
        <cref source="JLS">
          I have moved msg_type into the individual structures.
          However, they would not be necessary in the cases where a) the security service is known and b) security libraries can setup to take individual structures.
          Should they be moved back to just appearing if used in a COSE_MSG rather than on the individual structure?
          This would make things shorter if one was using just a signed message because the msg_type field can be omitted as well as the COSE_Tagged_MSG tag field.
          One the other hand, it will complicated the code if one is doing general purpose library type things.
        </cref>
        <cref source="JLS">Should we create an IANA registries for the values of msg_type?</cref>
        <cref source="CB">I would like to make msg_type go away</cref>
      </t>

      <t>
        The message types defined in this document are:
        <list style="empty">
          <t>0 - Reserved.</t>
          <t>1 - Signed Message.</t>
          <t>2 - Enveloped Message</t>
          <t>3 - Authenticated Message (MACed message)</t>
          <t>4 - Encrypted Message</t>
        </list>
      </t>

      <t>
        Implementations MUST be prepared to find an integer in this field that does not correspond to the values 1 to 3.
        If a message type is found then the client does not support the associated security object, the client MUST stop attempting to process the structure and fail.
        The value of 0 is reserved and not assigned to a security object.
        If the value of 0 is found, then clients MUST fail processing the structure.
        Implementations need to recognize that the set of values might be extended at a later date, but they should not provide a security service based on guesses of what the security object might be.
      </t>
      -->

      <t>
        The following CDDL fragment identifies all of the top level messages defined in this document.
        Separate non-terminals are defined for the tagged and the untagged versions of the messages.
      </t>

      <figure><artwork type="CDDL"><![CDATA[
COSE_Messages = COSE_Untagged_Message / COSE_Tagged_Message
      
COSE_Untagged_Message = COSE_Sign / COSE_Sign1 /
    COSE_Encrypt / COSE_Encrypt1 /
    COSE_Mac / COSE_Mac0

COSE_Tagged_Message = COSE_Sign_Tagged / COSE_Sign1_Tagged /
    COSE_Encrypt_Tagged / COSE_Encrypt1_Tagged /
    COSE_Mac_Tagged / COSE_Mac0_Tagged
]]></artwork></figure>


      <!--
      <texttable anchor="Top-Level-Keys" title="COSE Map Labels">
        <ttcol align='left'>name</ttcol>
        <ttcol align='left'>number</ttcol>
        <ttcol align='left'>comments</ttcol>
        
        <c>msg_type</c>         <c>1</c>        <c>Occurs only in top level messages</c>
        <c>protected</c>        <c>2</c>        <c>Occurs in all structures</c>
        <c>unprotected</c>      <c>3</c>        <c>Occurs in all structures</c>
        <c>payload</c>          <c>4</c>        <c>Contains the content of the structure</c>
        <c>signatures</c>       <c>5</c>        <c>For COSE_Sign - array of signatures</c>
        <c>signature</c>        <c>6</c>        <c>For COSE_signature only</c>
        <c>ciphertext</c>       <c>4</c>        <c>TODO: Should we reuse the same as payload or not?</c>
        <c>recipients</c>       <c>9</c>        <c>For COSE_Encrypt and COSE_mac</c>
        <c>tag</c>              <c>10</c>       <c>For COSE_mac only</c>
      </texttable>

      <t>
        The CDDL grammar that provides the label values is:
      </t>
      <figure><artwork type="CDDL"><![CDATA[
; message_labels
msg_type=1
protected=2
unprotected=3
payload=4
signatures=5
signature=6
ciphertext=4
recipients=9
tag=10

]]></artwork></figure>
      -->
      
    </section>

    <section anchor="header-parameters" title="Header Parameters">

      <t>
        The structure of COSE has been designed to have two buckets of information that are not considered to be part of the payload itself, but are used for holding information about content, algorithms, keys, or evaluation hints for the  processing of the layer.
        These two buckets are available for use in all of the structures except for keys.
        While these buckets are present, they may not all be usable in all instances.
        For example, while the protected bucket is defined as part of the recipient structure, some of the algorithms used for recipient structures do not provide for authenticated data.
        If this is the case, the protected bucket is left empty.
      </t>

      <t>
        Both buckets are implemented as CBOR maps.
        The map key is a 'label' (<xref target="label"/>).
        The value portion is dependent on the definition for the label.
        Both maps use the same set of label/value pairs. 
        The integer and string values for labels has been divided into several sections with a standard range, a private range, and a range that is dependent on the algorithm selected.
        The defined labels can be found in the 'COSE Header Parameters' IANA registry (<xref target="cose-header-key-table"/>).
      </t>

      <t>
        Two buckets are provided for each layer:

        <list style="hanging">
          <t hangText='protected:'>
            Contains parameters about the current layer that are to be cryptographically protected.
            This bucket MUST be empty if it is not going to be included in a cryptographic computation.
            This bucket is encoded in the message as a binary object.
            This value is obtained by CBOR encoding the protected map and wrapping it in a bstr object.
            Senders SHOULD encode an empty protected map as a zero length binary object (it is both shorter and the version used in the authentication structures).
            Recipients MUST accept both a zero length binary value and a zero length map encoded in the binary value.
            The wrapping allows for the encoding of the protected map to be transported with a greater chance that it will not be altered in transit.
            (Badly behaved intermediates could decode and re-encode, but this will result in a failure to verify unless the re-encoded byte string is identical to the decoded byte string.)
            This finesses the problem of all parties needing to be able to do a common canonical encoding.
          </t>
          
          <t hangText='unprotected:'>
            Contains parameters about the current layer that are not cryptographically protected.
          </t>
        </list>

        Only parameters that deal with the current layer are to be placed at that layer.
        As an example of this, the parameter 'content type' describes the content of the message being carried in the message.
        As such, this parameter is placed only in the content layer and is not placed in the recipient or signature layers.
        In principle, one should be able to process any given layer without reference to any other layer.
        (With the exception of the COSE_Sign structure, the only data that needs to cross layers is the cryptographic key.)
      </t>

      <t>
        The buckets are present in all of the security objects defined in this document.
        The fields in order are the 'protected' bucket (as a CBOR 'bstr' type) and then the 'unprotected' bucket (as a CBOR 'map' type).
        The presence of both buckets is required.
        The parameters that go into the buckets come from the IANA "COSE Header Parameters" (<xref target="cose-header-key-table"/>).
        Some common parameters are defined in the next section, but a number of parameters are defined throughout this document.
      </t>

      <t>
        Labels in each of the maps MUST be unique.
        When processing messages, if a label appears multiple times the message MUST be rejected as malformed.
        Applications SHOULD perform the same checks that the labels appearing in the protected and unprotected headers are unique as well.
        If the message is not rejected as malformed, attributes MUST be obtained from the protected bucket before they are obtained from the unprotected bucket.
      </t>

      <t>
        The following CDDL fragment represents the two header buckets.
        A group Headers is defined in CDDL which represents the two buckets in which attributes are placed.
        This group is used to provide these two fields consistently in all locations.
        A type is also defined which represents the map of header values.
        It uses forward references to a group definition of headers for generic and algorithms.
      </t>

      <figure><artwork type="CDDL"><![CDATA[
Headers = (
    protected : empty_or_serialized_map,
    unprotected : header_map
)

header_map = {
    Generic_Headers,
    ; Algorithm_Headers,
    * label => values
}

empty_or_serialized_map = bstr .cbor header_map / bstr .size 0

]]></artwork></figure>

      <section anchor="cose-headers" title="Common COSE Headers Parameters">
        <t>
          This section defines a set of common header parameters.
          A summary of these parameters can be found in <xref target="Header-Table"/>.
          This table should be consulted to determine the value of label as well as the type of the value.
        </t>

        <t>
          The set of header parameters defined in this section are:
        </t>

        <t>
          <list style="hanging">
            <t hangText='alg'>
              This parameter is used to indicate the algorithm used for the security processing.
              This parameter MUST be present at each level of a signed, encrypted or authenticated message except the COSE_Sign structure.
              When the algorithm supports authenticating associated data, this parameter MUST be in the protected header bucket.
              The value is taken from the 'COSE Algorithm Registry' (see <xref target="cose-algorithm-registry"/>).
            </t>
            
            <t hangText='crit'>
              The parameter is used to indicate which protected header labels an application that is processing a message is required to understand.
              Parameters defined in this document do not need to be included as they should be understood by all implementations.

              When present, this parameter MUST be placed in the protected header bucket.
              The array MUST have at least one value in it.
              <vspace/>
              Not all labels need to be included in the 'crit' parameter.
              The rules for deciding which header labels are placed in the array are:
              <list style="symbols">
                <t>Integer labels in the range of 0 to 8 SHOULD be omitted.</t>
                
                <t>
                  Integer labels in the range -1 to -255 can be omitted as they are algorithm dependent.
                  If an application can correctly process an algorithm, it can be assumed that it will correctly process all of the common parameters associated with that algorithm.
                  (The algorithm range is -1 to -65536, the higher end is for more optional algorithm specific items.)
                </t>
                <t>
                  Labels for parameters required for an application MAY be omitted.
                  Applications should have a statement if the label can be omitted.
                </t>
              </list>
              
              The header parameter values indicated by 'crit' can be processed by either the security library code or by an application using a security library, the only requirement is that the parameter is processed.
              If the 'crit' value list includes a value for which the parameter is not in the protected bucket, this is a fatal error in processing the message.
            </t>
            
            <t hangText='content type'>
              This parameter is used to indicate the content type of the data in the payload or cipher text fields.
              Integers are from the 'CoAP Content-Formats' IANA registry table.
              Strings are from the IANA 'Media Types' registry.
              Applications SHOULD provide this parameter if the content structure is potentially ambiguous.
            </t>
            
            <t hangText='kid'>
              This parameter identifies one piece of data that can be used as input to find the needed cryptographic key.
              The value of this parameter can be matched against the 'kid' member in a COSE_Key structure.
              Other methods of key distribution can define an equivalent field to be matched.
              Applications MUST NOT assume that 'kid' values are unique.
              There may be more than one key with the same 'kid' value, so all of the keys may need to be checked to find the correct one.
              The internal structure of 'kid' values is not defined and cannot be relied on by applications.
              Key identifier values are hints about which key to use.
	      They are not directly a security critical field.
	      For this reason, they can be placed in the unprotected headers bucket.
            </t>

            <t hangText="Initialization Vector">
              This parameter holds the Initialization Vector (IV) value.
              For some symmetric encryption algorithms this may be referred to as a nonce.
              As the IV is authenticated by the encryption process, it can be placed in the unprotected header bucket.
            </t>

            <t hangText='Partial Initialization Vector'>
              This parameter holds a part of the IV value.
              When using the COSE_Encrypt1 structure, a portion of the IV can be part of the context associated with the key.
              This field is used to carry a value that causes the IV to be changed for each message.
              As the IV is authenticated by the encryption process, this value can be placed in the unprotected header bucket.
              The 'Initialization Vector' and 'Partial Initialization Vector' parameters MUST NOT both be present in the same security layer.
              <vspace/>
              The message IV is generated by the following steps:
              <list style="numbers">
                <t>Left pad the partial IV with zeros to the length of IV.</t>
                <t>XOR the padded partial IV with the context IV.</t>
              </list>
            </t>

            <t hangText='counter signature'>
              This parameter holds one or more counter signature values.
              Counter signatures provide a method of having a second party sign some data.
	      The counter signature can occur as an unprotected attribute in any of the following structures: COSE_Sign, COSE_Sign1, COSE_Signature, COSE_Encrypt, COSE_recipient, COSE_Encrypt1, COSE_Mac and COSE_Mac0.
              These structures all have the same beginning elements so that a consistent calculation of the counter signature can be computed.
              Details on computing counter signatures are found in <xref target="counter_signature"/>.
            </t>

            <!--
                Removed following IETF 95
            <t hangText='operation time'>
              This parameter provides the time the content cryptographic operation is performed.
              For signatures and recipient structures, this would be the time that the signature or recipient key object was created.
              For content structures, this would be the time that the content structure was created.
              The unsigned integer value is the number of seconds, excluding leap seconds, after midnight UTC, January 1, 1970.
              The field is primarily intended to be to be used for counter signatures, however it can additionally be used for replay detection as well.
              </t>
              -->

          </list>
        </t>


        <texttable anchor="Header-Table" title="Common Header Parameters">
          <ttcol align='left' width='9em'>name</ttcol>
          <ttcol align='left' width='5em'>label</ttcol>
          <ttcol align='left' width='14em'>value type</ttcol>
          <ttcol align='left' width='11em'>value registry</ttcol>
          <ttcol align='left'>description</ttcol>
          
          <c>alg</c>        <c>1</c>        <c>int / tstr</c>        <c>COSE Algorithm Registry</c>       <c>Cryptographic algorithm to use</c>
          <c>crit</c>       <c>2</c>        <c>[+ label]</c>         <c>COSE Header Label Registry</c>    <c>Critical headers to be understood</c>
          <c>content type</c> <c>3</c>      <c>tstr / uint</c>        <c>CoAP Content- Formats or Media Types registry</c>          <c>Content type of the payload</c>
          <c>kid</c>        <c>4</c>        <c>bstr</c>              <c></c>                              <c>key identifier</c>
          <c>IV</c>         <c>5</c>        <c>bstr</c>              <c></c>                              <c>Full Initialization Vector</c>
          <c>Partial IV</c> <c>6</c>        <c>bstr</c>              <c></c>                              <c>Partial Initialization Vector</c>
          <c>counter signature</c> <c>7</c> <c>COSE_Signature / [+ COSE_Signature ]</c>    <c></c>                              <c>CBOR encoded signature structure</c>
          <!--
              Removed following IETF 95
              <c>operation time</c><c>8</c>      <c>uint</c>              <c></c>                             <c>Time the COSE structure was created</c>
              -->
        </texttable>

        <t>
          The CDDL fragment that represents the set of headers defined in this section is given below.
          Each of the headers is tagged as optional because they do not need to be in every map, headers required in specific maps are discussed above.
        </t>
          
<figure><artwork type="CDDL"><![CDATA[
Generic_Headers = (
    ? 1 => int / tstr,  ; algorithm identifier
    ? 2 => [+label],    ; criticality
    ? 3 => tstr / int,  ; content type
    ? 4 => bstr,        ; key identifier
    ? 5 => bstr,        ; IV
    ? 6 => bstr,        ; Partial IV
    ? 7 => COSE_Signature / [+COSE_Signature] ; Counter signature
)
]]></artwork></figure>

      </section>
    </section>

    
    <section anchor="signing-structure" title="Signing Objects">
      <t>
        COSE supports two different signature structures.
        COSE_Sign allows for one or more signers to be applied to a single content.
        COSE_Sign1 is restricted to a single signer.
        The structures cannot be converted between each other; the signature computation includes a parameter identifying which structure is being used.
      </t>

      <section title="Signing with One or More Signers" anchor="full-signature">
      <t>
        The COSE_Sign structure allows for one or more signatures to be applied to a message payload.
        There are provisions for parameters about the content and parameters about the signature to be carried along with the signature itself.
        These parameters may be authenticated by the signature, or just present.
        An example of a parameter about the content is the content type.
        Examples of parameters about the signature would be the algorithm and key used to create the signature and counter signatures.
      </t>

      <t>
        When more than one signature is present, the successful validation of one signature associated with a given signer is usually treated as a successful signature by that signer.
        However, there are some application environments where other rules are needed.
        An application that employs a rule other than one valid signature for each signer must specify those rules.
        Also, where simple matching of the signer identifier is not sufficient to determine whether the signatures were generated by the same signer, the application specification must describe how to determine which signatures were generated by the same signer.
        Support of different communities of recipients is the primary reason that signers choose to include more than one signature.
        For example, the COSE_Sign structure might include signatures generated with the Edwards Digital Signature Algorithm (EdDSA) signature algorithm and with the Elliptic Curve Digital Signature Algorithm (ECDSA) signature algorithm.
        This allows recipients to verify the signature associated with one algorithm or the other.
        (The original source of this text is <xref target="RFC5652"/>.)
        <!-- RFC Editor: This is not a direct quote from RFC 5652, but the basic text has come from there.  I want to acknowledge the original source of the quote but am not sure what is the correct way to go about this.-->
        More detailed information on multiple signature evaluation can be found in <xref target="RFC5752"/>.
      </t>

      <t>
        The signature structure can be encoded either with or without a tag depending on the context it will be used in.
        The signature structure is identified by the CBOR tag TBD1.
        The CDDL fragment that represents this is.
      </t>
      
      <figure><artwork type="CDDL"><![CDATA[
COSE_Sign_Tagged = #6.991(COSE_Sign) ; Replace 991 with TBD1
]]></artwork></figure>
      
      <t>
        A COSE Signed Message is defined in two parts.
        The CBOR object that carries the body and information about the body is called the COSE_Sign structure.
        The CBOR object that carries the signature and information about the signature is called the COSE_Signature structure.
        Examples of COSE Signed Messages can be found in <xref target="SignedExamples"/>.
      </t>
      
      <t>
        The COSE_Sign structure is a CBOR array.
        The fields of the array in order are:

        <list style="hanging">
          <!--
          <t hangText='msg_type'>
            identifies this as providing the signed security service.
            The value MUST be msg_type_signed (1).
            </t>
          -->
          
          <t hangText='protected'>
            as described in <xref target="header-parameters"/>.
          </t>
          
          <t hangText='unprotected'>
            as described in <xref target="header-parameters"/>.
          </t>
          
          <t hangText='payload'>
            contains the serialized content to be signed.
            If the payload is not present in the message, the application is required to supply the payload separately.
            The payload is wrapped in a bstr to ensure that it is transported without changes.
            If the payload is transported separately ("detached content"), then a nil CBOR object is placed in this location and it is the responsibility of the application to ensure that it will be transported without changes.
            <vspace blankLines="1"/>
            Note: When a signature with message recovery algorithm is used (<xref target="SigAlgs"/>), the maximum number of bytes that can be recovered is the length of the payload.
            The size of the payload is reduced by the number of bytes that will be recovered.
            If all of the bytes of the payload are consumed, then the payload is encoded as a zero length binary string rather than as being absent.
          </t>
          
          <t hangText='signatures'>
            is an array of signatures.
            Each signature is represented as a COSE_Signature structure.
          </t>
          
        </list>
      </t>

      <t>
        The CDDL fragment which represents the above text for COSE_Sign follows.
      </t>

      <figure><artwork type="CDDL"><![CDATA[
COSE_Sign = [
    Headers,
    payload : bstr / nil,
    signatures : [+ COSE_Signature]
]
]]></artwork></figure>

      <t>
        The COSE_Signature structure is a CBOR array.
        The fields of the array in order are:

        <list style="hanging">
          <t hangText='protected'>
            as described in <xref target="header-parameters"/>.
          </t>
          
          <t hangText='unprotected'>
            as described in <xref target="header-parameters"/>.
          </t>
          
          <t hangText='signature'>
            contains the computed signature value.
            The type of the field is a bstr.
          </t>
          
        </list>
      </t>

      <t>
        The CDDL fragment which represents the above text for COSE_Signature follows.
      </t>

      <figure><artwork type="CDDL"><![CDATA[
COSE_Signature =  [
    Headers,      
    signature : bstr
]
]]></artwork></figure>
    </section>

    <section title="Signing with One Signer">
      <t>
        The COSE_Sign1 signature structure is used when only one signer is going to be placed on a message.
        The parameters dealing with the content and the signature are placed in the same pair of buckets rather than having the separation of COSE_Sign.
      </t>
      
        <t>
          The structure can be encoded either with or without a tag depending on the context it will be used in.
          The structure is identified by the CBOR tag TBD7.
          The CDDL fragment that represents this is:
        </t>

        <figure><artwork type="CDDL"><![CDATA[
COSE_Sign1_Tagged = #6.997(COSE_Sign1) ; Replace 997 with TBD7
]]></artwork></figure>

        <t>
          The CBOR object that carries the body, the signature and the information about the body and signature is called the COSE_Sign1 structure.
          Examples of COSE Single signature messages can be found in <xref target="Sign1_Examples"/>.
        </t>
        
        <t>
          The COSE_Sign1 structure is a CBOR array.
          The fields of the array in order are:

          <list style="hanging">
            <!--
                <t hangText='msg_type'>
                identifies this as providing the signed security service.
                The value MUST be msg_type_signed (1).
                </t>
            -->
            
            <t hangText='protected'>
              as described in <xref target="header-parameters"/>.
            </t>
            
            <t hangText='unprotected'>
              as described in <xref target="header-parameters"/>.
            </t>
            
            <t hangText='payload'>
              as described in <xref target="full-signature"/>.
            </t>

            <t hangText='signature'>
              contains the computed signature value.
              The type of the field is a bstr.
            </t>
          </list>
        </t>

        <t>
          The CDDL fragment which represents the above text for COSE_Sign1 follows.
        </t>

        <figure><artwork type="CDDL"><![CDATA[
COSE_Sign1 = [
    Headers,
    payload : bstr / nil,
    signature : bstr
]
]]></artwork></figure>
        
        
      </section>

      <section title="Externally Supplied Data" anchor="Extern_AAD">
        <t>
          One of the features that we supply in the COSE document is the ability for applications to provide additional data to be authenticated as part of the security, but that is not carried as part of the COSE object.
          The primary reason for supporting this can be seen by looking at the CoAP message structure <xref target="RFC7252"/> where the facility exists for options to be carried before the payload.
          An example of data that can be placed in this location would be CoAP options for transaction ids and nonces to check for replay protection.
          If the data is in the options section, then it is available for routers to help in performing the replay detection and prevention.
          However, it may also be desired to protect these values so that if they are modified in transit it can be detected.
        </t>

        <t>
          This document describes the process for using a byte array of externally supplied authenticated data, however the method of constructing the byte array is a function of the application.
          Applications that use this feature need to define how the externally supplied authenticated data is to be constructed.
          Such a construction needs to take into account the following issues:
          <list style="symbols">
            <t>
              If multiple items are included, care needs to be taken that data cannot bleed between the items.
              This is usually addressed by making fields fixed width and/or encoding the length of the field.
              Using options from CoAP <xref target="RFC7252"/> as an example, these fields use a TLV structure so they can be concatenated without any problems.
            </t>
            <t>
              If multiple items are included, a defined order for the items needs to be defined.
              Using options from CoAP as an example, an application could state that the fields are to be ordered by the option number.
            </t>
            <t>
              Applications need to ensure that the byte stream is going to be the same on both sides.
              Using options from CoAP might give a problem if the same relative numbering is kept.
              An intermediate node could insert or remove an option changing how the relative number is done.
              An application would need to specify that the relative number must be re-encoded to be relative only to the options that are in the external data.
            </t>
          </list>
        </t>
      </section>


      <section title="Signing and Verification Process" anchor="Sig_structure">

        <t>
          In order to create a signature, a well-defined byte stream is needed.
          This algorithm takes in the body information (COSE_Sign or COSE_Sign1), the signer information (COSE_Signature), and the application data (External).
          A CBOR array is used to construct the byte stream.
          The fields of the array in order are:
          <list style="numbers">
            <t>
              A text string identifying the context of the signature.
              The context string is:
              <list style="hanging">
                <t hangText='"Signature"'> for signatures using the COSE_Signature structure.</t>
                <t hangText='"Signature1"'> for signatures using the COSE_Sign1 structure.</t>
                <t hangText='"CounterSignature"'> for signatures used as counter signature attributes.</t>
              </list>
            </t>
            
            <t>
              The protected attributes from the body structure encoded in a bstr type.
              If there are no protected attributes, a bstr of length zero is used.
            </t>

            <t>
              The protected attributes from the signer structure encoded in a bstr type.
              If there are no protected attributes, a bstr of length zero is used.
              This field is omitted for the COSE_Sign1 signature structure.
            </t>

            <t>
              The protected attributes from the application encoded in a bstr type.
              If this field is not supplied, it defaults to a zero length binary string.
              (See <xref target="Extern_AAD"/> for application guidance on constructing this field.)
            </t>

            <t>
              The payload to be signed encoded in a bstr type.
              The payload is placed here independent of how it is transported.
            </t>
          </list>
        </t>

        <t>
          The CDDL fragment which describes the above text is.
        </t>

        <figure><artwork type="CDDL"><![CDATA[
Sig_structure = [
    context: "Signature" / "Signature1" / "CounterSignature",
    body_protected: empty_or_serialized_map,
    ? sign_protected: empty_or_serialized_map,
    external_aad: bstr,
    payload: bstr
]
]]></artwork></figure>

        
        <t>
          How to compute a signature:

          <list style="numbers">
            <t>
              Create a Sig_structure and populate it with the appropriate fields. 
            </t>

            <t>
              Create the value ToBeSigned by encoding the Sig_structure to a byte string using the encoding described in <xref target="CBOR-Canonical"/>.
            </t>

            <t>
              Call the signature creation algorithm passing in K (the key to sign with), alg (the algorithm to sign with) and ToBeSigned (the value to sign).
            </t>

            <t>
              Place the resulting signature value in the 'signature' field of the array.
            </t>
          </list>
        </t>

        <t>
          How to verify a signature:

          <list style="numbers">
            <t>
              Create a Sig_structure object and populate it with the appropriate fields. 
            </t>
            
            <t>
              Create the value ToBeSigned by encoding the Sig_structure to a byte string using the encoding described in <xref target="CBOR-Canonical"/>.
            </t>
            
            <t>
              Call the signature verification algorithm passing in K (the key to verify with), alg (the algorithm used sign with), ToBeSigned (the value to sign), and sig (the signature to be verified).
            </t>
          </list>
        </t>

        <t>
          In addition to performing the signature verification, one must also perform the appropriate checks to ensure that the key is correctly paired with the signing identity and that the appropriate authorization is done.
        </t>

      </section>

      <section anchor="counter_signature" title="Computing Counter Signatures">
        <t>
          Counter signatures provide a method of having a different signature occur on some piece of content.
          This is normally used to provide a signature on a signature allowing for a proof that a signature existed at a given time (i.e. a Timestamp).
          In this document we allow for counter signatures to exist in a greater number of environments.
          As an example, it is possible to place a counter signature in the unprotected attributes of a COSE_Encrypt object.
          This would allow for an intermediary to either verify that the encrypted byte stream has not been modified, without being able to decrypt it.
          Or for the intermediary to assert that an encrypted byte stream either existed at a given time or passed through it in terms of routing (i.e. a proxy signature).
        </t>

        <t>
          An example of a counter signature on a signature can be found in <xref target="Appendix_B_1_3"/>.
          An example of a counter signature in an encryption object can be found in <xref target="Appendix_B_3_3"/>.
        </t>

        <t>
          The creation and validation of counter signatures over the different items relies on the fact that the structure of the objects have the same structure.
          The elements are a set of protected attributes, a set of unprotected attributes and a body in that order.
          This means that the Sig_structure can be used in a uniform manner to get the byte stream for processing a signature.
          If the counter signature is going to be computed over a COSE_Encrypt structure, the body_protected and payload items can be mapped into the Sig_structure in the same manner as from the COSE_Sign structure.
        </t>

        <t>
          It should be noted that only a signature algorithm with appendix (see <xref target="SigAlgs"/>) can be used for counter signatures.
          This is because the body should be able to be processed without having to evaluate the counter signature, and this is not possible for signature schemes with message recovery.
        </t>
      </section>
    </section>

    <section anchor="encryption-object" title="Encryption Objects">
      <t>
        COSE supports two different encryption structures.
        COSE_Encrypt1 is used when a recipient structure is not needed because the key to be used is known implicitly.
        COSE_Encrypt is used the rest of the time.
        This includes cases where there are multiple recipients or a recipient algorithm other than direct is used.
      </t>

      <section title="Enveloped COSE Structure" anchor="EnvelopedData">

      <t>
        The enveloped structure allows for one or more recipients of a message.
        There are provisions for parameters about the content and parameters about the recipient information to be carried in the message.
        The protected parameters associated with the content are authenticated by the content encryption algorithm.
        The protected parameters associated with the recipient are authenticated by the recipient algorithm (when the algorithm supports it).
        Examples of parameters about the content are the type of the content, and the content encryption algorithm.
        Examples of parameters about the recipient are the recipient's key identifier, the recipient encryption algorithm.
      </t>
      
      <t>
        The same techniques and structures are used for encrypting both the plain text and the keys used to protect the text.
        
        This is different from the approach used by both CMS <xref target="RFC5652"/> and JSON Web Encryption (JWE) <xref target="RFC7516"/> where different structures are used for the content layer and for the recipient layer.
        Two structures are defined: COSE_Encrypt to hold the encrypted content, and COSE_recipient to hold the encrypted keys for recipients.
        
        Examples of encrypted messages can be found in <xref target="EnvelopedExamples"/>.
      </t>

      <t>
        The COSE_Encrypt structure can be encoded either with or without a tag depending on the context it will be used in.
        The structure is identified by the CBOR tag TBD2.
        The CDDL fragment that represents this is.
      </t>

      <figure><artwork type="CDDL"><![CDATA[
COSE_Encrypt_Tagged = #6.992(COSE_Encrypt) ; Replace 992 with TBD2
]]></artwork></figure>

      <t>
        The COSE_Encrypt structure is a CBOR array.
        The fields of the array in order are:

        <list style="hanging">
          <!--
          <t hangText='msg_type'>
            identifies this as providing the encrypted security service.
            The value MUST be msg_type_encrypted (2).
          </t>
          -->
          
          <t hangText='protected'>
            as described in <xref target="header-parameters"/>.
          </t>
          
          <t hangText='unprotected'>
            as described in <xref target="header-parameters"/>.
          </t>
          
          <t hangText='ciphertext'>
            contains the cipher text encoded as a bstr.
            If the cipher text is to be transported independently of the control information about the encryption process (i.e. detached content) then the field is encoded as a nil value.
          </t>
          
          <t hangText='recipients'>
            contains an array of recipient information structures.
            The type for the recipient information structure is a COSE_recipient.
          </t>
        </list>
      </t>

      <t>
        The CDDL fragment that corresponds to the above text is:
      </t>
        
      <figure><artwork type="CDDL"><![CDATA[
COSE_Encrypt = [
    Headers,
    ciphertext: bstr / nil,
    recipients: [+COSE_recipient]
]
]]></artwork></figure>

      <t>
        The COSE_recipient structure is a CBOR array.
        The fields of the array in order are:

        <list style="hanging">

          <t hangText='protected'>
            as described in <xref target="header-parameters"/>.
          </t>
          
          <t hangText='unprotected'>
            as described in <xref target="header-parameters"/>.
          </t>
          
          <t hangText='ciphertext'>
            contains the encrypted key encoded as a bstr.
            If there is not an encrypted key, then this field is encoded as a nil value.
          </t>
          
          <t hangText='recipients'>
            contains an array of recipient information structures.
            The type for the recipient information structure is a COSE_recipient.
            (And example of this can be found in <xref target="three-layer"/>.)
            If there are no recipient information structures, this element is absent.
          </t>
        </list>
      </t>

      <t>
        The CDDL fragment that corresponds to the above text for COSE_recipient is:
      </t>
      
      <figure><artwork type="CDDL"><![CDATA[
COSE_recipient = [    
    Headers,
    ciphertext: bstr / nil,
    ? recipients: [+COSE_recipient]
]
]]></artwork></figure>

      <section anchor="key-management-methods" title="Recipient Algorithm Classes">
        <t>
          An encrypted message consists of an encrypted content and an encrypted CEK for one or more recipients.
          The CEK is encrypted for each recipient, using a key specific to that recipient.
          The details of this encryption depend on which class the recipient algorithm falls into.
          Specific details on each of the classes can be found in <xref target="key-management-algs"/>.
          A short summary of the five recipient algorithm classes is:
          <list style="hanging">
            <t hangText="direct:">
              The CEK is the same as the identified previously distributed symmetric key or derived from a previously distributed secret.  
              No CEK is transported in the message.
            </t>
            <t hangText="symmetric key-encryption keys:"> The CEK is encrypted using a previously distributed symmetric KEK.</t>
            <t hangText="key agreement:"> The recipient's public key and a sender's private key are used to generate a pairwise secret, a KDF is applied to derive a key, and then the CEK is either the derived key or encrypted by the derived key.</t>
            <t hangText="key transport:"> The CEK is encrypted with the recipient's public key. No key transport algorithms are defined in this document.</t>
            <t hangText="passwords:"> The CEK is encrypted in a KEK that is derived from a password. No password algorithms are defined in this document.</t>
          </list>
        </t>

      </section>

    </section>

    <section title="Single Recipient Encrypted">
      <t>
        The COSE_Encrypt1 encrypted structure does not have the ability to specify recipients of the message.
        The structure assumes that the recipient of the object will already know the identity of the key to be used in order to decrypt the message.
        If a key needs to be identified to the recipient, the enveloped structure ought to be used.
      </t>

      <t>
        Examples of encrypted messages can be found in <xref target="EnvelopedExamples"/>.
      </t>

      <t>
        The COSE_Encrypt1 structure can be encoded either with or without a tag depending on the context it will be used in.
        The COSE_Encrypt1 structure is identified by the CBOR tag TBD3.
        The CDDL fragment that represents this is.
      </t>

      <figure><artwork type="CDDL"><![CDATA[
COSE_Encrypt1_Tagged = #6.993(COSE_Encrypt1) ; Replace 993 with TBD3
]]></artwork></figure>


      <t>
        The COSE_Encrypt structure is a CBOR array.
        The fields of the array in order are:

        <list style="hanging">
          <!--
          <t hangText='msg_type'>
            identifies this as providing the encrypted data security service.
            This value MUST be mg_type_encrypted (4).
            </t>
          -->
          <t hangText='protected'> as described in <xref target="header-parameters"/>.</t>
          <t hangText='unprotected'> as described in <xref target="header-parameters"/>.</t>
          <t hangText='ciphertext'> as described in <xref target="EnvelopedData"/>.</t>
        </list>
      </t>

      <t>
        The CDDL fragment for COSE_Encrypt1 that corresponds to the above text is:
      </t>
      
      <figure><artwork type="CDDL"><![CDATA[
COSE_Encrypt1 = [
    Headers,
    ciphertext: bstr / nil,
]
]]></artwork></figure>
      
    </section>

      
      <section anchor="encryption-algorithm-for-aead-algorithms" title="Encryption Algorithm for AEAD algorithms">

        <t>
          The encryption algorithm for AEAD algorithms is fairly simple.
          The first step is to create a consistent byte stream for the authenticated data structure.
          For this purpose, we use a CBOR array,  the fields of the array in order are:

          <list style="numbers">
            <t>
              A text string identifying the context of the authenticated data structure.  The context string is:
              <list style="hanging">
                <t hangText='"Encrypt1"'> for the content encryption of a COSE_Encrypt1 data structure.</t>
                <t hangText='"Encrypt"'> for the first level of a COSE_Encrypt data structure (i.e. for content encryption).</t>
                <t hangText='"Enc_Recipient"'> for a recipient encoding to be placed in an COSE_Encrypt data structure.</t>
                <t hangText='"Mac_Recipient"'> for a recipient encoding to be placed in a MAC message structure.</t>
                <t hangText='"Rec_Recipient"'>for a recipient encoding to be placed in a recipient structure.</t>
              </list>
            </t>

            <t>
              The protected attributes from the body structure encoded in a bstr type.  If there are no protected attributes, a bstr of length zero is used.
            </t>

            <t>
              The protected attributes from the application encoded in a bstr type.  If this field is not supplied, it defaults to a zero length bstr.
              (See <xref target="Extern_AAD"/> for application guidance on constructing this field.)
            </t>
          </list>
        </t>

        <t>
          The CDDL fragment which describes the above text is:
        </t>
        
        <figure><artwork type="CDDL"><![CDATA[
Enc_structure = [
    context : "Encrypt" / "Encrypt1" / "Enc_Recipient" /
        "Mac_Recipient" / "Rec_Recipient",
    protected: empty_or_serialized_map,
    external_aad: bstr
]
]]></artwork></figure>


        <t>
          How to encrypt a message:
          <list style="numbers">
            <t>
              Create an Enc_structure and populate it with the appropriate fields.
            </t>

            <t>
              Encode the Enc_structure to a byte stream (AAD) using the encoding described in <xref target="CBOR-Canonical"/>.
            </t>

            <t>
              Determine the encryption key.
              This step is dependent on the class of recipient algorithm being used.
              For:

              <list style="hanging">
                <t hangText="No Recipients:">
                  The key to be used is determined by the algorithm and key at the current level.
                </t>
                <t hangText="Direct and Direct Key Agreement:">
                  The key is determined by the key and algorithm in the recipient structure.
                  The encryption algorithm and size of the key to be used are inputs into the KDF used for the recipient.
                  (For direct, the KDF can be thought of as the identity operation.)
                </t>
                <t hangText="Other:">
                  The key is randomly generated.
                </t>
              </list>
            </t>
            
            <t>
              Call the encryption algorithm with K (the encryption key to use), P (the plain text) and AAD.
              Place the returned cipher text into the 'ciphertext' field of the structure.
            </t>

            <t>
              For recipients of the message, recursively perform the encryption algorithm for that recipient using the encryption key as the plain text.
            </t>
          </list>
        </t>

        <t>
          How to decrypt a message:
          <list style="numbers">
            <t>
              Create a Enc_structure and populate it with the appropriate fields.
            </t>

            <t>
              Encode the Enc_structure to a byte stream (AAD) using the encoding described in <xref target="CBOR-Canonical"/>.
            </t>

            <t>
              Determine the decryption key.
              This step is dependent on the class of recipient algorithm being used.
              For:

              <list style="hanging">
                <t hangText="No Recipients:">
                  The key to be used is determined by the algorithm and key at the current level.
                </t>
                <t hangText="Direct and Direct Key Agreement:">
                  The key is determined by the key and algorithm in the recipient structure.
                  The encryption algorithm and size of the key to be used are inputs into the KDF used for the recipient.
                  (For direct, the KDF can be thought of as the identity operation.)
                </t>
                <t hangText="Other:">
                  The key is determined by decoding and decrypting one of the recipient structures.
                </t>
              </list>
            </t>
            
            <t>
              Call the decryption algorithm with K (the decryption key to use), C (the cipher text) and AAD.
            </t>
          </list>
        </t>
        

      </section>

      <section anchor="encryption-algorithm-for-ae-algorithms" title="Encryption algorithm for AE algorithms">

        <t>
          How to encrypt a message:
          <list style="numbers">
            <t>
              Verify that the 'protected' field is empty.
            </t>
            <t>
              Verify that there was no external additional authenticated data supplied for this operation.
            </t>
            <t>
              Determine the encryption key.
              This step is dependent on the class of recipient algorithm being used.
              For:

              <list style="hanging">
                <t hangText="No Recipients:">
                  The key to be used is determined by the algorithm and key at the current level.
                </t>
                <t hangText="Direct and Direct Key Agreement:">
                  The key is determined by the key and algorithm in the recipient structure.
                  The encryption algorithm and size of the key to be used are inputs into the KDF used for the recipient.
                  (For direct, the KDF can be thought of as the identity operation.)
                </t>
                <t hangText="Other:">
                  The key is randomly generated.
                </t>
              </list>
            </t>
            
            <t>
              Call the encryption algorithm with K (the encryption key to use) and the P (the plain text).
              Place the returned cipher text into the 'ciphertext' field of the structure.
            </t>

            <t>
              For recipients of the message, recursively perform the encryption algorithm for that recipient using the encryption key as the plain text.
            </t>
          </list>
        </t>

        <t>
          How to decrypt a message:
          <list style="numbers">
            <t>
              Verify that the 'protected' field is empty.
            </t>
            <t>
              Verify that there was no external additional authenticated data supplied for this operation.
            </t>
            <t>
              Determine the decryption key.
              This step is dependent on the class of recipient algorithm being used.
              For:

              <list style="hanging">
                <t hangText="No Recipients:">
                  The key to be used is determined by the algorithm and key at the current level.
                </t>
                <t hangText="Direct and Direct Key Agreement:">
                  The key is determined by the key and algorithm in the recipient structure.
                  The encryption algorithm and size of the key to be used are inputs into the KDF used for the recipient.
                  (For direct, the KDF can be thought of as the identity operation.)
                </t>
                <t hangText="Other:">
                  The key is determined by decoding and decrypting one of the recipient structures.
                </t>
              </list>
            </t>
            
            <t>
              Call the decryption algorithm with K (the decryption key to use), and C (the cipher text).
            </t>

          </list>
        </t>

      </section>
    </section>
    
    <section anchor="mac-objects" title="MAC Objects">

      <t>
        COSE supports two different MAC structures.
        COSE_MAC0 is used when a recipient structure is not needed because the key to be used is implicitly known.
        COSE_MAC is used for all other cases.
        These include a requirement for multiple recipients, the key being unknown, a recipient algorithm of other than direct.
      </t>

      <t>
        In this section we describe the structure and methods to be used when doing MAC authentication in COSE. 
        This document allows for the use of all of the same classes of recipient algorithms as are allowed for encryption.
      </t>
      <t>
        When using MAC operations, there are two modes in which it can be used. 
        The first is just a check that the content has not been changed since the MAC was computed. 
        Any class of recipient algorithm can be used for this purpose. 
        The second mode is to both check that the content has not been changed since the MAC was computed, and to use the recipient algorithm to verify who sent it.
        The classes of recipient algorithms that support this are those that use a pre-shared secret or do static-static key agreement (without the key wrap step).
        In both of these cases, the entity that created and sent the message MAC can be validated.
        (This knowledge of sender assumes that there are only two parties involved and you did not send the message yourself.)
      </t>

      <section title="MAC Message with Recipients" anchor="Mac_n">

      <t>
        The multiple recipient MAC message uses two structures, the COSE_Mac structure defined in this section for carrying the body and the COSE_recipient structure (<xref target="EnvelopedData"/>) to hold the key used for the MAC computation.
        Examples of MAC messages can be found in <xref target="MacExamples"/>.
      </t>

      <t>
        The MAC structure can be encoded either with or without a tag depending on the context it will be used in.
        The MAC structure is identified by the CBOR tag TBD4.
        The CDDL fragment that represents this is:
      </t>

      <figure><artwork type="CDDL"><![CDATA[
COSE_Mac_Tagged = #6.994(COSE_Mac)         ; Replace 994 with TBD4
]]></artwork></figure>

      <t>
        The COSE_Mac structure is a CBOR array.
        The fields of the array in order are:

        <list style="hanging">
          <!--
          <t hangText='msg_type'>
            identifies this as providing the encrypted security service.
            The value MUST be msg_type_mac (3).
          </t>
          -->

          <t hangText='protected'>
            as described in <xref target="header-parameters"/>.
          </t>

          <t hangText='unprotected'>
            as described in <xref target="header-parameters"/>.
          </t>

          <t hangText='payload'>
            contains the serialized content to be MACed.
            If the payload is not present in the message, the application is required to supply the payload separately.
            The payload is wrapped in a bstr to ensure that it is transported without changes.
            If the payload is transported separately (i.e. detached content), then a nil CBOR value is placed in this location and it is the responsibility of the application to ensure that it will be transported without changes.
          </t>

          <t hangText='tag'>
            contains the MAC value.
          </t>

          <t hangText='recipients'> as described in <xref target="EnvelopedData"/>.
          </t>
        </list>
      </t>

      <t>
        The CDDL fragment which represents the above text for COSE_Mac follows.
      </t>
      
      <figure><artwork type="CDDL"><![CDATA[
COSE_Mac = [
   Headers,
   payload: bstr / nil,
   tag: bstr,
   recipients: [+COSE_recipient]
]
]]></artwork></figure>

      </section>

      <section title="MAC Messages with Implicit Key">
      <t>
        In this section we describe the structure and methods to be used when doing MAC authentication for those cases where the recipient is implicitly known.
      </t>
      
      <t>
        The MAC message uses the COSE_Mac0 structure defined in this section for carrying the body.
        Examples of MAC messages with an implicit key can be found in <xref target="Mac0Examples"/>.
      </t>

      <t>
        The MAC structure can be encoded either with or without a tag depending on the context it will be used in.
        The MAC structure is identified by the CBOR tag TBD6.
        The CDDL fragment that represents this is:
      </t>

      <figure><artwork type="CDDL"><![CDATA[
COSE_Mac0_Tagged = #6.996(COSE_Mac0)    ; Replace 996 with TBD6
]]></artwork></figure>
      
      <t>
        The COSE_Mac0 structure is a CBOR array.
        The fields of the array in order are:

        <list style="hanging">
          <t hangText='protected'>as described in <xref target="header-parameters"/>.</t>

          <t hangText='unprotected'>as described in <xref target="header-parameters"/>.</t>

          <t hangText='payload'>as described in <xref target="Mac_n"/>.</t>

          <t hangText='tag'>contains the MAC value.</t>
        </list>
      </t>

      <t>
        The CDDL fragment which corresponds to the above text is:
      </t>

      <figure><artwork type="CDDL"><![CDATA[
COSE_Mac0 = [
   Headers,
   payload: bstr / nil,
   tag: bstr,
]
]]></artwork></figure>

      </section>

        <section title="How to compute and verify a MAC">
          <t>
            In order to get a consistent encoding of the data to be authenticated, the MAC_structure is used to have a canonical form.
            The MAC_structure is a CBOR array.
            The fields of the MAC_structure in order are:
            <list style="numbers">
              <t>
                A text string that identifies the structure that is being encoded.
                This string is "MAC" for the COSE_Mac structure.
                This string is "MAC0" for the COSE_Mac0 structure.
              </t>
              <t>
                The protected attributes from the COSE_MAC structure.
                If there are no protected attributes, a zero length bstr is used.
              </t>
              <t>
                If the application has supplied external authenticated data, encode it as a binary value and place in the MAC_structure.
                If there is no external authenticated data, then use a zero length 'bstr'.
                (See <xref target="Extern_AAD"/> for application guidance on constructing this field.)
              </t>
              <t>
                The payload to be MAC-ed encoded in a bstr type.
                The payload is placed here independent of how it is transported.
              </t>
            </list>
          </t>

          <t>
            The CDDL fragment that corresponds to the above text is:
          </t>
          
          <figure><artwork type="CDDL"><![CDATA[
MAC_structure = [
     context: "MAC" / "MAC0",
     protected: empty_or_serialized_map,
     external_aad: bstr,
     payload: bstr
]
]]></artwork></figure>

          <t>
            The steps to compute a MAC are:

            <list style="numbers">
              <t>
                Create a MAC_structure and populate it with the appropriate fields.
              </t>
              
              <t>
                Encode the MAC_structure to a byte stream using the encoding described in <xref target="CBOR-Canonical"/>.
              </t>
              
              <t>
                Call the MAC creation algorithm passing in K (the key to use), alg (the algorithm to MAC with) and ToBeMaced (the value to compute the MAC on).
              </t>

              <t>
                Place the resulting MAC in the 'tag' field of the COSE_Mac structure.
              </t>
              
              <t>
                Encrypt and encode the MAC key for each recipient of the message.
              </t>
            </list>
          </t>

        <t>
          How to verify a MAC are:

          <list style="numbers">
            <t>
              Create a MAC_structure object and populate it with the appropriate fields. 
            </t>
            
            <t>
                Encode the MAC_structure to a byte stream using the encoding described in <xref target="CBOR-Canonical"/>.
            </t>

            <t>
              Obtain the cryptographic key from one of the recipients of the message.
            </t>
            
            <t>
              Call the MAC creation algorithm passing in K (the key to use), alg (the algorithm to MAC with) and ToBeMaced (the value to compute the MAC on).
            </t>

            <t>
              Compare the MAC value to the 'tag' field of the COSE_Mac structure.
            </t>
          </list>
        </t>

        </section>
      </section>
    <section anchor="key-structure" title="Key Structure">

      <t>
        A COSE Key structure is built on a CBOR map object.
        The set of common parameters that can appear in a COSE Key can be found in the IANA registry 'COSE Key Common Parameter Registry' (<xref target="cose-key-map-registry"/>).
        Additional parameters defined for specific key types can be found in the IANA registry 'COSE Key Type Parameters' (<xref target="cose-key-parameter-registry"/>).
      </t>

      <t>
        A COSE Key Set uses a CBOR array object as its underlying type.
        The values of the array elements are COSE Keys.
        A Key Set MUST have at least one element in the array.
      </t>

      <t>
        Each element in a key set MUST be processed independently.
        If one element in a key set is either malformed or uses a key which is not understood by an application, that key is ignored and the other keys are processed normally.
      </t>

      <t>
        The element "kty" is a required element in a COSE_Key map.
      </t>

      <t>
        The CDDL grammar describing COSE_Key and COSE_KeySet is:
      </t>

      <figure><artwork type="CDDL"><![CDATA[
COSE_Key = {
    key_kty => tstr / int,
    ? key_ops => [+ (tstr / int) ],
    ? key_alg => tstr / int,
    ? key_kid => bstr,
    ? key_baseIV => bstr,
    * label => values
}

COSE_KeySet = [+COSE_Key]
]]></artwork></figure>


    <section anchor="COSE_KEY_KEYS" title="COSE Key Common Parameters">

      <t>
        This document defines a set of common parameters for a COSE Key object.
        <xref target="table-key-labels"/> provides a summary of the parameters defined in this section.
        There are also parameters that are defined for specific key types.
        Key type specific parameters can be found in <xref target="Key-specific-labels"/>.
      </t>

      <texttable title="Key Map Labels" anchor="table-key-labels">
        <ttcol align='left'>name</ttcol>
        <ttcol align='left'>label</ttcol>
        <ttcol align='left' width="14em">CBOR type</ttcol>
        <ttcol align='left'>registry</ttcol>
        <ttcol align='left'>description</ttcol>
        
        <c>kty</c>        <c>1</c>        <c>tstr / int</c>  <c>COSE General Values</c>        <c>Identification of the key type</c>
        <c>key_ops</c>    <c>4</c>        <c>[+ (tstr/int)]</c> <c></c>     <c>Restrict set of permissible operations</c>
        <c>alg</c>        <c>3</c>        <c>tstr / int</c>  <c>COSE Algorithm Values</c>        <c>Key usage restriction to this algorithm</c>
        <c>kid</c>        <c>2</c>        <c>bstr</c>        <c></c>        <c>Key Identification value - match to kid in message</c>
        <c>Base IV</c>    <c>5</c>        <c>bstr</c>        <c></c>        <c>Base IV to be xor-ed with Partial IVs</c>
      </texttable>

      <t>
        <list style="hanging">
          <t hangText="kty:">
            This parameter is used to identify the family of keys for this structure, and thus the set of key type specific parameters to be found.
            The set of values defined in this document can be found in <xref target="table_key_types"/>.
            This parameter MUST be present in a key object.
            Implementations MUST verify that the key type is appropriate for the algorithm being processed.
            The key type MUST be included as part of the trust decision process.
          </t>
          
          <t hangText="alg:">
            This parameter is used to restrict the algorithm that is used with the key.
            If this parameter is present in the key structure, the application MUST verify that this algorithm matches the algorithm for which the key is being used.
            If the algorithms do not match, then this key object MUST NOT be used to perform the cryptographic operation.
            Note that the same key can be in a different key structure with a different or no algorithm specified, however this is considered to be a poor security practice.
          </t>
          
          <t hangText="kid:">
            This parameter is used to give an identifier for a key.
            The identifier is not structured and can be anything from a user provided string to a value computed on the public portion of the key.
            This field is intended for matching against a 'kid' parameter in a message in order to filter down the set of keys that need to be checked.
          </t>
          
          <t hangText="key_ops:">
            This parameter is defined to restrict the set of operations that a key is to be used for.
            The value of the field is an array of values from <xref target="table-key-ops"/>.
            Algorithms define the values of key ops that are permitted to appear and are required for specific operations.
          </t>

          <t hangText="Base IV:">
            This parameter is defined to carry the base portion of an IV.
            It is designed to be used with the partial IV header parameter defined in <xref target="cose-headers"/>.
            This field provides the ability to associate a partial IV with a key that is then modified on a per message basis with the partial IV.
            <vspace blankLines="1"/>
            Extreme care needs to be taken when using a Base IV in an application.
            Many encryption algorithms lose security if the same IV is used twice.
            <vspace blankLines="1"/>
            If different keys are derived for each sender, starting at the same base IV is likely to satisfy this condition.
            If the same key is used for multiple senders, then the application needs to provide for a method of dividing the IV space up between the senders.
            This could be done by providing a different base point to start from or a different partial IV to start with and restricting the number of messages to be sent before re-keying.
          </t>
          
        </list>
      </t>

      <texttable title="Key Operation Values" anchor="table-key-ops">
        <ttcol>name</ttcol>
        <ttcol>value</ttcol>
        <ttcol>description</ttcol>
        <c>sign</c>             <c>1</c>        <c>The key is used to create signatures.  Requires private key fields.</c>
        <c>verify</c>           <c>2</c>        <c>The key is used for verification of signatures.</c>
        <c>encrypt</c>          <c>3</c>        <c>The key is used for key transport encryption.</c>
        <c>decrypt</c>          <c>4</c>        <c>The key is used for key transport decryption.  Requires private key fields.</c>
        <c>wrap key</c>         <c>5</c>        <c>The key is used for key wrapping.</c>
        <c>unwrap key</c>       <c>6</c>        <c>The key is used for key unwrapping.  Requires private key fields.</c>
        <c>derive key</c>        <c>7</c>        <c>The key is used for deriving keys.  Requires private key fields.</c>
        <c>derive bits</c>      <c>8</c>        <c>The key is used for deriving bits.  Requires private key fields.</c>
      </texttable>
      
      <t>
        The following provides a CDDL fragment which duplicates the assignment labels from <xref target="table-key-labels"/>.
      </t>
      
      <figure><artwork type="CDDL"><![CDATA[
;key_labels
key_kty=1
key_kid=2
key_alg=3
key_ops=4
key_baseIV=5
]]></artwork></figure>

      <!--
;key_ops values
key_ops_values = (key_ops_sign:1, key_ops_verify:2, key_ops_encrypt:3,
        key_ops_decrypt:4, key_ops_wrap:5, key_ops_unwrap:6,
        key_ops_agree:7)
-->          
      
    </section>
      
    </section>


    <section title="Signature Algorithms" anchor='SigAlgs'>
      <t>
        There are two signature algorithm schemes.
        The first is signature with appendix.
        In this scheme, the message content is processed and a signature is produced, the signature is called the appendix.
        This is the scheme used by algorithms such as ECDSA and RSASSA-PSS.
        (In fact the SSA in RSASSA-PSS stands for Signature Scheme with Appendix.)
      </t>
      <t>
        The signature functions for this scheme are:
      </t>
      <figure><artwork><![CDATA[
signature = Sign(message content, key)

valid = Verification(message content, key, signature)
]]></artwork></figure>
      
      <t>
        The second scheme is signature with message recovery.
        (An example of such an algorithm is <xref target="PVSig"/>.)
        In this scheme, the message content is processed, but part of it is included in the signature.
        Moving bytes of the message content into the signature allows for smaller signatures, the signature size is still potentially large, but the message content has shrunk.
        This has implications for systems implementing these algorithms and for applications that use them.
        The first is that the message content is not fully available until after a signature has been validated.
        Until that point the part of the message contained inside of the signature is unrecoverable.
        The second is that the security analysis of the strength of the signature is very much based on the structure of the message content.
        Messages which are highly predictable require additional randomness to be supplied as part of the signature process.
	In the worst case, it becomes the same as doing a signature with appendix.
        Finally, in the event that multiple signatures are applied to a message, all of the signature algorithms are going to be required to consume the same number of bytes of message content.
        This means that mixing of the different schemes in a single message is not supported, and if a recovery signature scheme is used then the same amount of content needs to be consumed by all of the signatures.
      </t>

      <t>
        The signature functions for this scheme are:
      </t>
      <figure><artwork><![CDATA[
signature, message sent = Sign(message content, key)

valid, message content = Verification(message sent, key, signature)
]]></artwork></figure>

      <t>
        Signature algorithms are used with the COSE_Signature and COSE_Sign1 structures.
        At this time, only signatures with appendixes are defined for use with COSE, however considerable interest has been expressed in using a signature with message recovery algorithm due to the effective size reduction that is possible.
        Implementations will need to keep this in mind for later possible integration.
      </t>
      
      <section title="ECDSA" anchor="ECDSA">
        <t>
          ECDSA <xref target="DSS"/> defines a signature algorithm using ECC.
        </t>

        <t>
          The ECDSA signature algorithm is parameterized with a hash function (h).
          In the event that the length of the hash function output is greater than the group of the key, the left-most bytes of the hash output are used.
        </t>

        <t>
          The algorithms defined in this document can be found in <xref target="table_ecdsa"/>.
        </t>
        
        <texttable title="ECDSA Algorithm Values" anchor="table_ecdsa">
          <ttcol align='left'>name</ttcol>
          <ttcol align='left'>value</ttcol>
          <ttcol align='left'>hash</ttcol>
          <ttcol align='left'>description</ttcol>
          <c>ES256</c>        <c>-7</c>       <c>SHA-256</c>   <c>ECDSA w/ SHA-256</c>
          <c>ES384</c>        <c>-35</c>       <c>SHA-384</c>   <c>ECDSA w/ SHA-384</c>
          <c>ES512</c>        <c>-36</c>       <c>SHA-512</c>   <c>ECDSA w/ SHA-512</c>
        </texttable>

        <t>
          This document defines ECDSA to work only with the curves P-256, P-384 and P-521.
          This document requires that the curves be encoded using the 'EC2' key type.
          Implementations need to check that the key type and curve are correct when creating and verifying a signature.
          Other documents can define it to work with other curves and points in the future.
        </t>

        <t>
          In order to promote interoperability, it is suggested that SHA-256 be used only with curve P-256, SHA-384 be used only with curve P-384 and SHA-512 be used with curve P-521.
          This is aligned with the recommendation in Section 4 of <xref target="RFC5480"/>.
        </t>

        <t>
          The signature algorithm results in a pair of integers (R, S).
          These integers will the same length as length of the key used for the signature process.
          The signature is encoded by converting the integers into byte strings of the same length as the key size.
          The length is rounded up to the nearest byte and is left padded with zero bits to get to the correct length.
          The two integers are then concatenated together to form a byte string that is the resulting signature.
        </t>

        <t>
          Using the function defined in <xref target="RFC3447"/> the signature is:
          <vspace/>
          Signature = I2OSP(R, n) | I2OSP(S, n)
          <vspace/>
          where n = ceiling(key_length / 8)
        </t>

        <t>
          When using a COSE key for this algorithm, the following checks are made:
          <list style="symbols">
            <t>The 'kty' field MUST be present and it MUST be 'EC2'.</t>
            <t>If the 'alg' field is present, it MUST match the ECDSA signature algorithm being used.</t>
            <t>If the 'key_ops' field is present, it MUST include 'sign' when creating an ECDSA signature.</t>
            <t>If the 'key_ops' field is present, it MUST include 'verify' when verifying an ECDSA signature.</t>
          </list>
        </t>

        <section title="Security Considerations">
          <t>
            The security strength of the signature is no greater than the minimum of the security strength associated with the bit length of the key and the security strength of the hash function.
          </t>

          <t>
            System which have poor random number generation can leak their keys by signing two different messages with the same value 'k' (the per-message random value).
            <xref target="RFC6979"/> provides a method to deal with this problem by making 'k' be deterministic based on the message content rather than randomly generated.
            Applications that specify ECDSA should evaluate the ability to get good random number generation and require deterministic signatures where poor random number generation exists.
          </t>
          <t>
            Note: Use of this technique is a good idea even when good random number generation exists.
            Doing so both reduces the possibility of having the same value of 'k' in two signature operations and allows for reproducible signature values which helps testing.
          </t>

          <t>
            There are two substitution attacks that can theoretically be mounted against the ECDSA signature algorithm.
            <list style="symbols">
              <t>
                Changing the curve used to validate the signature:
                If one changes the curve used to validate the signature, then potentially one could have a two messages with the same signature each computed under a different curve.
                The only requirement on the new curve is that its order be the same as the old one and it be acceptable to the client.
                An example would be to change from using the curve secp256r1 (aka P-256) to using secp256k1.
                (Both are 256 bit curves.)
                We current do not have any way to deal with this version of the attack except to restrict the overall set of curves that can be used.
              </t>

              <t>
                Change the hash function used to validate the signature:
                If one has either two different hash functions of the same length, or one can truncate a hash function down, then one could potentially find collisions between the hash functions rather than within a single hash function.
                (For example, truncating SHA-512 to 256 bits might collide with a SHA-256 bit hash value.)
                This attack can be mitigated by including the signature algorithm identifier in the data to be signed.
              </t>
            </list>
          </t>
        </section>
        
      </section>

      <section title="Edwards-curve Digital Signature Algorithms (EdDSA)">
        <t>
          
          <xref target="I-D.irtf-cfrg-eddsa"/> describes the elliptic curve signature scheme Edwards-curve Digital Signature Algorithm (EdDSA).
          In that document, the signature algorithm is instantiated using parameters for edwards25519 and edwards448 curves.
          The document additionally describes two variants of the EdDSA algorithm:
          Pure EdDSA, where no hash function is applied to the content before signing and, HashEdDSA where a hash function is applied to the content before signing and the result of that hash function is signed.
          For use with COSE, only the pure EdDSA version is used.
          This is because it is not expected that extremely large contents are going to be needed and, based on the arrangement of the message structure, the entire message is going to need to be held in memory in order to create or verify a signature.
          Thus, the use of an incremental update process would not be useful.
          Applications can provide the same features by defining the content of the message as a hash value and transporting the COSE message and the content as separate items.
        </t>

        <t>
          The algorithms defined in this document can be found in <xref target="table-eddsa-algs"/>.
          A single signature algorithm is defined which can be used for multiple curves.
        </t>
        
        <texttable anchor="table-eddsa-algs" title="EdDSA Algorithm Values">
          <ttcol align='left'>name</ttcol>
          <ttcol align='left'>value</ttcol>
          <ttcol align='left'>description</ttcol>
          <c>EdDSA</c>        <c>-8</c>        <c>EdDSA</c>
        </texttable>

        <t>
          <xref target="I-D.irtf-cfrg-eddsa"/> describes the method of encoding the signature value.
        </t>

        <t>
          When using a COSE key for this algorithm the following checks are made:

          <list style="symbols">
            <t> The 'kty' field MUST be present and it MUST be 'OKP'.</t>
            <t>The 'crv' field MUST be present, and it MUST be a curve defined for this signature algorithm.</t>
            <t>If the 'alg' field is present, it MUST match 'EdDSA'.</t>
            <t>If the 'key_ops' field is present, it MUST include 'sign' when creating an EdDSA signature.</t>
            <t>If the 'key_ops' field is present, it MUST include 'verify' when verifying an EdDSA signature.</t>
          </list>
        </t>

        <section title="Security Considerations">
          <t>
            The Edwards curves for EdDSA and ECDH are distinct and should not be used for the other algorithm.
          </t>

          <t>
            If batch signature verification is performed, a well-seeded cryptographic random number generator is REQUIRED.
            Signing and non-batch signature verification are deterministic operations and do not need random numbers of any kind.
          </t>
          
        </section>

      </section>


      
    </section>


    <section title="Message Authentication (MAC) Algorithms">
      <t>
        Message Authentication Codes (MACs) provide data authentication and integrity protection.
        They provide either no or very limited data origination.
        (One cannot, for example, be used to prove the identity of the sender to a third party.)
      </t>

      <t>
        MACs use the same scheme as signature with appendix algorithms.
        The message content is processed and an authentication code is produced.
	The authentication code is frequently called a tag.
      </t>
      <t>
        The MAC functions are:
      </t>
      <figure><artwork><![CDATA[
tag = MAC_Create(message content, key)

valid = MAC_Verify(message content, key, tag)
]]></artwork></figure>
      

      <t>
        MAC algorithms can be based on either a block cipher algorithm (i.e. AES-MAC) or a hash algorithm (i.e. HMAC).
        This document defines a MAC algorithm using each of these constructions.
      </t>

      <t>
        MAC algorithms are used in the COSE_Mac and COSE_Mac1 structures.
      </t>

      <section title="Hash-based Message Authentication Codes (HMAC)">
        <t>
          The Hash-base Message Authentication Code algorithm (HMAC) <xref target="RFC2104"/><xref target="RFC4231"/> was designed to deal with length extension attacks.
          The algorithm was also designed to allow for new hash algorithms to be directly plugged in without changes to the hash function.
          The HMAC design process has been vindicated as, while the security of hash algorithms such as MD5 has decreased over time, the security of HMAC combined with MD5 has not yet been shown to be compromised <xref target="RFC6151"/>.
        </t>

        <t>
          The HMAC algorithm is parameterized by an inner and outer padding, a hash function (h) and an authentication tag value length.
          For this specification, the inner and outer padding are fixed to the values set in <xref target="RFC2104"/>.
          The length of the authentication tag corresponds to the difficulty of producing a forgery.
          For use in constrained environments, we define a set of HMAC algorithms that are truncated.
          There are currently no known issues with truncation, however the security strength of the message tag is correspondingly reduced in strength.
          When truncating, the left-most tag length bits are kept and transmitted.
        </t>

        <t>
          The algorithms defined in this document can be found in <xref target="table-hmac"/>.
        </t>
        
        <texttable title="HMAC Algorithm Values" anchor="table-hmac">
          <ttcol align='left'>name</ttcol>
          <ttcol align='left'>value</ttcol>
          <ttcol align='left'>Hash</ttcol>
          <ttcol align='left'>Tag Length</ttcol>
          <ttcol align='left'>description</ttcol>
          <c>HMAC 256/64</c>         <c>4</c>        <c>SHA-256</c>    <c>64</c>        <c>HMAC w/ SHA-256 truncated to 64 bits</c>
          <c>HMAC 256/256</c>        <c>5</c>        <c>SHA-256</c>    <c>256</c>       <c>HMAC w/ SHA-256</c>
          <c>HMAC 384/384</c>        <c>6</c>        <c>SHA-384</c>    <c>384</c>       <c>HMAC w/ SHA-384</c>
          <c>HMAC 512/512</c>        <c>7</c>        <c>SHA-512</c>    <c>512</c>       <c>HMAC w/ SHA-512</c>
        </texttable>

        <t>
          Some recipient algorithms carry the key while others derive a key from secret data.
          For those algorithms that carry the key (such as AES-KeyWrap), the size of the HMAC key SHOULD be the same size as the underlying hash function.
          For those algorithms that derive the key (such as ECDH), the derived key MUST be the same size as the underlying hash function.
        </t>

        <t>
          When using a COSE key for this algorithm, the following checks are made:
          <list style="symbols">
            <t>The 'kty' field MUST be present and it MUST be 'Symmetric'.</t>
            <t>If the 'alg' field present, it MUST match the HMAC algorithm being used.</t>
            <t>If the 'key_ops' field is present, it MUST include 'sign' when creating an HMAC authentication tag.</t>
            <t>If the 'key_ops' field is present, it MUST include 'verify' when verifying an HMAC authentication tag.</t>
          </list>
        </t>
        
        <t>
          Implementations creating and validating MAC values MUST validate that the key type, key length, and algorithm are correct and appropriate for the entities involved.
        </t>

        <section title="Security Considerations">
          <t>
            HMAC has proved to be resistant to attack even when used with weakened hash algorithms.
            The current best method appears to be a brute force attack on the key.
            This means that key size is going to be directly related to the security of an HMAC operation.
          </t>
        </section>
      </section>

      <section title="AES Message Authentication Code (AES-CBC-MAC)">
        <t>
          AES-CBC-MAC is defined in <xref target="MAC"/>.
          (Note this is not the same algorithm as AES-CMAC <xref target="RFC4493"/>).
        </t>

        <t>
          AES-CBC-MAC is parameterized by the key length, the authentication tag length and the IV used.
          For all of these algorithms, the IV is fixed to all zeros.
          We provide an array of algorithms for various key lengths and tag lengths.
          The algorithms defined in this document are found in <xref target="table-aes-mac"/>.
        </t>
        

        <texttable title="AES-MAC Algorithm Values" anchor="table-aes-mac">
          <ttcol align='left'>name</ttcol>
          <ttcol align='left'>value</ttcol>
          <ttcol align='left'>key length</ttcol>
          <ttcol align='left'>tag length</ttcol>
          <ttcol align='left'>description</ttcol>
          <c>AES-MAC 128/64</c>         <c>14</c>        <c>128</c>      <c>64</c>       <c>AES-MAC 128 bit key, 64-bit tag</c>
          <c>AES-MAC 256/64</c>         <c>15</c>        <c>256</c>      <c>64</c>       <c>AES-MAC 256 bit key, 64-bit tag</c>
          <c>AES-MAC 128/128</c>        <c>25</c>        <c>128</c>      <c>128</c>      <c>AES-MAC 128 bit key, 128-bit tag</c>
          <c>AES-MAC 256/128</c>        <c>26</c>        <c>256</c>      <c>128</c>      <c>AES-MAC 256 bit key, 128-bit tag</c>
          
        </texttable>

        <t>
          Keys may be obtained either from a key structure or from a recipient structure.
          Implementations creating and validating MAC values MUST validate that the key type, key length and algorithm are correct and appropriate for the entities involved.
        </t>

        <t>
          When using a COSE key for this algorithm, the following checks are made:
          <list style="symbols">
            <t>The 'kty' field MUST be present and it MUST be 'Symmetric'.</t>
            <t>If the 'alg' field present, it MUST match the AES-MAC algorithm being used.</t>
            <t>If the 'key_ops' field is present, it MUST include 'sign' when creating an AES-MAC authentication tag.</t>
            <t>If the 'key_ops' field is present, it MUST include 'verify' when verifying an AES-MAC authentication tag.</t>
          </list>
        </t>
        
        <section title="Security Considerations">
          <t>
            A number of attacks exist against CBC-MAC that need to be considered.
            <list style="symbols">
              <t>
                A single key must only be used for messages of a fixed and known length.
                If this is not the case, an attacker will be able to generate a message with a valid tag given two message, tag pairs.
                This can be addressed by using different keys for different length messages.
                The current structure mitigates this problem as a specific encoding structure which includes lengths is build and signed.
                (CMAC also addresses this issue.)
              </t>
              <t>
                If the same key is used for both encryption and authentication operations, using CBC modes an attacker can produce messages with a valid authentication code.
              </t>
              <t>
                If the IV can be modified, then messages can be forged.
                This is addressed by fixing the IV to all zeros.
              </t>
            </list>
          </t>
            
        </section>

      </section>
    </section>

    <section title="Content Encryption Algorithms">
      <t>
        Content Encryption Algorithms provide data confidentiality for potentially large blocks of data using a symmetric key.
        They provide integrity on the data that was encrypted, however they provide either no or very limited data origination.
        (One cannot, for example, be used to prove the identity of the sender to a third party.)
        The ability to provide data origination is linked to how the CEK is obtained.
      </t>

      <t>
        COSE restricts the set of legal content encryption algorithms to those that support authentication both of the content and additional data.
        The encryption process will generate some type of authentication value, but that value may be either explicit or implicit in terms of the algorithm definition.
        For simplicity sake, the authentication code will normally be defined as being appended to the cipher text stream.
        The encryption functions are:
      </t>
      <figure><artwork><![CDATA[
ciphertext = Encrypt(message content, key, additional data)

valid, message content = Decrypt(cipher text, key, additional data)
]]></artwork></figure>

      <t>
        Most AEAD algorithms are logically defined as returning the message content only if the decryption is valid.
        Many but not all implementations will follow this convention.
        The message content MUST NOT be used if the decryption does not validate.
      </t>

      <t>
        These algorithms are used in COSE_Encrypt and COSE_Encrypt1.
      </t>
      
      <section title="AES GCM">
        <t>
          The GCM mode is a generic authenticated encryption block cipher mode defined in <xref target="AES-GCM"/>.
          The GCM mode is combined with the AES block encryption algorithm to define an AEAD cipher.
        </t>

        <t>
          The GCM mode is parameterized by the size of the authentication tag and the size of the nonce.
          This document fixes the size of the nonce at 96 bits.
          The size of the authentication tag is limited to a small set of values.
          For this document however, the size of the authentication tag is fixed at 128 bits.
        </t>

        <t>
          The set of algorithms defined in this document are in <xref target="table-AES-GCM"/>.
        </t>
        
        <texttable title="Algorithm Value for AES-GCM" anchor="table-AES-GCM">
          <ttcol align='left'>name</ttcol>
          <ttcol align='left'>value</ttcol>
          <ttcol align='left'>description</ttcol>
          <c>A128GCM</c>        <c>1</c>        <c>AES-GCM mode w/ 128-bit key, 128-bit tag</c>
          <c>A192GCM</c>        <c>2</c>        <c>AES-GCM mode w/ 192-bit key, 128-bit tag</c>
          <c>A256GCM</c>        <c>3</c>        <c>AES-GCM mode w/ 256-bit key, 128-bit tag</c>
        </texttable>

        <t>
          Keys may be obtained either from a key structure or from a recipient structure.
          Implementations encrypting and decrypting MUST validate that the key type, key length and algorithm are correct and appropriate for the entities involved.
        </t>

        <t>
          When using a COSE key for this algorithm, the following checks are made:
          <list style="symbols">
            <t>The 'kty' field MUST be present and it MUST be 'Symmetric'.</t>
            <t>If the 'alg' field present, it MUST match the AES-GCM algorithm being used.</t>
            <t>If the 'key_ops' field is present, it MUST include 'encrypt' or 'key wrap' when encrypting.</t>
            <t>If the 'key_ops' field is present, it MUST include 'decrypt' or 'key unwrap'  when decrypting.</t>
          </list>
        </t>
        

        <section title="Security Considerations">
          <t>
            When using AES-GCM, the following restrictions MUST be enforced:
            <list style="symbols">
              <t>
                The key and nonce pair MUST be unique for every message encrypted.
              </t>
              <t>
                The total amount of data encrypted for a single key MUST NOT exceed 2^39 - 256 bits.
                An explicit check is required only in environments where it is expected that it might be exceeded.
              </t>
            </list>
          </t>

          <t>
            Consideration was given to supporting smaller tag values, the constrained community would desire tag sizes in the 64-bit range.
            <!-- Appendix C in NIST SP 800-38D -->
            Doing so drastically changes both the maximum messages size (generally not an issue) and the number of times that a key can be used.
            Given that CCM is the usual mode for constrained environments restricted modes are not supported.
          </t>

        </section>
      </section>
      
      <section title="AES CCM">
        <t>
          Counter with CBC-MAC (CCM) is a generic authentication encryption block cipher mode defined in <xref target="RFC3610"/>.
          The CCM mode is combined with the AES block encryption algorithm to define a commonly used content encryption algorithm used in constrained devices.
        </t>

        <t>
          The CCM mode has two parameter choices.
          The first choice is M, the size of the authentication field.
          The choice of the value for M involves a trade-off between message growth (from the tag) and the probably that an attacker can undetectably modify a message.
          
          The second choice is L, the size of the length field.
          This value requires a trade-off between the maximum message size and the size of the Nonce.
        </t>

        <t>
          It is unfortunate that the specification for CCM specified L and M as a count of bytes rather than a count of bits.
          This leads to possible misunderstandings where AES-CCM-8 is frequently used to refer to a version of CCM mode where the size of the authentication is 64 bits and not 8 bits.
          These values have traditionally been specified as bit counts rather than byte counts.
          This document will follow the convention of using bit counts so that it is easier to compare the different algorithms presented in this document.
        </t>

        <t>
          We define a matrix of algorithms in this document over the values of L and M.
          Constrained devices are usually operating in situations where they use short messages and want to avoid doing recipient specific cryptographic operations.
          This favors smaller values of both L and M.
          Less constrained devices will want to be able to user larger messages and are more willing to generate new keys for every operation.
          This favors larger values of L and M.
        </t>

        <t>
          The following values are used for L:
          <list style="hanging">
            <t hangText="16 bits (2)">
              limits messages to 2^16 bytes (64 KiB) in length.
              This is sufficiently long for messages in the constrained world.
              The nonce length is 13 bytes allowing for 2^(13*8) possible values of the nonce without repeating.
            </t>
            <t hangText="64 bits (8)"> 
              limits messages to 2^64 bytes in length.
              The nonce length is 7 bytes allowing for 2^56 possible values of the nonce without repeating.
            </t>
          </list>
        </t>

        <t>
          The following values are used for M:
          <list style="hanging">
            <t hangText="64 bits (8)">
              produces a 64-bit authentication tag.
              This implies that there is a 1 in 2^64 chance that a modified message will authenticate.
            </t>
            <t hangText="128 bits (16)">
              produces a 128-bit authentication tag.
              This implies that there is a 1 in 2^128 chance that a modified message will authenticate.
            </t>
          </list>
        </t>
        
        <texttable anchor="table-AES-CCM" title="Algorithm Values for AES-CCM">
          <ttcol align='left'>name</ttcol>
          <ttcol align='left'>value</ttcol>
          <ttcol align='left'>L</ttcol>
          <ttcol align='left'>M</ttcol>
          <ttcol align='left'>k</ttcol>
          <ttcol align='left'>description</ttcol>
          <c>AES-CCM-16-64-128</c>        <c>10</c>    <c>16</c>       <c>64</c>       <c>128</c>      <c>AES-CCM mode 128-bit key, 64-bit tag, 13-byte nonce</c>
          <c>AES-CCM-16-64-256</c>        <c>11</c>    <c>16</c>       <c>64</c>       <c>256</c>      <c>AES-CCM mode 256-bit key, 64-bit tag, 13-byte nonce</c>
          <c>AES-CCM-64-64-128</c>        <c>12</c>    <c>64</c>       <c>64</c>       <c>128</c>      <c>AES-CCM mode 128-bit key, 64-bit tag, 7-byte nonce</c>
          <c>AES-CCM-64-64-256</c>        <c>13</c>    <c>64</c>       <c>64</c>       <c>256</c>      <c>AES-CCM mode 256-bit key, 64-bit tag, 7-byte nonce</c>
          <c>AES-CCM-16-128-128</c>       <c>30</c>    <c>16</c>       <c>128</c>      <c>128</c>      <c>AES-CCM mode 128-bit key, 128-bit tag, 13-byte nonce</c>
          <c>AES-CCM-16-128-256</c>       <c>31</c>    <c>16</c>       <c>128</c>      <c>256</c>      <c>AES-CCM mode 256-bit key, 128-bit tag, 13-byte nonce</c>
          <c>AES-CCM-64-128-128</c>       <c>32</c>    <c>64</c>       <c>128</c>      <c>128</c>      <c>AES-CCM mode 128-bit key, 128-bit tag, 7-byte nonce</c>
          <c>AES-CCM-64-128-256</c>       <c>33</c>    <c>64</c>       <c>128</c>      <c>256</c>      <c>AES-CCM mode 256-bit key, 128-bit tag, 7-byte nonce</c>
        </texttable>

        <t>
          Keys may be obtained either from a key structure or from a recipient structure.
          Implementations encrypting and decrypting MUST validate that the key type, key length and algorithm are correct and appropriate for the entities involved.
        </t>

        <t>
          When using a COSE key for this algorithm, the following checks are made:
          <list style="symbols">
            <t>The 'kty' field MUST be present and it MUST be 'Symmetric'.</t>
            <t>If the 'alg' field present, it MUST match the AES-CCM algorithm being used.</t>
            <t>If the 'key_ops' field is present, it MUST include 'encrypt' or 'key wrap' when encrypting.</t>
            <t>If the 'key_ops' field is present, it MUST include 'decrypt' or 'key unwrap'  when decrypting.</t>
          </list>
        </t>

        <section title="Security Considerations">
          <t>
            When using AES-CCM, the following restrictions MUST be enforced:
            <list style="symbols">
              <t>
                The key and nonce pair MUST be unique for every message encrypted.
              </t>
              <t>
                The total number of times the AES block cipher is used MUST NOT exceed 2^61 operations.
                This limitation is the sum of times the block cipher is used in computing the MAC value and in performing stream encryption operations.
                An explicit check is required only in environments where it is expected that it might be exceeded.
              </t>
            </list>
          </t>

          <t>
            <xref target="RFC3610"/> additionally calls out one other consideration of note.
            It is possible to do a pre-computation attack against the algorithm in cases where the portions encryption content is highly predictable.
            This reduces the security of the key size by half.
            Ways to deal with this attack include adding a random portion to the nonce value and/or increasing the key size used.
            Using a portion of the nonce for a random value will decrease the number of messages that a single key can be used for.
            Increasing the key size may require more resources in the constrained device.
            See sections 5 and 10 of <xref target="RFC3610"/> for more information.
          </t>
          
        </section>
      </section>

      <section title="ChaCha20 and Poly1305">
        <t>
          ChaCha20 and Poly1305 combined together is an AEAD mode that is defined in <xref target="RFC7539"/>.
          This is an algorithm defined to be a cipher that is not AES and thus would not suffer from any future weaknesses found in AES.
          These cryptographic functions are designed to be fast in software-only implementations.
        </t>

        <t>
          The ChaCha20/Poly1305 AEAD construction defined in <xref target="RFC7539"/> has no parameterization.
          It takes a 256-bit key and a 96-bit nonce as well as the plain text and additional data as inputs and produces the cipher text as an option.
          We define one algorithm identifier for this algorithm in <xref target="Table-CHACHA"/>.
        </t>

        <texttable title="Algorithm Value for AES-GCM" anchor="Table-CHACHA">
          <ttcol align='left'>name</ttcol>
          <ttcol align='left'>value</ttcol>
          <ttcol align='left'>description</ttcol>
          <c>ChaCha20/Poly1305</c>        <c>24</c>        <c>ChaCha20/Poly1305 w/ 256-bit key, 128-bit tag</c>
        </texttable>
        
        <t>
          Keys may be obtained either from a key structure or from a recipient structure.
          Implementations encrypting and decrypting MUST validate that the key type, key length and algorithm are correct and appropriate for the entities involved.
        </t>

        <t>
          When using a COSE key for this algorithm, the following checks are made:
          <list style="symbols">
            <t>The 'kty' field MUST be present and it MUST be 'Symmetric'.</t>
            <t>If the 'alg' field present, it MUST match the ChaCha algorithm being used.</t>
            <t>If the 'key_ops' field is present, it MUST include 'encrypt' or 'key wrap' when encrypting.</t>
            <t>If the 'key_ops' field is present, it MUST include 'decrypt' or 'key unwrap'  when decrypting.</t>
          </list>
        </t>

        <section title="Security Considerations">
          <t>
            The pair of key, nonce MUST be unique for every invocation of the algorithm.
            Nonce counters are considered to be an acceptable way of ensuring that they are unique.
          </t>
        </section>
      </section>
    </section>

    <section title="Key Derivation Functions (KDF)">
      <t>
        Key Derivation Functions (KDFs) are used to take some secret value and generate a different one.
        The secret value comes in three flavors:
        <list style="symbols">
          <t>Secrets that are uniformly random:  This is the type of secret which is created by a good random number generator.</t>
          <t>Secrets that are not uniformly random: This is type of secret which is created by operations like key agreement.</t>
          <t>Secrets that are not random: This is the type of secret that people generate for things like passwords.</t>
        </list>
      </t>

      <t>
        General KDF functions work well with the first type of secret, can do reasonable well with the second type of secret and generally do poorly with the last type of secret.
        None of the KDF functions in this section are designed to deal with the type of secrets that are used for passwords.
        Functions like PBSE2 <xref target="RFC2898"/> need to be used for that type of secret.
      </t>

      <t>
        The same KDF function can be setup to deal with the first two types of secrets in a different way.
        The KDF function defined in <xref target="HKDF"/> is such a function.
        This is reflected in the set of algorithms defined for HKDF.
      </t>

      <t>
        When using KDF functions, one component that is included is context information.
        Context information is used to allow for different keying information to be derived from the same secret.
        The use of context based keying material is considered to be a good security practice.
      </t>

      <t>
        This document defines a single context structure and a single KDF function.
        These elements are used for all of the recipient algorithms defined in this document that require a KDF process.
        These algorithms are defined in <xref target="direct-kdf"/>, <xref target="ECDH"/>, and <xref target="ECDH-wrap"/>.
      </t>
      
      <section title="HMAC-based Extract-and-Expand Key Derivation Function (HKDF)" anchor="HKDF">
        <t> 
          The HKDF key derivation algorithm is defined in <xref target="RFC5869"/>.
        </t>

        <t>
          The HKDF algorithm takes these inputs:

          <list style="empty">
            <t>
              secret - a shared value that is secret.
              Secrets may be either previously shared or derived from operations like a DH key agreement.
            </t>

            <t>
              salt - an optional value that is used to change the generation process.
              The salt value can be either public or private.
              If the salt is public and carried in the message, then the 'salt' algorithm header parameter defined in <xref target="HKDF_Alg_Params"/> is used.
              While <xref target="RFC5869"/> suggests that the length of the salt be the same as the length of the underlying hash value, any amount of salt will improve the security as different key values will be generated.
              This parameter is protected by being included in the key computation and does not need to be separately authenticated.
              The salt value does not need to be unique for every message sent.
            </t>

            <t>
              length - the number of bytes of output that need to be generated.
            </t>
            
            <t>
              context information - Information that describes the context in which the resulting value will be used.
              Making this information specific to the context in which the material is going to be used ensures that the resulting material will always be tied to that usage.
              The context structure defined in <xref target="context"/> is used by the KDF functions in this document.
            </t>

            <t>
              PRF - The underlying pseudo-random function to be used in the HKDF algorithm.
              The PRF is encoded into the HKDF algorithm selection.
            </t>

          </list>
        </t>

        <t>
          HKDF is defined to use HMAC as the underlying PRF.
          However, it is possible to use other functions in the same construct to provide a different KDF function that is more appropriate in the constrained world.
          Specifically, one can use AES-CBC-MAC as the PRF for the expand step, but not for the extract step.
          When using a good random shared secret of the correct length, the extract step can be skipped.
          For the AES algorithm versions, the extract step is always skipped.
        </t>
        
        <t>
          The extract step cannot be skipped if the secret is not uniformly random, for example if it is the result of an ECDH key agreement step.
          (This implies that the AES HKDF version cannot be used with ECDH.)
          If the extract step is skipped, the 'salt' value is not used as part of the HKDF functionality.
        </t>

        <t>
          The algorithms defined in this document are found in <xref target="table-hkdf"/>.
        </t>

        <texttable title="HKDF algorithms" anchor="table-hkdf">
          <ttcol>name</ttcol>
          <ttcol>PRF</ttcol>
          <ttcol>description</ttcol>
          <c>HKDF SHA-256</c>       <c>HMAC with SHA-256</c>             <c>HKDF using HMAC SHA-256 as the PRF</c>
          <c>HKDF SHA-512</c>       <c>HMAC with SHA-512</c>             <c>HKDF using HMAC SHA-512 as the PRF</c>
          <c>HKDF AES-MAC-128</c>   <c>AES-CBC-MAC-128</c>        <c>HKDF using AES-MAC as the PRF w/ 128-bit key</c>
          <c>HKDF AES-MAC-256</c>   <c>AES-CBC-MAC-256</c>        <c>HKDF using AES-MAC as the PRF w/ 256-bit key</c>
        </texttable>

        <texttable title="HKDF Algorithm Parameters" anchor="HKDF_Alg_Params">
          <ttcol>name</ttcol>
          <ttcol>label</ttcol>
          <ttcol>type</ttcol>
          <ttcol>description</ttcol>
          <c>salt</c>   <c>-20</c>      <c>bstr</c>     <c>Random salt</c>
        </texttable>

      </section>

      <section title="Context Information Structure" anchor="context">
        <t>
          The context information structure is used to ensure that the derived keying material is "bound" to the context of the transaction.
          The context information structure used here is based on that defined in <xref target="SP800-56A"/>.
          By using CBOR for the encoding of the context information structure, we automatically get the same type and length separation of fields that is obtained by the use of ASN.1.
          This means that there is no need to encode the lengths for the base elements as it is done by the encoding used in JOSE (Section 4.6.2 of <xref target="RFC7518"/>).
          <!--
          <cref source="Ilari">
            Look to see if we need to be clearer about how the fields defined in the table are transported and thus why they have labels.
            </cref>
            -->
        </t>

        <t>
          The context information structure refers to PartyU and PartyV as the two parties which are doing the key derivation.
          Unless the application protocol defines differently, we assign PartyU to the entity that is creating the message and PartyV to the entity that is receiving the message.
          By doing this association, different keys will be derived for each direction as the context information is different in each direction.
        </t>

        <!--
        <t>
          Application protocols are free to define the roles differently.
          For example, they could assign the PartyU role to the entity that initiates the connection and allow directly sending multiple messages over the connection in both directions without changing the role information.
          It is still recommended that different keys be derived in each direction to avoid reflection problems.
        </t>

            <t>
            The use of a transaction identifier, either in one of the supplemental fields or as the salt if one is using HKDF, ensures that a unique key is generated for each set of transactions.
            Combining nonce fields with the transaction identifier provides a method so that a different key is used for each message in each direction.
            </t>
          -->

        <t>
          The context structure is built from information that is known to both entities.
          This information can be obtained from a variety of sources:
          <list style="symbols">
            <t>
              Fields can be defined by the application.
              This is commonly used to assign fixed names to parties, but can be used for other items such as nonces.
            </t>
            <t>
              Fields can be defined by usage of the output.
              Examples of this are the algorithm and key size that are being generated.
            </t>
            <t>
              Fields can be defined by parameters from the message.
              We define a set of parameters in <xref target="KDF_Context_Alg_Params"/> which can be used to carry the values associated with the context structure.
              Examples of this are identities and nonce values.
              These parameters are designed to be placed in the unprotected bucket of the recipient structure.
              (They do not need to be in the protected bucket since they already are included in the cryptographic computation by virtue of being included in the context structure.)
            </t>
          </list>
        </t>

        <texttable title="Context Algorithm Parameters" anchor="KDF_Context_Alg_Params">
          <ttcol>name</ttcol>
          <ttcol>label</ttcol>
          <ttcol>type</ttcol>
          <ttcol>description</ttcol>
          <c>PartyU identity</c>   <c>-21</c>      <c>bstr</c>          <c>Party U identity Information</c>
          <c>PartyU nonce</c>      <c>-22</c>      <c>bstr / int</c>    <c>Party U provided nonce</c>
          <c>PartyU other</c>      <c>-23</c>      <c>bstr</c>          <c>Party U other provided information</c>
          <c>PartyV identity</c>   <c>-24</c>      <c>bstr</c>          <c>Party V identity Information</c>
          <c>PartyV nonce</c>      <c>-25</c>      <c>bstr / int</c>    <c>Party V provided nonce</c>
          <c>PartyV other</c>      <c>-26</c>      <c>bstr</c>          <c>Party V other provided information</c>
        </texttable>


        <t>
          We define a CBOR object to hold the context information.
          This object is referred to as CBOR_KDF_Context.
          The object is based on a CBOR array type.
          
          The fields in the array are:

          <list style="hanging">
            <t hangText="AlgorithmID">
              This field indicates the algorithm for which the key material will be used.
              This field is required to be present.
              The field exists in the context information so that if the same environment is used for different algorithms, then completely different keys will be generated for each of those algorithms.
              (This practice means if algorithm A is broken and thus is easier to find, the key derived for algorithm B will not be the same as the key derived for algorithm A.)
            </t>

            <t hangText="PartyUInfo">
              This field holds information about party U.
              The PartyUInfo is encoded as a CBOR array.
              The elements of PartyUInfo are encoded in the order presented, however if the element does not exist no element is placed in the array.
              The elements of the PartyUInfo array are:
              
              <list style="hanging">
                <t hangText="identity">
                  This contains the identity information for party U.
                  The identities can be assigned in one of two manners.
                  Firstly, a protocol can assign identities based on roles.
                  For example, the roles of "client" and "server" may be assigned to different entities in the protocol.
                  Each entity would then use the correct label for the data they send or receive.
                  The second way for a protocol to assign identities is to use a name based on a naming system (i.e. DNS, X.509 names).
                  <vspace/>
                  We define an algorithm parameter 'PartyU identity' that can be used to carry identity information in the message.
                  However, identity information is often known as part of the protocol and can thus be inferred rather than made explicit.
                  If identity information is carried in the message, applications SHOULD have a way of validating the supplied identity information.
                  The identity information does not need to be specified and can be left as absent.
                </t>

                <t hangText="nonce">
                  This contains a nonce value.
                  The nonce can either be implicit from the protocol or carried as a value in the unprotected headers.
                  <vspace/>
                  We define an algorithm parameter 'PartyU nonce' that can be used to carry this value in the message
                  However, the nonce value could be determined by the application and the value determined from elsewhere.
                  <vspace/>
                  This item is optional and can be absent.
                </t>

                <t hangText="other">
                  This contains other information that is defined by the protocol.
                  <vspace/>
                  This item is optional and can be absent.
                </t>
              </list>
            </t>

            <t hangText="PartyVInfo">
              This field holds information about party V.
              The PartyVInfo is encoded as a CBOR array.
              For store and forward environments, the party V information may be minimal or even absent.
              The elements of PartyVInfo are encoded in the order presented, however if the element does not exist no element is placed in the array.
              The elements of the PartyVInfo array are:
              
              <list style="hanging">
                <t hangText="identity">See description of PartyUInfo identity.</t>

                <t hangText="nonce">See description of PartyUInfo nonce.</t>

                <t hangText="other">See description of PartyUInfo other.</t>
              </list>
            </t>

            <t hangText="SuppPubInfo">
              This field contains public information that is mutually known to both parties.
              
              <list style="hanging">
                <t hangText="keyDataLength">
                  This is set to the number of bits of the desired output value.
                  (This practice means if algorithm A can use two different key lengths, the key derived for longer key size will not contain the key for shorter key size as a prefix.)
                </t>

                <t hangText="protected">
                  This field contains the protected parameter field.
                  If there are no elements in the protected field, then use a zero length bstr.
                </t>

                <t hangText="other">
                  The field other is for free form data defined by the application.
                  An example is that an application could defined two different strings to be placed here to generate different keys for a data stream vs a control stream.
                  This field is optional and will only be present if the application defines a structure for this information.
                  Applications that define this SHOULD use CBOR to encode the data so that types and lengths are correctly include.
                </t>
              </list>
            </t>

            <t hangText="SuppPrivInfo">
              This field contains private information that is mutually known private information.
              An example of this information would be a pre-existing shared secret.
              (This could for example, be used in combination with an ECDH key agreement to provide a secondary proof of identity.)
              The field is optional and will only be present if the application defines a structure for this information.
              Applications that define this SHOULD use CBOR to encode the data so that types and lengths are correctly included.
            </t>
          </list>
        </t>

      <t>
        The following CDDL fragment corresponds to the text above.
      </t>

      <figure><artwork type='CDDL'><![CDATA[
PartyInfo = (
    ? nonce : bstr / int,
    ? identity : bstr,
    ? other : bstr,
)

COSE_KDF_Context = [
    AlgorithmID : int / tstr,
    PartyUInfo : [ PartyInfo ],
    PartyVInfo : [ PartyInfo ],
    SuppPubInfo : [
        keyDataLength : uint,
        protected : empty_or_serialized_map,
        ? other : bstr
    ],
    ? SuppPrivInfo : bstr
]
]]></artwork></figure>


      </section>


    </section>

    <section title="Recipient Algorithm Classes" anchor="key-management-algs">
      <t>
        Recipient algorithms can be defined into a number of different classes.
        COSE has the ability to support many classes of recipient algorithms.
        In this section, a number of classes are listed and then a set of algorithms are specified for each of the classes.
        The names of the recipient algorithm classes used here are the same as are defined in <xref target="RFC7516"/>.
        Other specifications use different terms for the recipient algorithm classes or do not support some of the recipient algorithm classes.
      </t>
      

      <section title="Direct Encryption">
          <t>
            The direct encryption class algorithms share a secret between the sender and the recipient that is used either directly or after manipulation as the CEK.
            When direct encryption mode is used, it MUST be the only mode used on the message.
          </t>

          <t>
            The COSE_Encrypt structure for the recipient is organized as follows:
          </t>

          <t>
            <list style="symbols">
              <t>
                The 'protected' field MUST be a zero length item unless it is used in the computation of the content key.
              </t>
              
              <t>
                The 'alg' parameter MUST be present.
              </t>

              <t>
                A parameter identifying the shared secret SHOULD be present.
              </t>

              <t>
                The 'ciphertext' field MUST be a zero length item.
              </t>
              
              <t>
                The 'recipients' field MUST be absent.
              </t>
              
            </list>
          </t>

          <section title="Direct Key">
            <t>
              This recipient algorithm is the simplest, the identified key is directly used as the key for the next layer down in the message.
              There are no algorithm parameters defined for this algorithm.
              The algorithm identifier value is assigned  in <xref target="table-direct"/>.
            </t>

            <t>
              When this algorithm is used, the protected field MUST be zero length.
              The key type MUST be 'Symmetric'.
            </t>

            <texttable title="Direct Key" anchor="table-direct">
              <ttcol align='left'>name</ttcol>
              <ttcol align='left'>value</ttcol>
              <ttcol align='left'>description</ttcol>
              <c>direct</c>          <c>-6</c>       <c>Direct use of CEK</c>
            </texttable>

            <section title="Security Considerations">
              <t>
                This recipient algorithm has several potential problems that need to be considered:
                <list style="symbols">
                  <t>
                    These keys need to have some method to be regularly updated over time.
                    All of the content encryption algorithms specified in this document have limits on how many times a key can be used without significant loss of security.
                  </t>
                  <t>
                    These keys need to be dedicated to a single algorithm.
                    There have been a number of attacks developed over time when a single key is used for multiple different algorithms.
                    One example of this is the use of a single key both for CBC encryption mode and CBC-MAC authentication mode.
                  </t>
                  <t>
                    Breaking one message means all messages are broken.
                    If an adversary succeeds in determining the key for a single message, then the key for all messages is also determined.
                  </t>
                </list>
              </t>
            </section>
          </section>

          <section title="Direct Key with KDF" anchor="direct-kdf">
            <t>
              These recipient algorithms take a common shared secret between the two parties and applies the HKDF function (<xref target="HKDF"/>) using the context structure defined in <xref target="context"/> to transform the shared secret into the CEK.
              The 'protected' field can be of non-zero length.
              Either the 'salt' parameter of HKDF or the partyU 'nonce' parameter of the context structure MUST be present.
              The salt/nonce parameter can be generated either randomly or deterministically.
	      The requirement is that it be a unique value for the shared secret in question.
            </t>

            <t>
              If the salt/nonce value is generated randomly, then it is suggested that the length of the random value be the same length as the hash function underlying HKDF.
              While there is no way to guarantee that it will be unique, there is a high probability that it will be unique.
              If the salt/nonce value is generated deterministically, it can be guaranteed to be unique and thus there is no length requirement.
            </t>

            <t>
              A new IV must be used for each message if the same key is used.
              The IV can be modified in a predictable manner, a random manner or an unpredictable manner (i.e. encrypting a counter).
            </t>

            <t>
              The IV used for a key can also be generated from the same HKDF functionality as the key is generated.
              If HKDF is used for generating the IV, the algorithm identifier is set to "IV-GENERATION".
            </t>

            <t>
              When these algorithms are used, the key type MUST be 'symmetric'.
            </t>
            
            <t>
              The set of algorithms defined in this document can be found in <xref target="table-direct-kdf"/>.
            </t>

            <texttable title="Direct Key" anchor="table-direct-kdf">
              <ttcol align='left'>name</ttcol>
              <ttcol align='left'>value</ttcol>
              <ttcol align='left'>KDF</ttcol>
              <ttcol align='left'>description</ttcol>
              <c>direct+HKDF-SHA-256</c>      <c>-10</c>        <c>HKDF SHA-256</c>     <c>Shared secret w/ HKDF and SHA-256</c>
              <c>direct+HKDF-SHA-512</c>      <c>-11</c>        <c>HKDF SHA-512</c>     <c>Shared secret w/ HKDF and SHA-512</c>
              <c>direct+HKDF-AES-128</c>      <c>-12</c>        <c>HKDF AES-MAC-128</c> <c>Shared secret w/ AES-MAC 128-bit key</c>
              <c>direct+HKDF-AES-256</c>      <c>-13</c>        <c>HKDF AES-MAC-256</c> <c>Shared secret w/ AES-MAC 256-bit key</c>
            </texttable>

            <t>
              When using a COSE key for this algorithm, the following checks are made:
              <list style="symbols">
                <t>The 'kty' field MUST be present and it MUST be 'Symmetric'.</t>
                <t>If the 'alg' field present, it MUST match the algorithm being used.</t>
                <t>If the 'key_ops' field is present, it MUST include 'deriveKey or 'deriveBits'.</t>
              </list>
            </t>
            
            <section title="Security Considerations">
              <t>
                The shared secret needs to have some method to be regularly updated over time.
                The shared secret forms the basis of trust.
		Although not used directly, it should still be subject to scheduled rotation.
              </t>

              <t>
                While these methods do not provide for PFS, as the same shared secret is used for all of the keys generated, if the key for any single message is discovered only the message (or series of messages) using that derived key are compromised.
                A new key derivation step will generate a new key which requires the same amount of work to get the key.
              </t>
            </section>
          </section>
      </section>

      <section title="Key Wrapping">
        <t>
          In key wrapping mode, the CEK is randomly generated and that key is then encrypted by a shared secret between the sender and the recipient.
          All of the currently defined key wrapping algorithms for COSE are AE algorithms.
          Key wrapping mode is considered to be superior to direct encryption if the system has any capability for doing random key generation.
          This is because the shared key is used to wrap random data rather than data that has some degree of organization and may in fact be repeating the same content.
          The use of Key Wrapping loses the weak data origination that is provided by the direct encryption algorithms.
        </t>

        <t>
          The COSE_Encrypt structure for the recipient is organized as follows:
        </t>

        <t>
          <list style="symbols">
            <t>
              The 'protected' field MUST be absent if the key wrap algorithm is an AE algorithm.
            </t>
            <t>
              The 'recipients' field is normally absent, but can be used.
              Applications MUST deal with a recipient field present, not being able to decrypt that recipient is an acceptable way of dealing with it.
              Failing to process the message is not an acceptable way of dealing with it.
            </t>
            <t>
              The plain text to be encrypted is the key from next layer down
              (usually the content layer).
            </t>
            <t>
              At a minimum, the 'unprotected' field MUST contain the 'alg'
              parameter and SHOULD contain a parameter identifying the shared secret.
            </t>
          </list>
        </t>

        <section title="AES Key Wrapping" anchor="key_wrap_algs">
          <t>
            The AES Key Wrapping algorithm is defined in <xref target="RFC3394"/>.
            This algorithm uses an AES key to wrap a value that is a multiple of 64 bits.
	    As such, it can be used to wrap a key for any of the content encryption algorithms defined in this document.
            <!--  Don't care about this anymore
            <cref source="JLS">
              Do we also want to document the use of RFC 5649 as well?  
              It allows for other sizes of keys that might be used for HMAC - i.e. a 200 bit key.
              The algorithm exists, but I do not personally know of any standard uses of it.
              </cref>
              -->
            The algorithm requires a single fixed parameter, the initial value.
            This is fixed to the value specified in Section 2.2.3.1 of  <xref target="RFC3394"/>.
            There are no public parameters that vary on a per invocation basis.
            The protected header field MUST be empty.
          </t>

          <t>
            Keys may be obtained either from a key structure or from a recipient structure.
            Implementations encrypting and decrypting MUST validate that the key type, key length and algorithm are correct and appropriate for the entities involved.
          </t>
          
        <t>
          When using a COSE key for this algorithm, the following checks are made:
          <list style="symbols">
            <t>The 'kty' field MUST be present and it MUST be 'Symmetric'.</t>
            <t>If the 'alg' is field present, it MUST match the AES Key Wrap algorithm being used.</t>
            <t>If the 'key_ops' field is present, it MUST include 'encrypt' or 'key wrap' when encrypting.</t>
            <t>If the 'key_ops' field is present, it MUST include 'decrypt' or 'key unwrap'  when decrypting.</t>
          </list>
        </t>
          
          <texttable title="AES Key Wrap Algorithm Values" anchor="table_aes_keywrap">
            <ttcol align='left'>name</ttcol>
            <ttcol align='left'>value</ttcol>
            <ttcol align='left'>key size</ttcol>
            <ttcol align='left'>description</ttcol>
            <c>A128KW</c>       <c>-3</c>       <c>128</c>      <c>AES Key Wrap w/ 128-bit key</c>
            <c>A192KW</c>       <c>-4</c>       <c>192</c>      <c>AES Key Wrap w/ 192-bit key</c>
            <c>A256KW</c>       <c>-5</c>       <c>256</c>      <c>AES Key Wrap w/ 256-bit key</c>
          </texttable>

          <section title="Security Considerations for AES-KW">
              <t>
                The shared secret needs to have some method to be regularly updated over time.
                The shared secret is the basis of trust.
                
              </t>
          </section>
        </section>
      </section>

      <section title="Key Encryption">
        <t>
          Key Encryption mode is also called key transport mode in some standards.
          Key Encryption mode differs from Key Wrap mode in that it uses an asymmetric encryption algorithm rather than a symmetric encryption algorithm to protect the key.
          This document does not define any Key Encryption mode algorithms.
        </t>

        <t>
          When using a key encryption algorithm, the COSE_Encrypt structure for the recipient is organized as follows:
          <list style="symbols">
            <t>
              The 'protected' field MUST be absent.
            </t>
            
            <t>
              The plain text to be encrypted is the key from next layer down
              (usually the content layer).
            </t>
            
            <t>
              At a minimum, the 'unprotected' field MUST contain the 'alg'
              parameter and SHOULD contain a parameter identifying the asymmetric key.
            </t>
            
          </list>
        </t>
      </section>

      <section title="Direct Key Agreement">
        <t>
          The 'direct key agreement' class of recipient algorithms uses a key agreement method to create a shared secret.
          A KDF is then applied to the shared secret to derive a key to be used in protecting the data.
          This key is normally used as a CEK or MAC key, but could be used for other purposes if more than two layers are in use (see <xref target="three-layer"/>).
        </t>

        <t>
          The most commonly used key agreement algorithm is Diffie-Hellman, but other variants exist.
          Since COSE is designed for a store and forward environment rather than an on-line environment, many of the DH variants cannot be used as the receiver of the message cannot provide any dynamic key material.
          One side-effect of this is that perfect forward secrecy (see <xref target="RFC4949"/>) is not achievable.
	  A static key will always be used for the receiver of the COSE message.
        </t>

        <t>
          Two variants of DH that are supported are:
          <list>
            <t>
              Ephemeral-Static DH: where the sender of the message creates a one time DH key and uses a static key for the recipient.
              The use of the ephemeral sender key means that no additional random input is needed as this is randomly generated for each message.
            </t>

            <t>
              Static-Static DH: where a static key is used for both the sender and the recipient.
              The use of static keys allows for recipient to get a weak version of data origination for the message.
              When static-static key agreement is used, then some piece of unique data for the KDF is required to ensure that a different key is created for each message.
            </t>
          </list>          
        </t>

        <t>
          When direct key agreement mode is used, there MUST be only one recipient in the message.
          This method creates the key directly and that makes it difficult to mix with additional recipients.
          If multiple recipients are needed, then the version with key wrap needs to be used.
        </t>

        <t>
          The COSE_Encrypt structure for the recipient is organized as follows:
        </t>

        <t>
          <list style="symbols">
            <t>
              At a minimum, headers  MUST contain the 'alg' parameter and SHOULD contain a parameter identifying the recipient's asymmetric key.
            </t>
            <t>
              The headers SHOULD identify the sender's key for the static-static versions and MUST contain the sender's ephemeral key for the ephemeral-static versions.
            </t>
          </list>
        </t>

        <section title="ECDH" anchor="ECDH">
          <t>
            The mathematics for Elliptic Curve Diffie-Hellman can be found in <xref target="RFC6090"/>.
            In this document the algorithm is extended to be used with the two curves defined in <xref target="RFC7748"/>.
          </t>

          <t>
            ECDH is parameterized by the following:
            <list style="symbols">
              <t>
                Curve Type/Curve: 
                The curve selected controls not only the size of the shared secret, but the mathematics for computing the shared secret.
                The curve selected also controls how a point in the curve is represented and what happens for the identity points on the curve.
                In this specification, we allow for a number of different curves to be used.
                A set of curves are defined in <xref target="table-ec-curves"/>.
                <vspace/>
                The math used to obtain the computed secret is based on the curve selected and not on the ECDH algorithm.
                For this reason, a new algorithm does not need to be defined for each of the curves.
              </t>

              <t>
                Computed Secret to Shared Secret:
                Once the computed secret is known, the resulting value needs to be converted to a byte string to run the KDF function.
                The X coordinate is used for all of the curves defined in this document.
                For curves X25519 and X448, the resulting value is used directly as it is a byte string of a known length.
                For the P-256, P-384 and P-521 curves, the X coordinate is run through the I2OSP function defined in <xref target="RFC3447"/> using the same computation for n as is defined in <xref target="ECDSA"/>.
              </t>
              
              <t>
                Ephemeral-static or static-static:
                The key agreement process may be done using either a static or an ephemeral key for the sender's side.
                When using ephemeral keys, the sender MUST generate a new ephemeral key for every key agreement operation.
                The ephemeral key is placed in the 'ephemeral key' parameter and MUST be present for all algorithm identifiers that use ephemeral keys.
                When using static keys, the sender MUST either generate a new random value or otherwise create a unique value.
                For the KDF functions used, this means either in the 'salt' parameter for HKDF (<xref target="HKDF_Alg_Params"/>) or in the 'PartyU nonce' parameter for the context structure (<xref target="KDF_Context_Alg_Params"/>) MUST be present.
                (Both may be present if desired.)
                The value in the parameter MUST be unique for the pair of keys being used.
                It is acceptable to use a global counter that is incremented for every static-static operation and use the resulting value.
                When using static keys, the static key should be identified to the recipient.
                The static key can be identified either by providing the key ('static key') or by providing a key identifier for the static key ('static key id').
                Both of these parameters are defined in <xref target="table-ecdh-es-parameter-table"/>.
              </t>
              
              <t>
                Key derivation algorithm:
                The result of an ECDH key agreement process does not provide a uniformly random secret.
		As such, it needs to be run through a KDF in order to produce a usable key.
                Processing the secret through a KDF also allows for the introduction of context material: how the key is going to be used, and one time material for static-static key agreement.
                All of the algorithms defined in this document use one of the HKDF algorithms defined in <xref target="HKDF"/> with the context structure defined in <xref target="context"/>.
              </t>

              <t>
                Key Wrap algorithm:
                No key wrap algorithm is used.
                This is represented in <xref target="table-ecdh-es-table"/> as 'none'.
                The key size for the context structure is the content layer encryption algorithm size.
              </t>
            </list>
          </t>

          <t>
            The set of direct ECDH algorithms defined in this document are found in <xref target="table-ecdh-es-table"/>.
          </t>

          <texttable title="ECDH Algorithm Values" anchor="table-ecdh-es-table">
            <ttcol align='left' width='9em'>name</ttcol>
            <ttcol align='left' width='5em'>value</ttcol>
            <ttcol align='left' width='7em'>KDF</ttcol>
            <ttcol align='left' width='10em'>Ephemeral- Static</ttcol>
            <ttcol align='left' width='6em'>Key Wrap</ttcol>
            <ttcol align='left' width='11em'>description</ttcol>
            
            <c>ECDH-ES + HKDF-256</c>      <c>-25</c>        <c>HKDF - SHA-256</c>     <c>yes</c>      <c>none</c>       <c>ECDH ES w/ HKDF - generate key directly</c>
            <c>ECDH-ES + HKDF-512</c>      <c>-26</c>        <c>HKDF - SHA-512</c>     <c>yes</c>      <c>none</c>       <c>ECDH ES w/ HKDF - generate key directly</c>
            <c>ECDH-SS + HKDF-256</c>      <c>-27</c>        <c>HKDF - SHA-256</c>     <c>no</c>       <c>none</c>       <c>ECDH SS w/ HKDF - generate key directly</c>
            <c>ECDH-SS + HKDF-512</c>      <c>-28</c>        <c>HKDF - SHA-512</c>     <c>no</c>       <c>none</c>       <c>ECDH SS w/ HKDF - generate key directly</c>

          </texttable>


          <texttable title="ECDH Algorithm Parameters" anchor="table-ecdh-es-parameter-table">
            <ttcol>name</ttcol>
            <ttcol>label</ttcol>
            <ttcol>type</ttcol>
            <ttcol>algorithm</ttcol>
            <ttcol>description</ttcol>
            <c>ephemeral key</c>        <c>-1</c>       <c>COSE_Key</c>         <c>ECDH-ES</c>  <c>Ephemeral Public key for the sender</c>
            <c>static key</c>           <c>-2</c>       <c>COSE_Key</c>         <c>ECDH-ES</c>  <c>Static Public key for the sender</c>
            <c>static key id </c>       <c>-3</c>       <c>bstr</c>             <c>ECDH-SS</c>  <c>Static Public key identifier for the sender</c>
          </texttable>

          <t>
            This document defines these algorithms to be used with the curves P-256, P-384, P-521, X25519, and X448.
            Implementations MUST verify that the key type and curve are correct.
	    Different curves are restricted to different key types.
            Implementations MUST verify that the curve and algorithm are appropriate for the entities involved.
          </t>

          <t>
            When using a COSE key for this algorithm, the following checks are made:
            <list style="symbols">
              <t>The 'kty' field MUST be present and it MUST be 'EC2' or 'OKP'.</t>
              <t>If the 'alg' field present, it MUST match the Key Agreement algorithm being used.</t>
              <t>If the 'key_ops' field is present, it MUST include 'derive key' or 'derive bits' for the private key.</t>
              <t>If the 'key_ops' field is present, it MUST be empty for the public key.</t>
            </list>
          </t>

        </section>

        <section title="Security Considerations">
          <t>
            Some method of checking that points provided from external entities are valid.
            For the 'EC2' key format, this can be done by checking that the x and y values form a point on the curve.
            For the 'OKP' format, there is no simple way to do point validation.
          </t>

          <t>
            Consideration was given to requiring that the public keys of both entities be provided as part of the key derivation process.
            (As recommended in section 6.1 of <xref target="RFC7748"/>.)
            This was not done as COSE is used in a store and forward format rather than in on line key exchange.
            In order for this to be a problem, either the receiver public key has to be chosen maliciously or the sender has to be malicious.
            In either case, all security evaporates anyway.
          </t>

          <t>
            A proof of possession of the private key associated with the public key is recommended when a key is moved from untrusted to trusted.
            (Either by the end user or by the entity that is responsible for making trust statements on keys.)
          </t>
        </section>
      </section>

      <section title="Key Agreement with KDF" anchor="ECDH-Direct">
        <t>
          Key Agreement with Key Wrapping uses a randomly generated CEK.
          The CEK is then encrypted using a Key Wrapping algorithm and a key derived from the shared secret computed by the key agreement algorithm.
        </t>



        <t>
          The COSE_Encrypt structure for the recipient is organized as follows:
        </t>

        <t>
          <list style="symbols">
            <t>
              The 'protected' field is fed into the KDF context structure.
            </t>
            <t>
              The plain text to be encrypted is the key from next layer down (usually the content layer).
            </t>
            <t>
              The 'alg' parameter MUST be present in the layer.
            </t>
            <t>
              A parameter identifying the recipient's key SHOULD be present.
              A parameter identifying the sender's key SHOULD be present.
            </t>
          </list>
        </t>

        <section title="ECDH" anchor="ECDH-wrap">

          <t>
            These algorithms are defined in <xref target="table-ecdh-es-table-wrap"/>.
          </t>
        

        <t>
          ECDH with Key Agreement is parameterized by the same parameters as for ECDH <xref target="ECDH"/> with the following modifications:
          <list style="symbols">
            <t>
              Key Wrap Algorithm: Any of the key wrap algorithms defined in <xref target="key_wrap_algs"/> are supported.
              The size of the key used for the key wrap algorithm is fed into the KDF function.
              The set of identifiers are found in <xref target="table-ecdh-es-table-wrap"/>.
            </t>
          </list>
        </t>
          <texttable title="ECDH Algorithm Values" anchor="table-ecdh-es-table-wrap">
            <ttcol align='left' width='9em'>name</ttcol>
            <ttcol align='left' width='5em'>value</ttcol>
            <ttcol align='left' width='7em'>KDF</ttcol>
            <ttcol align='left' width='10em'>Ephemeral- Static</ttcol>
            <ttcol align='left' width='6em'>Key Wrap</ttcol>
            <ttcol align='left' width='11em'>description</ttcol>
            <c>ECDH-ES + A128KW</c>          <c>-29</c>        <c>HKDF - SHA-256</c>     <c>yes</c>      <c>A128KW</c>     <c>ECDH ES w/ Concat KDF and AES Key wrap w/ 128 bit key</c>
            <c>ECDH-ES + A192KW</c>          <c>-30</c>        <c>HKDF - SHA-256</c>     <c>yes</c>      <c>A192KW</c>     <c>ECDH ES w/ Concat KDF and AES Key wrap w/ 192 bit key</c>
            <c>ECDH-ES + A256KW</c>          <c>-31</c>        <c>HKDF - SHA-256</c>     <c>yes</c>      <c>A256KW</c>     <c>ECDH ES w/ Concat KDF and AES Key wrap w/ 256 bit key</c>
            <c>ECDH-SS + A128KW</c>          <c>-32</c>        <c>HKDF - SHA-256</c>     <c>no</c>       <c>A128KW</c>     <c>ECDH SS w/ Concat KDF and AES Key wrap w/ 128 bit key</c>
            <c>ECDH-SS + A192KW</c>          <c>-33</c>        <c>HKDF - SHA-256</c>     <c>no</c>       <c>A192KW</c>     <c>ECDH SS w/ Concat KDF and AES Key wrap w/ 192 bit key</c>
            <c>ECDH-SS + A256KW</c>          <c>-34</c>        <c>HKDF - SHA-256</c>     <c>no</c>       <c>A256KW</c>     <c>ECDH SS w/ Concat KDF and AES Key wrap w/ 256 bit key</c>
          </texttable>


        <t>
            When using a COSE key for this algorithm, the following checks are made:
            <list style="symbols">
              <t>The 'kty' field MUST be present and it MUST be 'EC2' or 'OKP'.</t>
              <t>If the 'alg' field present, it MUST match the Key Agreement algorithm being used.</t>
              <t>If the 'key_ops' field is present, it MUST include 'derive key' or 'derive bits' for the private key.</t>
              <t>If the 'key_ops' field is present, it MUST be empty for the public key.</t>
            </list>
          </t>
        </section>
      </section>

      <!--  Comment out password based algorithms.   Issue #6 - https://github.com/cose-wg/cose-issues/issues/6
           
      <section title="Password">
        <t>
          <cref source="JLS">
            Do we want/need to support this?
            JOSE did it mainly to support the encryption of private keys.
          </cref>
        </t>
        
        <section title="PBES2">
          <texttable>
            <ttcol align='left'>name</ttcol>
            <ttcol align='left'>value</ttcol>
            <ttcol align='left'>description</ttcol>
            <c>PBES2-HS256+A128KW</c>        <c>*</c>        <c>PBES2 w/ HMAC SHA-256 and AES Key wrap w/ 128 bit key</c>
            <c>PBES2-HS384+A192KW</c>        <c>*</c>        <c>PBES2 w/ HMAC SHA-384 and AES Key wrap w/ 192 bit key</c>
            <c>PBES2-HS512+A256KW</c>        <c>*</c>        <c>PBES2 w/ HMAC SHA-512 and AES Key wrap w/ 256 bit key</c>
          </texttable>
        </section>
        </section>
        -->
    </section>

    <section title="Keys" anchor="Key-specific-labels">
      <t>
        The COSE_Key object defines a way to hold a single key object.
	It is still required that the members of individual key types be defined.
        This section of the document is where we define an initial set of members for specific key types.
      </t>

      <t>
        For each of the key types, we define both public and private members.
        The public members are what is transmitted to others for their usage.
        Private members allow for the archival of keys by individuals.
        However, there are some circumstances in which private keys may be distributed to entities in a protocol.
        Examples include:  entities that have poor random number generation,
        centralized key creation for multi-cast type operations,
        and protocols in which a shared secret is used as a bearer token for authorization purposes.
      </t>

      <t>
        Key types are identified by the 'kty' member of the COSE_Key object.
        In this document, we define four values for the member:
      </t>

      <texttable title="Key Type Values" anchor="table_key_types">
        <ttcol>name</ttcol>
        <ttcol>value</ttcol>
        <ttcol>description</ttcol>
        <c>OKP</c>      <c>1</c>        <c>Octet Key Pair</c>
        <c>EC2</c>      <c>2</c>        <c>Elliptic Curve Keys w/ X,Y Coordinate pair</c>
        <c>Symmetric</c><c>4</c>        <c>Symmetric Keys</c>
        <c>Reserved</c> <c>0</c>        <c>This value is reserved</c>
      </texttable>
      
      <section title="Elliptic Curve Keys">
        <t>
          Two different key structures could be defined for Elliptic Curve keys.
          One version uses both an x and a y coordinate, potentially with point compression ('EC2').
          This is the traditional EC point representation that is used in <xref target="RFC5480"/>.
          
          The other version uses only the x coordinate as the y coordinate is either to be recomputed or not needed for the key agreement operation ('OKP').
        </t>

        <t>
          Applications MUST check that the curve and the key type are consistent and reject a key if they are not.
        </t>
        
        <texttable title="EC Curves" anchor="table-ec-curves">
          <ttcol>name</ttcol>
          <ttcol>key type</ttcol>
          <ttcol>value</ttcol>
          <ttcol>description</ttcol>
          <c>P-256</c>        <c>EC2</c>      <c>1</c>       <c>NIST P-256 also known as secp256r1</c>
          <c>P-384</c>        <c>EC2</c>      <c>2</c>       <c>NIST P-384 also known as secp384r1</c>
          <c>P-521</c>        <c>EC2</c>      <c>3</c>       <c>NIST P-521 also known as secp521r1</c>
          <c>X25519</c>       <c>OKP</c>      <c>4</c>       <c>X25519 for use w/ ECDH only</c>
          <c>X448</c>         <c>OKP</c>      <c>5</c>       <c>X448 for use w/ ECDH only</c>
          <c>Ed25519</c>      <c>OKP</c>      <c>6</c>       <c>Ed25519 for use w/ EdDSA only</c>
          <c>Ed448</c>        <c>OKP</c>      <c>7</c>       <c>Ed448 for use w/ EdDSA only</c>
        </texttable>

        <section title="Double Coordinate Curves" anchor="EC2-Keys">
          <t>
            The traditional way of sending EC curves has been to send either both the x and y coordinates, or the x coordinate and a sign bit for the y coordinate.
            The latter encoding has not been recommended in the IETF due to potential IPR issues.
            However, for operations in constrained environments, the ability to shrink a message by not sending the y coordinate is potentially useful.
          </t>
          
          <t>
            For EC keys with both coordinates, the 'kty' member is set to 2 (EC2).
            The key parameters defined in this section are summarized in <xref target="table-ec2-keys"/>.
            The members that are defined for this key type are:
            
            <list style="hanging">
              <t hangText="crv">
                contains an identifier of the curve to be used with the key.
                The curves defined in this document for this key type can be found in <xref target="table-ec-curves"/>.
                Other curves may be registered in the future and private curves can be used as well.
              </t>
              
              <t hangText="x">
                contains the x coordinate for the EC point.
                The integer is converted to an octet string as defined in <xref target="SEC1"/>.
                Leading zero octets MUST be preserved.

                <!--
                <cref source="JLS">
                  Should we use the bignum encoding for x, y and d instead of bstr?
                  </cref>
                  No because some implementations will remove the leading zeros and we don't want that.
                -->
              </t>
              
              <t hangText="y">
                contains either the sign bit or the value of y coordinate for the EC point.
                When encoding the value y, the integer is converted to an octet string (as defined in <xref target="SEC1"/>) and encoded as a CBOR bstr.
                Leading zero octets MUST be preserved.
                The compressed point encoding is also supported.
                Compute the sign bit as laid out in the Elliptic-Curve-Point-to-Octet-String Conversion function of <xref target="SEC1"/>.
                If the sign bit is zero, then encode y as a CBOR false value, otherwise encode y as a CBOR true value.
                The encoding of the infinity point is not supported.
              </t>
              
              <t hangText="d">
                contains the private key.
              </t>
              
            </list>
          </t>

          <t>
            For public keys, it is REQUIRED that 'crv', 'x' and 'y' be present in the structure.
            For private keys, it is REQUIRED that 'crv' and 'd' be present in the structure.
            For private keys, it is RECOMMENDED that 'x' and 'y' also be present, but they can be recomputed from the required elements and omitting them saves on space.
          </t>

          <texttable title="EC Key Parameters" anchor="table-ec2-keys">
            <ttcol>name</ttcol>
            <ttcol>key type</ttcol>
            <ttcol>value</ttcol>
            <ttcol>type</ttcol>
            <ttcol>description</ttcol>
            <c>crv</c>    <c>2</c>      <c>-1</c>       <c>int / tstr</c>       <c>EC Curve identifier - Taken from the COSE Curve Registry</c>
            <c>x</c>      <c>2</c>      <c>-2</c>       <c>bstr</c>             <c>X Coordinate</c>
            <c>y</c>      <c>2</c>      <c>-3</c>       <c>bstr / bool</c>      <c>Y Coordinate</c>
            <c>d</c>      <c>2</c>      <c>-4</c>       <c>bstr</c>             <c>Private key</c>
          </texttable>
        </section>
      </section>

      <section title="Octet Key Pair">
        <t>
          A new key type is defined for Octet Key Pairs (OKP).
          Do not assume that keys using this type are elliptic curves.
          This key type could be used for other curve types (for example mathematics based on hyper-elliptic surfaces).
        </t>
        
        <t>
          The key parameters defined in this section are summarized in <xref target="table-ec1-keys"/>.
          The members that are defined for this key type are:
            
          <list style="hanging">
            <t hangText="crv">
              contains an identifier of the curve to be used with the key.
              <!-- 
              <cref source="JLS">
                Is is the same registry for both OKP and EC2?
                </cref>
                YES
                -->
              The curves defined in this document for this key type can be found in <xref target="table-ec-curves"/>.
              Other curves may be registered in the future and private curves can be used as well.
            </t>
            
            <t hangText="x">
              contains the x coordinate for the EC point.
              The octet string represents a little-endian encoding of x.
            </t>
            
            <t hangText="d">
              contains the private key.
            </t>
            
          </list>
        </t>

        <t>
          For public keys, it is REQUIRED that 'crv' and  'x' be present in the structure.
          For private keys, it is REQUIRED that 'crv' and 'd' be present in the structure.
          For private keys, it is RECOMMENDED that 'x' also be present, but it can be recomputed from the required elements and omitting it saves on space.
        </t>
          
        <texttable title="EC Key Parameters" anchor="table-ec1-keys">
          <ttcol>name</ttcol>
          <ttcol>key type</ttcol>
          <ttcol>value</ttcol>
          <ttcol>type</ttcol>
          <ttcol>description</ttcol>
          <c>crv</c>    <c>1</c>      <c>-1</c>       <c>int / tstr</c>       <c>EC Curve identifier - Taken from the COSE General Registry</c>
          <c>x</c>      <c>1</c>      <c>-2</c>       <c>bstr</c>             <c>X Coordinate</c>
          <c>d</c>      <c>1</c>      <c>-4</c>       <c>bstr</c>             <c>Private key</c>
        </texttable>


      </section>

      <section title="Symmetric Keys">
        <t>
          Occasionally it is required that a symmetric key be transported between entities.
          This key structure allows for that to happen.
        </t>

        <t>
          For symmetric keys, the 'kty' member is set to 3 (Symmetric).
          The member that is defined for this key type is:
          <list style="hanging">
            <t hangText="k">
              contains the value of the key.
            </t>
          </list>
        </t>

        <t>
          This key structure does not have a form which contains only public members.
          As it is expected that this key structure is going to be transmitted, care must be taking that it is never transmitted accidentally or insecurely.
          For symmetric keys, it is REQUIRED that 'k' be present in the structure.
        </t>
        
        <texttable title="Symmetric Key Parameters" anchor="table-symmetric-keys">
          <ttcol>name</ttcol>
          <ttcol>key type</ttcol>
          <ttcol>value</ttcol>
          <ttcol>type</ttcol>
          <ttcol>description</ttcol>
          <c>k</c>      <c>4</c>        <c>-1</c>       <c>bstr</c>             <c>Key Value</c>
        </texttable>
      </section>
    </section>
    
    <section anchor="CBOR-Canonical" title="CBOR Encoder Restrictions">

      <t>
        There has been an attempt to limit the number of places where the document 
        needs to impose restrictions on how the CBOR Encoder needs to work.  We have
        managed to narrow it down to the following restrictions:
      </t>

      <t>
        <list style="symbols">
          <t>
            The restriction applies to the encoding the Sig_structure, the Enc_structure, and the MAC_structure.
          </t>
          <t>
            The rules for Canonical CBOR (Section 3.9 of RFC 7049) MUST be used in these
            locations.  The main rule that needs to be enforced is that all lengths
            in these structures MUST be encoded such that they are encoded using definite lengths 
            and the minimum length encoding is used.
          </t>
          <t>
            Applications MUST NOT generate messages with the same label used twice as a key in a single map.
            Applications MUST NOT parse and process messages with the same label used twice as a key in a single map.
            Applications can enforce the parse and process requirement by using parsers that will fail the parse step or by using parsers that will pass all keys to the application and the application can perform the check for duplicate keys.
          </t>
        </list>
      </t>

    </section>

    <section title="Application Profiling Considerations">
      <t>
        This document is designed to provide a set of security services, but not to provide implementation requirements for specific usage.
        The interoperability requirements are provided for how each of the individual services are used and how the algorithms are to be used for interoperability.
        The requirements about which algorithms and which services are needed is deferred to each application.
      </t>

      <t>
        Applications are therefore intended to profile the usage of this document.
        This section provides a set of guidelines and topics that applications need to consider when using this document.

        <list style="symbols">
          <t>
            Applications need to determine the set of messages defined in this document that they will be using.
            The set of messages corresponds fairly directly to the set of security services that are needed and to the security levels needed.
          </t>

          <t>
            Applications may define new header parameters for a specific purpose.
            Applications will often times select specific header parameters to use or not to use.
            For example, an application would normally state a preference for using either the IV or the partial IV parameter.
            If the partial IV parameter is specified, then the application would also need to define how the fixed portion of the IV would be determined.
          </t>

          <t>
            When applications use externally defined authenticated data, they need to define how that data is encoded.
            This document assumes that the data will be provided as a byte stream.
            More information can be found in <xref target="Extern_AAD"/>.
          </t>
            
          <t>
            Applications need to determine the set of security algorithms that are to be used.
            When selecting the algorithms to be used as the mandatory to implement set, consideration should be given to choosing different types of algorithms when two are chosen for a specific purpose.
            An example of this would be choosing HMAC-SHA512 and AES-CMAC as different MAC algorithms; the construction is vastly different between these two algorithms.
            This means that a weakening of one algorithm would be unlikely to lead to a weakening of the other algorithms.
            Of course, these algorithms do not provide the same level of security and thus may not be comparable for the desired security functionality.
          </t>

          <t>
            Applications may need to provide some type of negotiation or discovery method if multiple algorithms or message structures are permitted.
            The method can be as simple as requiring preconfiguration of the set of algorithms to providing a discovery method built into the protocol.
            S/MIME provided a number of different ways to approach the problem that applications could follow:
            <list style="symbols">
              <t>Advertising in the message (S/MIME capabilities) <xref target="RFC5751"/>.</t>
              <t>Advertising in the certificate (capabilities extension) <xref target="RFC4262"/>.</t>
              <t>Minimum requirements for the S/MIME, which have been updated over time <xref target="RFC2633"/><xref target="RFC5751"/>.</t>
            </list>
          </t>
        </list>
      </t>
    </section>

    <section anchor="iana-considerations" title="IANA Considerations">

      <section anchor="cbor-tag-assignment" title="CBOR Tag assignment">

        <t>
          It is requested that IANA assign the following tags from the "Concise Binary Object Representation (CBOR) Tags" registry.
          It is requested that the tags for COSE_Sign1, COSE_Encrypt1 and COSE_Mac0 be assigned in the 1 to 23 value range (i.e. one byte long when encoded).
          It is requested that the rest of the tags be assigned in the 24 to 255 value range (i.e. two bytes long when encoded).
        </t>

        <t>
          The tags to be assigned are in <xref target="CBOR-Tags"/>.
        </t>

      </section>

      <!--
      <section anchor="IANA-Top-Level-Keys" title="COSE Object Labels Registry">

        <t>
          It is requested that IANA create a new registry entitled "COSE Object Labels Registry".
          <cref source="JLS">Finish the registration process.</cref>
        </t>

        <t>
          This table is initially populated by the table in <xref target="Top-Level-Keys"/>.
        </t>

        </section>
      -->
      
      <section anchor="cose-header-key-table" title="COSE Header Parameter Registry">

        <t>
          It is requested that IANA create a new registry entitled "COSE Header Parameters".
          The registry is to be created as Expert Review Required.
          Expert review guidelines are provided in <xref target="review"/>.
        </t>

        <t>
          The columns of the registry are:

          <list style="hanging">
            
            <t hangText='name'>
              The name is present to make it easier to refer to and discuss the registration entry. 
              The value is not used in the protocol. 
              Names are to be unique in the table.
            </t>
            
            <t hangText='label'>
              This is the value used for the label.
              The label can be either an integer or a string.
              Registration in the table is based on the value of the label requested.
              <!-- these are 1 and 2 byte items -->
              Integer values between 1 and 255 and strings of length 1 are designated as Standards Track Document required.

              <!-- These are 3 byte items -->
              Integer values from 256 to 65535 and strings of length 2 are designated as Specification Required.

              <!-- These are >= 5 byte items -->
              Integer values of greater than 65535 and strings of length greater than 2 are designated as expert review.

              <!-- These are 1, 2 and 3 byte items -->
              Integer values in the range -1 to -65536 are delegated to the "COSE Header Algorithm Label" registry.

              <!-- These are >= 5 byte items -->
              Integer values less than -65536 are marked as private use.
            </t>

            <t hangText='value'>
              This contains the CBOR type for the value portion of the label.
            </t>

            <t hangText='value registry'>
              This contains a pointer to the registry used to contain values where the set is limited.
            </t>

            <t hangText='description'>
              This contains a brief description of the header field.
            </t>

            <t hangText='specification'>
              This contains a pointer to the specification defining the header field (where public).
            </t>
          </list>
        </t>

        <t>
          The initial contents of the registry can be found in <xref target="Header-Table"/>.
          The specification column for all rows in that table should be this document.
        </t>

        <t>
          Additionally, the label of 0 is to be marked as 'Reserved'.
        </t>

      </section>

      
      <section anchor="IANA-Alg-Registry" title="COSE Header Algorithm Label Table">

        <t>
          It is requested that IANA create a new registry entitled "COSE Header Algorithm Labels".
          The registry is to be created as Expert Review Required.
          Expert review guidelines are provided in <xref target="review"/>.
        </t>

        <t>
          The columns of the registry are:
          <list style="hanging">
            <t hangText='name'>
              The name is present to make it easier to refer to and discuss the registration entry.  The value is not used in the protocol.
            </t>
            
            <t hangText='algorithm'>
              The algorithm(s) that this registry entry is used for.
              This value is taken from the "COSE Algorithm Value" registry.
              Multiple algorithms can be specified in this entry.
              For the table, the algorithm, label pair MUST be unique.
            </t>
            
            <t hangText='label'>
              This is the value used for the label.
              The label is an integer in the range of -1 to -65536.
            </t>
            
            <t hangText='value'>
              This contains the CBOR type for the value portion of the label.
            </t>
            
            <t hangText='value registry'>
              This contains a pointer to the registry used to contain values where the set is limited.
            </t>
            
            <t hangText='description'>
              This contains a brief description of the header field.
            </t>
            
            <t hangText='specification'>
              This contains a pointer to the specification defining the header field (where public).
            </t>
          </list>
        </t>

        <t>
          The initial contents of the registry can be found in <xref target="HKDF_Alg_Params"/>, <xref target="KDF_Context_Alg_Params"/>, and <xref target="table-ecdh-es-parameter-table"/>.
          The specification column for all rows in that table should be this document.
        </t>


      </section>
      <section anchor="cose-algorithm-registry" title="COSE Algorithm Registry">

        <t>
          It is requested that IANA create a new registry entitled "COSE Algorithm Registry".
          The registry is to be created as Expert Review Required.
          Expert review guidelines are provided in <xref target="review"/>.
        </t>

        <t>
          <list style="hanging">
            <t hangText='The columns of the registry are:'>
              
            </t>
            <t hangText='value'>
              The value to be used to identify this algorithm.
              Algorithm values MUST be unique.
              The value can be a positive integer, a negative integer or a string.
              Integer values between -256 and 255 and strings of length 1 are designated as Standards Track Document required.
              Integer values from -65536 to 65535 and strings of length 2 are designated as Specification Required.
              Integer values of greater than 65535 and strings of length greater than 2 are designated as expert review.
              Integer values less than -65536 are marked as private use.
            </t>
            <t hangText='description'>
              A short description of the algorithm.
            </t>
            <t hangText='specification'>
              A document where the algorithm is defined (if publicly available).
            </t>
          </list>
        </t>

        <t>
          The initial contents of the registry can be found in
          <xref target="table-AES-CCM"/>, <xref target="table-AES-GCM"/>, <xref target="Table-CHACHA"/>, <xref target="table_ecdsa"/>, <xref target="table-hmac"/>, <xref target="table-aes-mac"/>, <xref target="table-direct"/>, <xref target="table-direct-kdf"/>, <xref target="table_aes_keywrap"/>, and <xref target="table-ecdh-es-table"/>.
          The specification column for all rows in that table should be this document.
        </t>

        <t>
          NOTE: The assignment of algorithm identifiers in this document was done so that positive numbers were used for the first level objects (COSE_Sign, COSE_Sign1, COSE_Encrypt, COSE_Encrypt1, COSE_Mac and COSE_Mac0).
          Negative numbers were used for second level objects (COSE_Signature and COSE_recipient).
          Expert reviewers should consider this practice, but are not expected to be restricted by this precedent.
        </t>

      </section>
      <section anchor="cose-key-map-registry" title="COSE Key Common Parameter Registry">

        <t>
          It is requested that IANA create a new registry entitled "COSE Key Common Parameter" Registry.
          The registry is to be created as Expert Review Required.
          Expert review guidelines are provided in <xref target="review"/>.
        </t>

        <t>
          The columns of the registry are:
        </t>

        <t>
          <list style="hanging">
            <t hangText='name'>
              This is a descriptive name that enables easier reference to the item.  It is not used in the encoding.
            </t>
            <t hangText='label'>
              The value to be used to identify this algorithm.
              Key map labels MUST be unique.
              The label can be a positive integer, a negative integer or a string.
              Integer values between 0 and 255 and strings of length 1 are designated as Standards Track Document required.
              Integer values from 256 to 65535 and strings of length 2 are designated as Specification Required.
              Integer values of greater than 65535 and strings of length greater than 2 are designated as expert review.
              Integer values in the range -1 to -65536 are used for key parameters specific to a single algorithm delegated to the "COSE Key Type Parameter Label" registry.
              Integer values less than -65536 are marked as private use.
            </t>
            <t hangText='CBOR Type'>
              This field contains the CBOR type for the field.
            </t>
            <t hangText='registry'>
              This field denotes the registry that values come from, if one exists.
            </t>
            <t hangText='description'>
              This field contains a brief description for the field.
            </t>
            <t hangText='specification'>
              This contains a pointer to the public specification for the field if one exists
            </t>
          </list>
        </t>

        <t>
          This registry will be initially populated by the values in <xref target="COSE_KEY_KEYS"/>.
          The specification column for all of these entries will be this document.
        </t>

      </section>

      
      <section anchor="cose-key-parameter-registry" title="COSE Key Type Parameter Registry">

        <t>
          It is requested that IANA create a new registry "COSE Key Type Parameters".
          The registry is to be created as Expert Review Required.
          Expert review guidelines are provided in <xref target="review"/>.
        </t>

        <t>
          The columns of the table are:
        </t>

        <t>
          <list style="hanging">
            <t hangText='key type'>
              This field contains a descriptive string of a key type. 
              This should be a value that is in the COSE General Values table and is placed in the 'kty' field of a COSE Key structure.
            </t>
            <t hangText='name'>
              This is a descriptive name that enables easier reference to the item.  It is not used in the encoding.
            </t>
            <t hangText='label'>
              The label is to be unique for every value of key type. 
              The range of values is from -256 to -1.
              Labels are expected to be reused for different keys.
            </t>
            <t hangText='CBOR type'>
              This field contains the CBOR type for the field.
            </t>
            <t hangText='description'>
              This field contains a brief description for the field.
            </t>
            <t hangText='specification'>
              This contains a pointer to the public specification for the field if one exists.
            </t>
          </list>
        </t>

        <t>
          This registry will be initially populated by the values in <xref target="table-ec2-keys"/> and <xref target="table-symmetric-keys"/>.
          The specification column for all of these entries will be this document.
        </t>

      </section>

      <section anchor="cose-curve-registry" title="COSE Elliptic Curve Registry">

        <t>
          It is requested that IANA create a new registry "COSE Elliptic Curve Parameters".
          The registry is to be created as Expert Review Required.
          Expert review guidelines are provided in <xref target="review"/>.
        </t>

        <t>
          The columns of the table are:
        </t>

        <t>
          <list style="hanging">
            <t hangText='name'>
              This is a descriptive name that enables easier reference to the item.  
              It is not used in the encoding.
            </t>
            <t hangText='value'>
              This is the value used to identify the curve.
              These values MUST be unique.
              The integer values from -256 to 255 are designated as Standards Track Document Required.
              The integer values from 256 to 65535 and -65536 to -257 are designated as Specification Required.
              Integer values over 65535 are designated as expert review.
              Integer values less than -65536 are marked as private use.
            </t>
            <t hangText='key type'>
              This designates the key type(s) that can be used with this curve.
            </t>
            <t hangText='description'>
              This field contains a brief description of the curve.
            </t>
            <t hangText='specification'>
              This contains a pointer to the public specification for the curve if one exists.
            </t>
          </list>
        </t>

        <t>
          This registry will be initially populated by the values in <xref target="table_key_types"/>.
          The specification column for all of these entries will be this document.
        </t>


      </section>

      <section title="Media Type Registrations">

        <section title="COSE Security Message">

          <t>
            This section registers the "application/cose" <!-- and "application/cose+cbor" media types --> media type in the "Media Types" registry.
            These media types are used to indicate that the content is a COSE_MSG.
          </t>

          <t>
          <list style="empty">
            <t>Type name: application</t>
            <t>Subtype name: cose</t>
            <t>Required parameters: N/A</t>
            <t>Optional parameters: cose-type</t>
            <t>Encoding considerations: binary</t>
            <t>Security considerations: See the Security Considerations section of RFC TBD.</t>
            <t>Interoperability considerations: N/A</t>
            <t>Published specification: RFC TBD</t>
            <t>Applications that use this media type: To be identified</t>
            <t>Fragment identifier considerations: N/A</t>
            <t>Additional information:
            <list style="symbols">
              <t>Magic number(s): N/A</t>
              <t>File extension(s): cbor</t>
              <t>Macintosh file type code(s): N/A</t>
            </list>
            </t>
            <t>Person &amp; email address to contact for further information: iesg@ietf.org</t>
            <t>Intended usage: COMMON</t>
            <t>Restrictions on usage: N/A</t>
            <t>Author: Jim Schaad, ietf@augustcellars.com</t>
            <t>Change Controller: IESG</t>
            <t>Provisional registration?  No</t>
          </list>
          </t>
<!--
          <t>
          <list style="empty">
            <t>Type name: application</t>
            <t>Subtype name: cose+cbor</t>
            <t>Required parameters: N/A</t>
            <t>Optional parameters: N/A</t>
            <t>Encoding considerations: binary</t>
            <t>Security considerations: See the Security Considerations section of RFC TBD.</t>
            <t>Interoperability considerations: N/A</t>
            <t>Published specification: RFC TBD</t>
            <t>Applications that use this media type: To be identified</t>
            <t>Fragment identifier considerations: N/A</t>
            <t>Additional information:
            <list style="symbols">
              <t>Magic number(s): N/A</t>
              <t>File extension(s): cbor</t>
              <t>Macintosh file type code(s): N/A</t>
            </list>
            </t>
            <t>Person &amp; email address to contact for further information: iesg@ietf.org</t>
            <t>Intended usage: COMMON</t>
            <t>Restrictions on usage: N/A</t>
-            <t>Author: Jim Schaad, ietf@augustcellars.com</t>
            <t>Change Controller: IESG</t>
            <t>Provisional registration?  No</t>
          </list>
          </t>
          -->

        </section>
        
        <section title="COSE Key media type">

          <t>
            This section registers the "application/cose-key" and "application/cose-key-set" media types in the "Media Types" registry.
            These media types are used to indicate, respectively, that content is a COSE_Key or COSE_KeySet object.
          </t>

          <t>
          <list style="empty">
            <t>Type name: application</t>
            <t>Subtype name: cose-key</t>
            <t>Required parameters: N/A</t>
            <t>Optional parameters: N/A</t>
            <t>Encoding considerations: binary</t>
            <t>Security considerations: See the Security Considerations section of RFC TBD.</t>
            <t>Interoperability considerations: N/A</t>
            <t>Published specification: RFC TBD</t>
            <t>Applications that use this media type: To be identified</t>
            <t>Fragment identifier considerations: N/A</t>
            <t>Additional information:
            <list style="symbols">
              <t>Magic number(s): N/A</t>
              <t>File extension(s): cbor</t>
              <t>Macintosh file type code(s): N/A</t>
            </list>
            </t>
            <t>Person &amp; email address to contact for further information: iesg@ietf.org</t>
            <t>Intended usage: COMMON</t>
            <t>Restrictions on usage: N/A</t>
            <t>Author: Jim Schaad, ietf@augustcellars.com</t>
            <t>Change Controller: IESG</t>
            <t>Provisional registration?  No</t>
          </list>
          </t>

          <t>
          <list style="empty">
            <t>Type name: application</t>
            <t>Subtype name: cose-key-set</t>
            <t>Required parameters: N/A</t>
            <t>Optional parameters: N/A</t>
            <t>Encoding considerations: binary</t>
            <t>Security considerations: See the Security Considerations section of RFC TBD.</t>
            <t>Interoperability considerations: N/A</t>
            <t>Published specification: RFC TBD</t>
            <t>Applications that use this media type: To be identified</t>
            <t>Fragment identifier considerations: N/A</t>
            <t>Additional information:
            <list style="symbols">
              <t>Magic number(s): N/A</t>
              <t>File extension(s): cbor</t>
              <t>Macintosh file type code(s): N/A</t>
            </list>
            </t>
            <t>Person &amp; email address to contact for further information: iesg@ietf.org</t>
            <t>Intended usage: COMMON</t>
            <t>Restrictions on usage: N/A</t>
            <t>Author: Jim Schaad, ietf@augustcellars.com</t>
            <t>Change Controller: IESG</t>
            <t>Provisional registration?  No</t>
          </list>
          </t>

        </section>
      </section>
      <section title="CoAP Content Format Registrations">
        <t>
          This section registers a set of content formats for CoAP.
          ID assignment in the 24-255 range is requested.
        </t>

        <texttable anchor="CoAP_content_type">
          <ttcol align='left'>Media Type</ttcol>
          <ttcol align='left'>Encoding</ttcol>
          <ttcol align='left'>ID</ttcol>
          <ttcol align='left'>Reference</ttcol>

          <c>application/cose; cose-type="cose-sign"</c>        <c/> <c>TBD10</c>   <c>[This Document]</c>
          <c>application/cose; cose-type="cose-sign1"</c>       <c/> <c>TBD11</c>   <c>[This Document]</c>
          <c>application/cose; cose-type="cose-encrypt"</c>     <c/> <c>TBD12</c>   <c>[This Document]</c>
          <c>application/cose; cose-type="cose-encrypt1"</c>    <c/> <c>TBD13</c>   <c>[This Document]</c>
          <c>application/cose; cose-type="cose-mac"</c>         <c/> <c>TBD14</c>   <c>[This Document]</c>
          <c>application/cose; cose-type="cose-mac0"</c>        <c/> <c>TBD15</c>   <c>[This Document]</c>
          <c>application/cose-key</c> <c/> <c>TBD16</c> <c>[This Document]</c>
          <c>application/cose-key-set</c> <c/> <c>TBD17</c> <c>[This Document</c>
        </texttable>

      </section>

      <section title="Expert Review Instructions" anchor="review">
        <t>
          All of the IANA registries established in this document are defined as expert review.
          This section gives some general guidelines for what the experts should be looking for, but they are being designated as experts for a reason so they should be given substantial latitude.
        </t>

        <t>
          Expert reviewers should take into consideration the following points:

          <list style="symbols">
            <t>
              Point squatting should be discouraged.
              Reviewers are encouraged to get sufficient information for registration requests to ensure that the usage is not going to duplicate one that is already registered and that the point is likely to be used in deployments.
              The zones tagged as private use are intended for testing purposes and closed environments, code points in other ranges should not be assigned for testing.
            </t>

            <t>
              Specifications are required for the standards track range of point assignment.
              Specifications should exist for specification required ranges, but early assignment before a specification is available is considered to be permissible.
              Specifications are needed for the first-come, first-serve range if they are expected to be used outside of closed environments in an interoperable way.
              When specifications are not provided, the description provided needs to have sufficient information to identify what point is being used for.
            </t>

            <t>
              Experts should take into account the expected usage of fields when approving point assignment.
              The fact that there is a range for standards track documents does not mean that a standards track document cannot have points assigned outside of that range.
              Some of the ranges are restricted in range, items which are not expected to be common or are not expected to be used in restricted environments should be assigned to values which will encode to longer byte strings.
            </t>

            <t>
              When algorithms are registered, vanity registrations should be discouraged.
              One way to do this is to require applications to provide additional documentation on security analysis of algorithms.
              Another thing that should be considered is to request for an opinion on the algorithm from the Cryptographic Forum Research Group.
              Algorithms which do not meet the security requirements of the community and the messages structures should not be registered.
            </t>
          </list>
        </t>
          
      </section>
               
    </section>

    <section title="Implementation Status">
      <!--  RFC Editor - Please remove this section and reference RFC6982 prior to publication -->
      
      <t>
        This section records the status of known implementations of the
        protocol defined by this specification at the time of posting of
        this Internet-Draft, and is based on a proposal described in <xref target="RFC6982"/>.  The description of implementations in this section is
        intended to assist the IETF in its decision processes in
        progressing drafts to RFCs.  Please note that the listing of any
        individual implementation here does not imply endorsement by the
        IETF.  Furthermore, no effort has been spent to verify the
        information presented here that was supplied by IETF contributors.
        This is not intended as, and must not be construed to be, a
        catalog of available implementations or their features.  Readers
        are advised to note that other implementations may exist.
      </t>

      <t>
        According to <xref target="RFC6982"/>, "this will allow reviewers and working
        groups to assign due consideration to documents that have the
        benefit of running code, which may serve as evidence of valuable
        experimentation and feedback that have made the implemented
        protocols more mature.  It is up to the individual working groups
        to use this information as they see fit".
      </t>

      <section title="Author's Versions">
        <t>
          There are three different implementations that have been created by the author of the document both to create the examples that are included in the document and to validate the structures and methodology used in the design of COSE.
        </t>
        <t>
          <list style="none">
            <t>Implementation Location: https://github.com/cose-wg</t>
            <t>Primary Maintainer: Jim Schaad</t>
            <t>
              Languages:
              There are three different languages that are currently supported:  Java, C# and C.
            </t>
            <t>
              Cryptography: The Java and C# libraries use Bouncy Castle to provide the required cryptography.
              The C version uses OPENSSL Version 1.0 for the cryptography.
            </t>
            <t>
              Coverage:
              The libraries currently do not have full support for counter signatures of either variety.
              They do have support to allow for implicit algorithm support as they allow for the application to set attributes which are not to be sent in the message.
            </t>
            <t>
              Testing:
              All of the examples in the example library are generated by the C# library and then validated using the Java and C libraries.
              All three libraries have tests to allow for the creating of the same messages that are in the example library followed by validating them.
              These are not compared against the example library.
              The Java and C# libraries have unit testing included.
              Not all of the MUST statements in the document have been implemented as part of the libraries.
              One such statement is the requirement that unique labels be present.
            </t>
            <t>Licensing: Revised BSD License </t>
          </list>
        </t>
      </section>
      
      <section title="COSE Testing Library">
        <t>
          <list style="none">
            <t>Implementation Location: https://github.com/cose-wg/Examples</t>
            <t>Primary Maintainer: Jim Schaad</t>
            <t>
              Description: A set of tests for the COSE library is provided as part of the implementation effort.
              Both success and fail tests has been provided.
              All of the examples in this document are part of this example set.
            </t>
            <t>
              Coverage:  The attempt has been to have test cases for every message type and algorithm in the document.
              Current examples dealing with counter signatures, EdDSA and ECDH with Curve24459 and Goldilocks are missing.
            </t>
            <t>Licensing: Public Domain</t>
          </list>
        </t>
      </section>
    </section>
    
    <section anchor="security-considerations" title="Security Considerations">

      <t>
        There are a number of security considerations that need to be taken into account by implementers of this specification.
        The security considerations that are specific to an individual algorithm are placed next to the description of the algorithm.
        While some considerations have been highlighted here, additional considerations may be found in the documents listed in the references.
      </t>

      <t>
        Implementations need to protect the private key for any individuals.
        There are some cases in this document that need to be highlighted on this issue.
        <list style="symbols">
          <t>
            Using the same key for two different algorithms can leak information about the key.
            It is therefore recommended that keys be restricted to a single algorithm.
          </t>
          <t>
            Use of 'direct' as a recipient algorithm combined with a second recipient algorithm, either directly in a separate message, exposes the direct key to the second recipient.
          </t>
          <t>
            Several of the algorithms in this document have limits on the number of times that a key can be used without leaking information about the key.
          </t>
          <!--
          <t>
            Use of direct ECDH direct encryption is easy for people to leak information on if there are other recipients in the message.
            </t>
            -->
        </list>
      </t>

      <t>
        The use of ECDH and direct plus KDF (with no key wrap) will not directly lead to the private key being leaked, the one way function of the KDF will prevent that.
        There is however a different issue that needs to be addressed.
        Having two recipients, requires that the CEK be shared between two recipients.
        The second recipient therefore has a CEK that was derived from material that can be used for the weak proof of origin.
        The second recipient could create a message using the same CEK and send it to the first recipient, the first recipient would, for either static-static ECDH or direct plus KDF, make an assumption that the CEK could be used for proof of origin even though it is from the wrong entity.
        If the key wrap step is added, then no proof of origin is implied and this is not an issue.
      </t>

      <t>
        Although it has been mentioned before, the use of a single key for multiple algorithms has been demonstrated in some cases to leak information about a key, provide for attackers to forge integrity tags, or gain information about encrypted content.
        Binding a key to a single algorithm prevents these problems.
        Key creators and key consumers are strongly encouraged not only to create new keys for each different algorithm, but to include that selection of algorithm in any distribution of key material and strictly enforce the matching of algorithms in the key structure to algorithms in the message structure.
        In addition to checking that algorithms are correct, the key form needs to be checked as well.
        Do not use an 'EC2' key where an 'OKP' key is expected.
      </t>

      <t>
        Before using a key for transmission, or before acting on information received, a trust decision on a key needs to be made.
        Is the data or action something that the entity associated with the key has a right to see or a right to request?
        A number of factors are associated with this trust decision.
        Some of the ones that are highlighted here are:
        <list style="symbols">
          <t>What are the permissions associated with the key owner?</t>
          <t>Is the cryptographic algorithm acceptable in the current context?</t>
          <t>Have the restrictions associated with the key, such as algorithm or freshness, been checked and are correct?</t>
          <t>Is the request something that is reasonable given the current state of the application?</t>
          <t>Have any security considerations that are part of the message been enforced?  (As specified by the application or crit parameter.)</t>
        </list>
      </t>

      <t>
        One area that has been starting to get exposure is doing traffic analysis of encrypted messages based on the length of the message.
        This specification does not provide for a uniform method of providing padding as part of the message structure.
        An observer can distinguish between two different strings (for example 'YES' and 'NO') based on length for all of the content encryption algorithms that are defined in this document.
        This means that it is up to applications to document how content padding is to be done in order to prevent or discourage such analysis.
        (For example the strings could be defined as 'YES' and 'NO '.)
      </t>


    </section>



  </middle>

  <back>

    <references title='Normative References'>
      &RFC2119;
      &RFC2104;
      &RFC3394;
      &RFC3610;
      &RFC5869;
      &RFC6090;
      &RFC7049;
      &RFC7539;

      <reference anchor="AES-GCM" >
        <front>
          <title>NIST Special Publication 800-38D: Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC.</title>
          <author initials="M." surname="Dworkin">
            <organization>U.S. National Institute of Standards and Technology</organization>
          </author>
          <date year="2007" month="Nov"/>
        </front>
        <format target="https://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf" type="PDF"/>
      </reference>

      <reference anchor="DSS">
        <front>
          <title>Digital Signature Standard (DSS)</title>
          <author>
            <organization>U.S. National Institute of Standards and Technology</organization>
          </author>
          <date year="2013" month="July"/>
        </front>
        <format target="http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf" type="PDF"/>
      </reference>

      <reference anchor="MAC">
        <front>
          <title>FIPS PUB 113: Computer Data Authentication</title>
          <author initials="N" surname="NiST"/>
          <date year="1985" month="May"/>
        </front>
        <format target="http://csrc.nist.gov/publications/fips/fips113/fips113.html" type="HTML"/>
      </reference>
      
      <reference anchor="SEC1">
        <front>
          <title>SEC 1: Elliptic Curve Cryptography</title>
          <author>
            <organization>Standards for Efficient Cryptography Group</organization>
          </author>
          <date year="2009" month="May"/>
        </front>
        <format target="http://www.secg.org/sec1-v2.pdf" type="PDF"/>
      </reference>

      
    </references>

    <references title='Informative References'>
      &CDDL;
      <!-- &CBCMAC; -->
      &RFC2633;
      &RFC2898;
      &RFC3447;
      &RFC4231;
      &RFC4262;
      &RFC4493;
      &RFC5480;
      &RFC5652;
      &RFC5751;
      &RFC5752;
      &RFC5990;
      &RFC6151;
      &RFC6979;
      &RFC7159;
      &RFC7252;
      &RFC7515;
      &RFC7516;
      &RFC7517;
      &RFC7518;
      &RFC4949;
      
      &RFC7748;
      &CFRG-EDDSA;

      <reference anchor="SP800-56A">
        <front>
          <title>NIST Special Publication 800-56A: Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography</title>
          <author initials="E." surname="Barker">
            <organization>U.S. National Institute of Standards and Technology</organization>
          </author>
          <author initials="L." surname="Chen">
            <organization>U.S. National Institute of Standards and Technology</organization>
          </author>
          <author initials="A." surname="Roginsky">
            <organization>U.S. National Institute of Standards and Technology</organization>
          </author>
          <author initials="M." surname="Smid">
            <organization>Orion Security Solutions, Inc.</organization>
          </author>
          <date year="2013" month="May"/>
        </front>
        <format target="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar2.pdf" type="PDF"/>
      </reference>

      <reference anchor="PVSig">
        <front>
          <title>Formal Security Proofs for a Signature Scheme with Partial Message Recover</title>
          <author initials="D." surname="Brown">
          </author>
          <author initials="D." surname="Johnson">
          </author>
          <date year="2000" month="February"/>
        </front>
        <format target="https://www.certicom.com/images/pdfs/CerticomWP-PVSigSec_login.pdf" type="PDF"/>
      </reference>

      &RFC6982;

    </references>

    <!--
        I think this can go away because the text in the encryption section went away as well.
        
    <section anchor="AE-algo" title="AEAD and AE algorithms">

      <t>
        The set of encryption algorithms that can be used with this
        specification is restricted to authenticated encryption (AE) and
        authenticated encryption with additional data (AEAD) algorithms.
        This means that there is a strong check that the data decrypted by the
        recipient is the same as what was encrypted by the sender.
        Encryption modes such as counter have no check on this at all.
        The CBC encryption mode had a weak check that the data is correct,
        given a random key and random data, the CBC padding check will pass
        one out of 256 times.
        There have been several times that a normal encryption mode has been
        combined with an integrity check to provide a content encryption mode
        that does provide the necessary authentication.
        AES-GCM <xref target="AES-GCM"/>, AES-CCM <xref target="RFC3610"/>, AES-CBC-HMAC
        <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2"/> are  examples of these composite
        modes.
      </t>

      <t>
        PKCS v1.5 RSA key transport does not qualify as an AE algorithm.
        There are only three bytes in the encoding that can be checked as
        having decrypted correctly, the rest of the content can only be
        probabilistically checked as having decrypted correctly.
        For this reason, PKCS v1.5 RSA key transport MUST NOT be used with
        this specification.
        RSA-OAEP was designed to have the necessary checks that that content
        correctly decrypted and does qualify as an AE algorithm.
      </t>

      <t>
        When dealing with authenticated encryption algorithms, there is always some type of value that needs to be checked to see if the authentication level has passed.
        This authentication value may be:
      </t>

      <t>
        <list style="symbols">
          <t>
            A separately generated tag computed by both the encrypter and decrypter and then compared by the decryptor.
            This tag value may be either placed at the end of the cipher text (the decision we made) or kept separately (the decision made by the JOSE working group).
            This is the approach followed by AES-GCM <xref target="AES-GCM"/> and AES-CCM <xref target="RFC3610"/>.
            <! - - Mike Jones:  Last sentence is not clear.  He is reading this as referring to ? rather than just being generating a tag. - M00TODO - - >
          </t>
          <t>
            A fixed value that is part of the encoded plain text.
            This is the approach followed by the AES key wrap algorithm <xref target="RFC3394"/>.
          </t>
          <t>
            A computed value is included as part of the encoded plain text.
            The computed value is then checked by the decryptor using the same computation path.
            This is the approach followed by RSAES-OAEP <xref target="RFC3447"/>.
          </t>
        </list>
      </t>

    </section>

        -->

    
    <section title="Making Mandatory Algorithm Header Optional">
      <t>
        There has been a portion of the working group who have expressed a strong desire to relax the rule that the algorithm identifier be required to appear in each level of a COSE message.
        There are two basic reasons that have been advanced to support this position.
        First, the resulting message will be smaller if the algorithm identifier is omitted from the most common messages in a CoAP environment.
        Second, there is a potential bug that will arise if full checking is not done correctly between the different places that an algorithm identifier could be placed.
        (The message itself, an application statement, the key structure that the sender possesses and the key structure the recipient possesses.)
      </t>
      
      <t>
        This appendix lays out how such a change can be made and the details that an application needs to specify in order to use this option.
        Two different sets of details are specified:
        Those needed to omit an algorithm identifier and those needed to use a variant on the counter signature attribute which contains no attributes about itself.
      </t>
      
      <section title="Algorithm Identification">
        <t>
          In this section are laid out three sets of recommendations.
          The first set of recommendations apply to having an implicit algorithm identified for a single layer of a COSE message.
          The second set of recommendations apply to having multiple implicit algorithm identified for multiple layers of a COSE message.
          The third set of recommendations apply to having implicit algorithms for multiple COSE message constructs.
        </t>

        <t>
          RFC 2119 language is deliberately not used here, this specification can provide recommendations, but it cannot enforce them.
        </t>

        <t>
          This set of recommendations applies to the case where an application is distributing a fixed algorithm along with the key information for use in a single COSE message object.
          This normally applies to the smallest of the COSE messages, specifically COSE_Sign1, COSE_Mac0 and COSE_Encrypt1, but could apply to the other structures as well.
        </t>

        <t>
          The following items should be taken into account:
          
          <list style="symbols">
            <t>
              Applications need to list the set of COSE structures that implicit algorithms are to be used in.
              Applications need to require that the receipt of an explicit algorithm identifier in one of these structures will lead to the message being rejected.
              This requirement is stated so that there will never be a case where there is any ambiguity about the question of which algorithm should be used, the implicit or the explicit one.
              This applies even if the transported algorithm identifier is a protected attribute.
              This applies even if the transported algorithm is the same as the implicit algorithm.
            </t>
            
            <t>
              Applications need to define the set of information that is to be considered to be part of a context when omitting algorithm identifiers.
              At a minimum this would be the key identifier (if needed), the key, the algorithm and the COSE structure it can be used for.
              Applications should restrict the use of a single key to a single algorithm.
              As noted for some of the algorithms in this document, the use of the same key in different related algorithms can lead to leakage of information about the key, leakage about the data or the ability to perform forgeries.
            </t>
            
            <t>
              In many cases applications which make the algorithm identifier implicit will also want to make the context identifier implicit for the same reason.
              That is omitting the context identifier will decrease the message size (potentially significantly depending on the length of the identifier).
              Applications that do this will need to describe the circumstances where the context identifier is to be omitted and how the context identifier is to be inferred in these cases.
              (Exhaustive search over all of the keys would normally not be considered to be acceptable.)
              An example of how this can be done is to tie the context to a transaction identifier.
              Both would be sent on the original message, but only the transaction identifier would need to be sent after that point as the context is tied into the transaction identifier.
              Another way would be to associate a context with a network address.
              All messages coming from a single network address can be assumed to be associated with a specific context.
              (In this case the address would normally be distributed as part of the context.)
            </t>
            
            <t>
              Applications cannot rely on key identifiers being unique unless they take significant efforts to ensure that they are computed in such a way as to create this guarantee.
              Even when an application does this, the uniqueness might be violated if the application is run in different contexts (i.e. with a different context provider) or if the system combines the security contexts from different applications together into a single store.
            </t>
            
            <t>
              Applications should continue the practice of protecting the algorithm identifier.
              Since this is not done by placing it in the protected attributes field, applications should define an application specific external data structure which includes this value.
              This external data field can be used as such for content encryption, MAC and signature algorithms.
              It can be used in the SuppPrivInfo field for those algorithms which use a KDF function to derive a key value.
              Applications may also want to protect other information that is part of the context structure as well.
              It should be noted that those fields, such as the key or a base IV, protected by virtue of being used in the cryptographic computation and do not need to be included in the external data field.
            </t>
          </list>
        </t>

        <t>
          The second case is having multiple implicit algorithm identifiers specified for a multiple layer COSE message.
          An example of how this would work is the encryption context that an application specifies contains a content encryption algorithm, a key wrap algorithm, a key identifier, and a shared secret.
          The sender omits sending the algorithm identifier for both the content layer and the recipient layer leaving only the key identifier.
          The receiver then uses the key identifier to get the implicit algorithm identifiers.
        </t>

        <t>
          The following additional items need to be taken into consideration:
          <list style="symbols">
            <t>
              Applications that want to support this will need to define a structure that allows for, and clearly identifies, both the COSE structure to be used with a given key and the structure and algorithm to be used for the secondary layer.
              The key for the secondary layer is computed per normal from the recipient layer.
            </t>
          </list>
        </t>

        <t>
          The third case is having multiple implicit algorithm identifiers, but targeted at potentially unrelated layers or different COSE messages.
          There are a number of different scenarios where this might be applicable.
          Some of these scenarios are:
          <list style="symbols">
            <t>
              Two contexts are distributed as a pair.
              Each of the contexts is for use with a COSE_Encrypt message.
              Each context will consist of distinct secret keys and IVs and potentially even different algorithms.
              One context is for sending messages from party A to party B, the second context is for sending messages from party B to party A.
              This means that there is no chance for a reflection attack to occur as each party uses different secret keys to send its messages, a message that is reflected back to it would fail to decrypt.
            </t>
            
            <t>
              Two contexts are distributed as a pair.
              The first context is used for encryption of the message; the second context is used to place a counter signature on the message.
              The intention is that the second context can be distributed to other entities independently of the first context.
              This allows these entities to validate that the message came from an individual without being able to decrypt the message and see the content.
            </t>

            <t>
              Two contexts are distributed as a pair.
              The first context contains a key for dealing with MAC messages, the second context contains a key for dealing with encrypted messages.
              This allows for a unified distribution of keys to participants for different types of messages which have different keys, but where the keys may be used in coordinated manner.
            </t>
          </list>
        </t>

        <t>
          For these cases, the following additional items need to be considered:
          <list style="symbols">
            <t>
              Applications need to ensure that the multiple contexts stay associated.
              If one of the contexts is invalidated for any reason, all of the contexts associated with it should also be invalidated.
            </t>

          </list>
        </t>
        
      </section>
      
      <section title="Counter Signature Without Headers">
        <t>
          There is a group of people who want to have a counter signature parameter that is directly tied to the value being signed and thus the authenticated and unauthenticated buckets can be removed from the message being sent.
          The focus on this is an even smaller size, as all of the information on the process of creating the counter signature is implicit rather than being explicitly carried in the message.
          This includes not only the algorithm identifier as presented above, but also items such as the key identification is always external to the signature structure.
          This means that the entities that are doing the validation of the counter signature are required to infer which key is to be used from context rather than being explicit.
          One way of doing this would be to presume that all data coming from a specific port (or to a specific URL) is to be validated by a specific key.
          (Note that this does not require that the key identifier be part of the value signed as it does not serve a cryptographic purpose.
          If the key validates the counter signature, then it should be presumed that the entity associated with that key produced the signature.)
        </t>
        
        <t>
          When computing the signature for the bare counter signature header, the same Sig_structure defined in <xref target="Sig_structure"/>.
          The sign_protected field is omitted as there is no protected header field in in this counter signature header.
          The value of "CounterSignature0" is placed in the context field of the Sig_stucture.
        </t>

        <texttable anchor="CounterSign0">
          <ttcol>name</ttcol><ttcol>label</ttcol><ttcol>value type</ttcol><ttcol>description</ttcol>
          <c>counter signature w/o headers</c><c>9</c><c>bstr</c><c></c>
        </texttable>
      </section>
    </section>

    <section anchor="three-layer" title="Three Levels of Recipient Information">

      <t>
        All of the currently defined recipient algorithms classes only use two levels of the COSE_Encrypt structure.
        The first level is the message content and the second level is the content key encryption.
        However, if one uses a recipient algorithm such as RSA-KEM (see Appendix A of RSA-KEM <xref target="RFC5990"/>), then it makes sense to have three levels of the COSE_Encrypt structure.
      </t>

      <t>
        These levels would be:

        <list style="symbols">
          <t>
            Level 0: The content encryption level.  This level contains the payload of the message.
          </t>
          <t>
            Level 1: The encryption of the CEK by a KEK.
          </t>
          <t>
            Level 2: The encryption of a long random secret using an RSA key and a key derivation function to convert that secret into the KEK.
          </t>
        </list>
      </t>

      <t>
        This is an example of what a triple layer message would look like.
        The message has the following layers:

        <list style="symbols">
          <t>
            Level 0: Has a content encrypted with AES-GCM using a 128-bit key.
          </t>
          <t>
            Level 1: Uses the AES Key wrap algorithm with a 128-bit key.
          </t>
          <t>
            Level 2: Uses ECDH Ephemeral-Static direct to generate the level 1 key.
          </t>
        </list>

        In effect this example is a decomposed version of using the ECDH-ES+A128KW algorithm.
      </t>

      &Appendix_A;

    </section>

    <section anchor="examples" title="Examples">
      <!-- RFC Editor - Note that some of the examples will need to be re-generated after we have gotten final code point assignments from IANA -->
      
      <t>
        This appendix includes a set of examples that show the different features and message types that have been defined in this document.
        To make the examples easier to read, they are presented using the extended CBOR diagnostic notation (defined in <xref target="I-D.greevenbosch-appsawg-cbor-cddl"/>) rather than as a binary dump.
      </t>

      <t>
        A GitHub project has been created at https://github.com/cose-wg/Examples that contains not only the examples presented in this document, but a more complete set of testing examples as well.
        Each example is found in a JSON file that contains the inputs used to create the example, some of the intermediate values that can be used in debugging the example and the output of the example presented in both a hex and a CBOR diagnostic notation format.
        Some of the examples at the site are designed failure testing cases, these are clearly marked as such in the JSON file.
        If errors in the examples in this document are found, the examples on github will be updated and a note to that effect will be placed in the JSON file.
      </t>

      <t>
        As noted, the examples are presented using the CBOR's diagnostic notation.
        A Ruby based tool exists that can convert between the diagnostic notation and binary.
        This tool can be installed with the command line:
      </t>
      <figure>
        <artwork><![CDATA[gem install cbor-diag]]></artwork>
      </figure>

      <t>
        The diagnostic notation can be converted into binary files using the following command line:
      </t>
      <figure><artwork><![CDATA[diag2cbor.rb < inputfile > outputfile
]]></artwork></figure>

      <t>
        The examples can be extracted from the XML version of this document via an XPath expression as all of the artwork is tagged with the attribute type='CBORdiag'.
        (Depending on the XPath evaluator one is using, it may be necessary to deal with &amp;gt; as an entity.)
      </t>
      
<figure><artwork type='XPATH'><![CDATA[//artwork[@type='CDDL']/text()]]></artwork></figure>         

      <section title="Examples of Signed Message" anchor="SignedExamples">

        <section anchor="Appendix_B_1_1" title="Single Signature">

          <t>
            This example uses the following:

            <list style="symbols">
              <t>Signature Algorithm: ECDSA w/ SHA-256, Curve P-256-1</t>
            </list>
          </t>

          &Appendix_B_1_1;

        </section>


        <section anchor="Appendix_B_1_2" title="Multiple Signers">

          <t>
            This example uses the following:

            <list style="symbols">
              <t>Signature Algorithm: ECDSA w/ SHA-256, Curve P-256-1</t>
              <t>Signature Algorithm: ECDSA w/ SHA-512, Curve P-521</t>
            </list>
          </t>

          &Appendix_B_1_2;

        </section>

        <section anchor="Appendix_B_1_3" title="Counter Signature">

          <t>
            This example uses the following:

            <list style="symbols">
              <t>Signature Algorithm: ECDSA w/ SHA-256, Curve P-256-1</t>
              <t>The same parameters are used for both the signature and the counter signature.</t>
            </list>
          </t>

          &Appendix_B_1_3;

        </section>

        <section anchor="Appendix_B_1_4" title="Signature w/ Criticality">

          <t>
            This example uses the following:

            <list style="symbols">
              <t>Signature Algorithm: ECDSA w/ SHA-256, Curve P-256-1</t>
              <!--  Removed IETF95
                   <t>There is an operation time of 2014-02-14T12:00Z</t>
                   -->
              <t>There is a criticality marker on the "reserved" header parameter</t>
            </list>
          </t>

          &Appendix_B_1_4;

        </section>
      </section>
      
      <section title="Single Signer Examples" anchor="Sign1_Examples">
        <section title="Single ECDSA signature">
          <t>
            This example uses the following:

            <list style="symbols">
              <t>Signature Algorithm: ECDSA w/ SHA-256, Curve P-256-1</t>
            </list>
          </t>

          &Appendix_B_2_1;

        </section>
        
      </section>

      <section title="Examples of Enveloped Messages" anchor="EnvelopedExamples">
        
        <section anchor="Appendix_B_3_1" title="Direct ECDH">

          <t>
            This example uses the following:

            <list style="symbols">
              <t>CEK: AES-GCM w/ 128-bit key</t>
              <t>Recipient class: ECDH Ephemeral-Static, Curve P-256</t>
            </list>
          </t>
          
          &Appendix_B_3_1;

        </section>

        <section anchor="Appendix_B_3_2" title="Direct plus Key Derivation">
          <t>
            This example uses the following:
            <list style="symbols">
              <t>CEK: AES-CCM w/128-bit key, truncate the tag to 64 bits</t>
              <t>Recipient class: Use HKDF on a shared secret with the following implicit fields as part of the context.
              <list style="symbols">
                <t>salt: "aabbccddeeffgghh"</t>
                <t>APU identity: "lighting-client"</t>
                <t>APV identity: "lighting-server"</t>
                <t>Supplementary Public Other: "Encryption Example 02"</t>
              </list>
              </t>
            </list>
          </t>

          &Appendix_B_3_2;
          
        </section>

        <section anchor="Appendix_B_3_3" title="Counter Signature on Encrypted Content">
          <t>
            This example uses the following:

            <list style="symbols">
              <t>CEK: AES-GCM w/ 128-bit key</t>
              <t>Recipient class: ECDH Ephemeral-Static, Curve P-256</t>
            </list>
          </t>

          &Appendix_B_3_3;

        </section>

        <section anchor="Appendix_B_3_4" title="Encrypted Content with External Data">
          <t>
            This example uses the following:

            <list style="symbols">
              <t>CEK: AES-GCM w/ 128-bit key</t>
              <t>Recipient class: ECDH static-Static, Curve P-256 with AES Key Wrap</t>
            <t>Externally Supplied AAD: h'0011bbcc22dd44ee55ff660077'</t>
            </list>
          </t>

          &Appendix_B_3_4;

        </section>


      </section>

      <section title="Examples of Encrypted Messages" anchor="EncryptExamples">

        <section anchor="Appendix_B_4_1" title="Simple Encrypted Message">
          <t>
            This example uses the following:

            <list style="symbols">
              <t>CEK: AES-CCM w/ 128-bit key and a 64-bit tag</t>
            </list>
          </t>
          
          &Appendix_B_4_1;

        </section>

        <section anchor="Appendix_B_4_2" title="Encrypted Message w/ a Partial IV">
          <t>
            This example uses the following:

            <list style="symbols">
              <t>CEK: AES-CCM w/ 128-bit key and a 64-bit tag</t>
              <t>Prefix for IV is 89F52F65A1C580933B52</t>
            </list>
          </t>
          
          &Appendix_B_4_2;

        </section>
        
      </section>

      <section title="Examples of MAC messages" anchor="MacExamples">
        <!-- RFC Editor - All of the examples will need to be modified after IANA has finaized decisions -->        
        
        <section anchor="Appendix_B_5_1" title="Shared Secret Direct MAC">
          <t>
            This example uses the following:
            <list style="symbols">
              <t>MAC: AES-CMAC, 256-bit key, truncated to 64 bits</t>
              <t>Recipient class: direct shared secret</t>
            </list>
          </t>

          &Appendix_B_5_1;
        </section>
        
        <section anchor="Appendix_B_5_2" title="ECDH Direct MAC">

          <t>
            This example uses the following:
            
            <list style="symbols">
              <t>MAC: HMAC w/SHA-256, 256-bit key</t>
              <t>Recipient class: ECDH key agreement, two static keys, HKDF w/ context structure</t>
            </list>
          </t>

          &Appendix_B_5_2;

        </section>
        <section anchor="Appendix_B_5_3" title="Wrapped MAC">

          <t>
            This example uses the following:

            <list style="symbols">
              <t>MAC: AES-MAC, 128-bit key, truncated to 64 bits</t>
              <t>Recipient class: AES keywrap w/ a pre-shared 256-bit key</t>
            </list>
          </t>

          &Appendix_B_5_3;

        </section>

        <section anchor="Appendix_B_5_4" title="Multi-recipient MAC message">

          <t>
            This example uses the following:

            <list style="symbols">
              <t>MAC: HMAC w/ SHA-256, 128-bit key</t>
              <t>
                Recipient class: Uses three different methods
                <list style="numbers">
                  <t>ECDH Ephemeral-Static, Curve P-521, AES-Key Wrap w/ 128-bit key</t>
                  <t>AES-Key Wrap w/ 256-bit key</t>
                </list>
              </t>
            </list>
          </t>

          &Appendix_B_5_4;

        </section>
      </section>

      <section title="Examples of MAC0 messages" anchor="Mac0Examples">
        <section anchor="Appendix_B_6_1" title="Shared Secret Direct MAC">
          <t>
            This example uses the following:
            <list style="symbols">
              <t>MAC: AES-CMAC, 256-bit key, truncated to 64 bits</t>
              <t>Recipient class: direct shared secret</t>
            </list>
          </t>

          &Appendix_B_6_1;

          <t>
            Note that this example uses the same inputs as <xref target="Appendix_B_5_1"/>.
          </t>
        </section>
      </section>
      


      <section title="COSE Keys">
        <section title="Public Keys">
          <t>
            This is an example of a COSE Key set.
            This example includes the public keys for all of the previous examples.
          </t>

          <t>
            In order the keys are:
            <list style="symbols">
              <t>An EC key with a kid of "meriadoc.brandybuck@buckland.example"</t>
              <t>An EC key with a kid of "peregrin.took@tuckborough.example"</t>
              <t>An EC key with a kid of "bilbo.baggins@hobbiton.example"</t>
              <t>An EC key with a kid of "11"</t>
            </list>
          </t>
          
          &PubKeys;
        </section>

        <section title="Private Keys">
          <t>
            This is an example of a COSE Key set.
            This example includes the private keys for all of the previous examples.
          </t>

          <t>
            In order the keys are:
            <list style="symbols">
              <t>An EC key with a kid of "meriadoc.brandybuck@buckland.example"</t>
              <t>A shared-secret key with a kid of "our-secret"</t>
              <t>An EC key with a kid of "peregrin.took@tuckborough.example"</t>
              <t>A shared-secret key with a kid of "018c0ae5-4d9b-471b-bfd6-eef314bc7037"</t>
              <t>An EC key with a kid of "bilbo.baggins@hobbiton.example"</t>
              <t>An EC key with a kid of "11"</t>
            </list>
          </t>


          &PrivKeys;
        </section>
        </section>
    </section>

    <!--
        PBSE2 went away

    <section anchor="Header-Algorithm-Table" title="COSE Header Algorithm Label Table">

      <t> This section disappears when we make a decision on password based key management.</t>
      <texttable>
        <ttcol align='left'>name</ttcol>
        <ttcol align='left'>algorithm</ttcol>
        <ttcol align='left'>label</ttcol>
        <ttcol align='left'>CBOR type</ttcol>
        <ttcol align='left'>description</ttcol>
        <c>p2c</c>        <c>PBE</c>        <c>-1</c>        <c>int</c>        <c></c>
        <c>p2s</c>        <c>PBE</c>        <c>-2</c>        <c>bstr</c>        <c></c>
      </texttable>

    </section>
    -->
<!--
    <section title="Document Updates">
      <! - - RFC Editor - Please remove this appendix before publishing - ->
      <section title="Version -09 to -10">
        <t>
          <list style="symbols">
            <t>Add more examples</t>
            <t>Revise Design changes</t>
            <t>Add context string for recursive recipient structures</t>
            <t>Change and assign some algorithm numbers</t>
          </list>
        </t>
      </section>
      
      <section title="Version -08 to -09">
        <t>
          <list style="symbols">
            <t>Integrate CDDL syntax into the text</t>
            <t>Define Expert review guidelines</t>
            <t>Expand application profiling guidelines</t>
            <t>Expand text around Partial IV</t>
            <t>Creation time becomes Operation time</t>
            <t>Add tagging for all structures so that they cannot be moved</t>
            <t>Add optional parameter to cose media type</t>
            <t>Add single signature and mac structures</t>
          </list>
        </t>
      </section>
      <section title="Version -07 to -08">
        <t>
          <list style="symbols">
            <t>Redefine sequence number into a the Partial IV.</t>
          </list>
        </t>
      </section>
      <section title="Version -06 to -07">
        <t>
          <list style="symbols">
            <t>Editorial Changes</t>
            <t>Make new IANA registries be Expert Review</t>
          </list>
        </t>
      </section>
      <section title="Version -05 to -06">
        <t>
          <list style="symbols">
            <t>Remove new CFRG Elliptical Curve key agreement algorithms.</t>
            <t>Remove RSA algorithms</t>
            <t>Define a creation time and sequence number for discussions.</t>
            <t>Remove message type field from all structures.</t>
            <t>Define CBOR tagging for all structures with IANA registrations.</t>
          </list>
        </t>
      </section>
      <section title="Version -04 to -05">
        <t>
          <list style="symbols">
            <t>Removed the jku, x5c, x5t, x5t#S256, x5u, and jwk headers.</t>
            <t>Add enveloped data vs encrypted data structures.</t>
            <t>Add counter signature parameter.</t>
          </list>
        </t>
      </section>

      <section title="Version -03 to -04">
        <t>
          <list style="symbols">
            <t>Change top level from map to array.</t>
            <t>Eliminate the term "key management" from the document.</t>
            <t>Point to content registries for the 'content type' attribute</t>
            <t>Push protected field into the KDF functions for recipients.</t>
            <t>Remove password based recipient information.</t>
            <t>Create EC Curve Registry.</t>
          </list>
        </t>
      </section>
      
      <section title="Version -02 to -03">
        <t>
          <list style="symbols">
            <t>Make a pass over all of the algorithm text.</t>
            <t>Alter the CDDL so that Keys and KeySets are top level items and the key examples validate.</t>
            <t>Add sample key structures.</t>
            <t>Expand text on dealing with Externally Supplied Data.</t>
            <t>Update the examples to match some of the renumbering of fields.</t>
          </list>
        </t>
      </section>
      
      <section title="Version -02 to -03">
        <t>
          <list style="symbols">
            <t>Add a set of straw man proposals for algorithms.  It is possible/expected that this text will be moved to a new document.</t>
            <t>Add a set of straw man proposals for key structures.  It is possible/expected that this text will be moved to a new document.</t>
            <t>Provide guidance on use of externally supplied authenticated data.</t>
            <t>Add external authenticated data to signing structure.</t>
          </list>
        </t>
      </section>

      <section title="Version -01 to -2">
        <t>
          <list style="symbols">
            <t>Add first pass of algorithm information</t>
            <t>Add direct key derivation example.</t>
          </list>
        </t>
      </section>
      
      <section title="Version -00 to -01">
        <t>
          <list style="symbols">
            <t>Add note on where the document is being maintained and contributing notes.</t>
            <t>Put in proposal on MTI algorithms.</t>
            <t>Changed to use labels rather than keys when talking about what indexes a map.</t>
            <t>Moved nonce/IV to be a common header item.</t>
            <t>Expand section to discuss the common set of labels used in COSE_Key maps.</t>
            <t>Start marking element 0 in registries as reserved.</t>
            <t>Update examples.</t>
          </list>
        </t>
      </section>
    </section>
        -->

    <section title="Acknowledgments" numbered='no'>
      <t>
        This document is a product of the COSE working group of the IETF.
      </t>

      <t>
        The following individuals are to blame for getting me started on this project in the first place:
        Richard Barnes, Matt Miller, and Martin Thomson.
      </t>

      <t>
        The initial version of the draft was based to some degree on the outputs of the JOSE and S/MIME working groups.
      </t>

      <t>
        The following individuals provided input into the final form of the document:
        Carsten Bormann, John Bradley, Brain Campbell, Mike Jones, Ilari Liusvaara, Francesca Palombini, Goran Selander, and Ludwig Seitz.
      </t>
        
    </section>
    
  </back>
</rfc>
