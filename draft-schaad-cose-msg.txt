



COSE Working Group                                             J. Schaad
Internet-Draft                                            August Cellars
Intended status: Informational                             June 28, 2015
Expires: December 30, 2015


                      CBOR Encoded Message Syntax
                      draft-schaad-cose-msg-latest

Abstract

   Concise Binary Object Representation (CBOR) is data format designed
   for small code size and small message size.  There is a need for the
   ability to have the basic security services defined for this data
   format.  This document specifies how to do signatures, message
   authentication codes and encryption using this data format.

Contributing to this document

   The source for this draft is being maintained in GitHub.  Suggested
   changes should be submitted as pull requests at https://github.com/
   cose-wg/cose-spec.  Instructions are on that page as well.  Editorial
   changes can be managed in GitHub, but any substantial issues need to
   be discussed on the COSE mailing list.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 30, 2015.

Copyright Notice

   Copyright (c) 2015 IETF Trust and the persons identified as the
   document authors.  All rights reserved.





Schaad                  Expires December 30, 2015               [Page 1]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   4
     1.1.  Design changes from JOSE  . . . . . . . . . . . . . . . .   4
     1.2.  Requirements Terminology  . . . . . . . . . . . . . . . .   5
     1.3.  CBOR Grammar  . . . . . . . . . . . . . . . . . . . . . .   5
     1.4.  CBOR Related Terminology  . . . . . . . . . . . . . . . .   6
   2.  The COSE_MSG structure  . . . . . . . . . . . . . . . . . . .   6
   3.  Header Parameters . . . . . . . . . . . . . . . . . . . . . .   9
     3.1.  COSE Headers  . . . . . . . . . . . . . . . . . . . . . .  10
   4.  Signing Structure . . . . . . . . . . . . . . . . . . . . . .  13
   5.  Encryption object . . . . . . . . . . . . . . . . . . . . . .  16
     5.1.  Key Management Methods  . . . . . . . . . . . . . . . . .  17
     5.2.  Encryption Algorithm for AEAD algorithms  . . . . . . . .  17
     5.3.  Encryption algorithm for AE algorithms  . . . . . . . . .  18
   6.  MAC objects . . . . . . . . . . . . . . . . . . . . . . . . .  19
   7.  Key Structure . . . . . . . . . . . . . . . . . . . . . . . .  21
     7.1.  COSE Key Map Labels . . . . . . . . . . . . . . . . . . .  22
   8.  CBOR Encoder Restrictions . . . . . . . . . . . . . . . . . .  23
   9.  Signature Algorithms  . . . . . . . . . . . . . . . . . . . .  23
     9.1.  RSASSA-PSS  . . . . . . . . . . . . . . . . . . . . . . .  23
     9.2.  ECDSA . . . . . . . . . . . . . . . . . . . . . . . . . .  23
       9.2.1.  Security Considerations . . . . . . . . . . . . . . .  24
   10. Message Authentication (MAC) Algorithms . . . . . . . . . . .  25
     10.1.  Hash-based Message Authentication Codes (HMAC) . . . . .  25
       10.1.1.  Security Considerations  . . . . . . . . . . . . . .  26
     10.2.  AES Message Authentication Code (AES-MAC)  . . . . . . .  26
   11. Content Encryption Algorithms . . . . . . . . . . . . . . . .  26
     11.1.  AES GCM  . . . . . . . . . . . . . . . . . . . . . . . .  26
     11.2.  AES CCM  . . . . . . . . . . . . . . . . . . . . . . . .  26
       11.2.1.  Security Considerations  . . . . . . . . . . . . . .  29
   12. Key Derivation Functions (KDF)  . . . . . . . . . . . . . . .  29
     12.1.  HMAC-based Extract-and-Expand Key Derivation Function
            (HKDF) . . . . . . . . . . . . . . . . . . . . . . . . .  29
     12.2.  Context Information Structure  . . . . . . . . . . . . .  30
   13. Key Management Algorithms . . . . . . . . . . . . . . . . . .  33
     13.1.  Direct Encryption  . . . . . . . . . . . . . . . . . . .  34
       13.1.1.  Direct Key . . . . . . . . . . . . . . . . . . . . .  34



Schaad                  Expires December 30, 2015               [Page 2]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


     13.2.  Key Wrapping . . . . . . . . . . . . . . . . . . . . . .  35
       13.2.1.  AES Key Wrapping . . . . . . . . . . . . . . . . . .  35
     13.3.  Key Encryption . . . . . . . . . . . . . . . . . . . . .  36
       13.3.1.  RSA OAEP . . . . . . . . . . . . . . . . . . . . . .  36
     13.4.  Direct Key Agreement . . . . . . . . . . . . . . . . . .  37
       13.4.1.  ECDH Ephemeral-Static  . . . . . . . . . . . . . . .  37
     13.5.  Key Agreement with KDF . . . . . . . . . . . . . . . . .  38
       13.5.1.  ECDH ES + HKDF . . . . . . . . . . . . . . . . . . .  39
     13.6.  Password . . . . . . . . . . . . . . . . . . . . . . . .  39
       13.6.1.  PBES2  . . . . . . . . . . . . . . . . . . . . . . .  39
   14. Keys  . . . . . . . . . . . . . . . . . . . . . . . . . . . .  39
     14.1.  Elliptic Curve Keys  . . . . . . . . . . . . . . . . . .  40
       14.1.1.  Single Coordinate Curves . . . . . . . . . . . . . .  40
       14.1.2.  Double Coordinate Curves . . . . . . . . . . . . . .  41
     14.2.  RSA Keys . . . . . . . . . . . . . . . . . . . . . . . .  43
     14.3.  Symmetric Keys . . . . . . . . . . . . . . . . . . . . .  44
   15. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  44
     15.1.  CBOR Tag assignment  . . . . . . . . . . . . . . . . . .  44
     15.2.  COSE Object Labels Registry  . . . . . . . . . . . . . .  44
     15.3.  COSE Header Label Table  . . . . . . . . . . . . . . . .  45
     15.4.  COSE Header Algorithm Label Table  . . . . . . . . . . .  46
     15.5.  COSE Algorithm Registry  . . . . . . . . . . . . . . . .  46
     15.6.  COSE Key Map Registry  . . . . . . . . . . . . . . . . .  47
     15.7.  COSE Key Parameter Registry  . . . . . . . . . . . . . .  48
     15.8.  Media Type Registration  . . . . . . . . . . . . . . . .  48
       15.8.1.  COSE Security Message  . . . . . . . . . . . . . . .  48
       15.8.2.  COSE Key media type  . . . . . . . . . . . . . . . .  50
   16. Security Considerations . . . . . . . . . . . . . . . . . . .  52
   17. References  . . . . . . . . . . . . . . . . . . . . . . . . .  52
     17.1.  Normative References . . . . . . . . . . . . . . . . . .  52
     17.2.  Informative References . . . . . . . . . . . . . . . . .  53
   Appendix A.  AEAD and AE algorithms . . . . . . . . . . . . . . .  54
   Appendix B.  Three Levels of Recipient Information  . . . . . . .  55
   Appendix C.  Examples . . . . . . . . . . . . . . . . . . . . . .  57
     C.1.  Direct MAC  . . . . . . . . . . . . . . . . . . . . . . .  57
     C.2.  Wrapped MAC . . . . . . . . . . . . . . . . . . . . . . .  58
     C.3.  Multi-recipient MAC message . . . . . . . . . . . . . . .  59
     C.4.  Direct ECDH . . . . . . . . . . . . . . . . . . . . . . .  60
     C.5.  Single Signature  . . . . . . . . . . . . . . . . . . . .  61
     C.6.  Multiple Signers  . . . . . . . . . . . . . . . . . . . .  62
   Appendix D.  COSE Header Algorithm Label Table  . . . . . . . . .  63
   Appendix E.  COSE Algorithm Name Values . . . . . . . . . . . . .  64
   Appendix F.  COSE General Values  . . . . . . . . . . . . . . . .  65
   Appendix G.  COSE Key Parameter Labels  . . . . . . . . . . . . .  65
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  68






Schaad                  Expires December 30, 2015               [Page 3]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


1.  Introduction

   There has been an increased focus on the small, constrained devices
   that make up the Internet of Things (IOT).  One of the standards that
   has come of of this process is the Concise Binary Object
   Representation (CBOR).  This standard extends the data model of the
   JavaScript Object Notation (JSON) by allowing for binary data among
   other changes.  CBOR is being adopted by several of the IETF working
   groups dealing with the IOT world to do their encoding of data
   structures.  CBOR was designed specifically to be both small in terms
   of messages transport and implementation size.  A need exists to
   provide basic message security services for IOT and using CBOR as the
   message encoding format makes sense.

   The JOSE working group produced a set of documents
   [RFC7515][RFC7516][RFC7517][RFC7518] that defined how to perform
   encryption, signatures and message authentication (MAC) operations
   for JavaScript Object Notation (JSON) documents and then to encode
   the results using the JSON format [RFC7159].  This document does the
   same work for use with the Concise Binary Object Representation
   (CBOR) [RFC7049] document format.  While there is a strong attempt to
   keep the flavor of the original JOSE documents, two considerations
   are taken into account:

   o  CBOR has capabilities that are not present in JSON and should be
      used.  One example of this is the fact that CBOR has a method of
      encoding binary directly without first converting it into a base64
      encoded string.

   o  The author did not always agree with some of the decisions made by
      the JOSE working group.  Many of these decisions have been re-
      examined, and where it seems to the author to be superior or
      simpler, replaced.

1.1.  Design changes from JOSE

   o  Define a top level message structure so that encrypted, signed and
      MAC-ed messages can easily identified and still have a consistent
      view.

   o  Signed messages separate the concept of protected and unprotected
      attributes that are for the content and the signature.

   o  Key management has been made to be more uniform.  All key
      management techniques are represented as a recipient rather than
      only have some of them be so.

   o  MAC messages are separated from signed messages.



Schaad                  Expires December 30, 2015               [Page 4]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   o  MAC messages have the ability to do key management on the MAC
      authentication key.

   o  Use binary encodings for binary data rather than base64url
      encodings.

   o  Combine the authentication tag for encryption algorithms with the
      ciphertext.

   o  Remove the flattened mode of encoding.  Forcing the use of an
      array of recipients at all times forces the message size to be two
      bytes larger, but one gets a corresponding decrease in the
      implementation size that should compensate for this.  [CREF1]

1.2.  Requirements Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [RFC2119].

   When the words appear in lower case, their natural language meaning
   is used.

1.3.  CBOR Grammar

   There currently is no standard CBOR grammar available for use by
   specifications.  In this document, we use the grammar defined in the
   CBOR data definition language (CDDL)
   [I-D.greevenbosch-appsawg-cbor-cddl].

   CDDL productions that together define the grammar are interspersed in
   the document like this:


   start = COSE_MSG

   The collected CDDL can be extracted from the XML version of this
   document via the following XPath expression below.  (Depending on the
   XPath evaluator one is using, it may be necessary to deal with &gt;
   as an entity.)


   //artwork[@type='CDDL']/text()

   NOTE: At some point we need to make some decisions about how we are
   using CDDL in this document.  Since this draft has not been moving
   forward at a great rate, changing all references on it to



Schaad                  Expires December 30, 2015               [Page 5]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   informational is a good idea.  On the other hand, having some type of
   syntax that can be examined by a machine to do syntax checking is a
   big win.  The build system for this draft is currently using the
   latest version of CDDL to check that the syntax of the examples is
   correct.  Doing this has found problems in both the syntax checker,
   the syntax and the examples.

1.4.  CBOR Related Terminology

   In JSON, maps are called objects and only have one kind of map key: a
   string.  In COSE, we use both strings and integers (both negative and
   non-negative integers) as map keys, as well as data items to identify
   specific choices.  The integers (both positive and negative) are used
   for compactness of encoding and easy comparison.  (Generally, in this
   document the value zero is going to be reserved and not used.)  Since
   the work "key" is mainly used in its other meaning, as a
   cryptographic key, we use the term "label" for this usage of either
   an integer or a string to identify map keys and choice data items.


   label = int / tstr

2.  The COSE_MSG structure

   The COSE_MSG structure is a top level CBOR object which corresponds
   to the DataContent type in the Cryptographic Message Syntax (CMS)
   [RFC5652].  This structure allows for a top level message to be sent
   which could be any of the different security services.  The security
   service is identified within the message.

   The COSE_Tagged_MSG CBOR type takes the COSE_MSG and prepends a CBOR
   tag of TBD1 to the encoding of COSE_MSG.  By having both a tagged and
   untagged version of the COSE_MSG structure, it becomes easy to either
   use COSE_MSG as a top level object or embedded in another object.
   The tagged version allows for a method of placing the COSE_MSG
   structure into a choice, using a consistent tag value to determine
   that this is a COSE object.

   The existence of the COSE_MSG and COSE_Tagged_MSG CBOR data types are
   not intended to prevent protocols from using the individual security
   primitives directly.  Where only a single service is required, that
   structure can be used directly.

   Each of the top-level security objects use a CBOR map as the base
   structure.  Items in the map at the top level are identified by a
   label.  This document defines a number of labels in the IANA "COSE
   Object Labels Registry" (defined in Section 15.2).




Schaad                  Expires December 30, 2015               [Page 6]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   The set of labels present in a security object is not restricted to
   those defined in this document.  However, it is not recommended that
   additional fields be added to a structure unless this is going to be
   done in a closed environment.  When new fields need to be added, it
   is recommended that a new message type be created so that processing
   of the field can be ensured.  Using an older structure with a new
   field means that any security properties of the new field will not be
   enforced.  Before a new field is added at the outer level, strong
   consideration needs to be given to defining a new header field and
   placing it into the protected headers.  Applications should make a
   determination if non-standardized fields are going to be permitted.
   It is suggested that libraries allow for an option to fail parsing if
   non-standardized fields exist, this is especially true if they do not
   allow for access to the fields in other ways.

   A field 'msg_type' is defined to distinguish between the different
   structures when they appear as part of a COSE_MSG object.  [CREF2]
   [CREF3] This field is indexed by an integer value 1, the values
   defined in this document are:

      0 - Reserved.

      1 - Signed Message.

      2 - Encrypted Message

      3 - Authenticated Message (MAC-ed message)

   Implementations MUST be prepared to find an integer under this label
   which does not correspond to the values 1 to 3.  If this is found
   then the client MUST stop attempting to parse the structure and fail.
   The value of 0 is reserved and not to be used.  If the value of 0 is
   found, then clients MUST fail processing the structure.
   Implementations need to recognize that the set of values might be
   extended at a later date, but they should not provide a security
   service based on guesses of what is there.

   NOTE: Is the any reason to allow for a marker of a COSE_Key structure
   and all it to be a COSE_MSG, doing so does allow for a security risk,
   but may simplify the code.  [CREF4]

   The CDDL grammar that corresponds to the above is:









Schaad                  Expires December 30, 2015               [Page 7]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   COSE_MSG = COSE_Sign /
       COSE_encrypt /
       COSE_mac

   COSE_Tagged_MSG = #6.999(COSE_MSG)   ; Replace 999 with TBD1

   ; msg_type values
   reserved=0
   msg_type_signed=1
   msg_type_encrypted=2
   msg_type_mac=3


   The top level of each of the COSE message structures are encoded as
   maps.  We use an integer to distinguish between the different
   security message types.  By searching for the integer under the label
   identified by msg_type (which is in turn an integer), one can
   determine which security message is being used and thus what syntax
   is for the rest of the elements in the map.

   +-------------+--------+--------------------------------------------+
   | name        | number | comments                                   |
   +-------------+--------+--------------------------------------------+
   | msg_type    | 1      | Occurs only in top level messages          |
   |             |        |                                            |
   | protected   | 2      | Occurs in all structures                   |
   |             |        |                                            |
   | unprotected | 3      | Occurs in all structures                   |
   |             |        |                                            |
   | payload     | 4      | Contains the content of the structure      |
   |             |        |                                            |
   | signatures  | 5      | For COSE_Sign - array of signatures        |
   |             |        |                                            |
   | signature   | 6      | For COSE_signature only                    |
   |             |        |                                            |
   | ciphertext  | 4      | TODO: Should we re-use the same as payload |
   |             |        | or not?                                    |
   |             |        |                                            |
   | recipients  | 9      | For COSE_encrypt and COSE_mac              |
   |             |        |                                            |
   | tag         | 10     | For COSE_mac only                          |
   +-------------+--------+--------------------------------------------+

                         Table 1: COSE Map Labels

   The CDDL grammar that provides the label values is:





Schaad                  Expires December 30, 2015               [Page 8]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   ; message_labels
   msg_type=1
   protected=2
   unprotected=3
   payload=4
   signatures=5
   signature=6
   ciphertext=4
   recipients=9
   tag=10


3.  Header Parameters

   The structure of COSE has been designed to have two buckets of
   information that are not considered to be part of the payload itself,
   but are used for holding information about algorithms, keys, or
   evaluation hints for the processing of the layer.  These two buckets
   are available for use in all of the structures in this document
   except for keys.  While these buckets can be present, they may not
   all be usable in all instances.  For example, while the protected
   bucket is present for recipient structures, most of the algorithms
   that are used for recipients do not provide the necessary
   functionality to provide the needed protection and thus the element
   is not used.

   Both buckets are implemented as CBOR maps.  The map key is a 'label'
   (Section 1.4).  The value portion is dependent on the definition for
   the label.  Both maps use the same set of label/value pairs.  The
   integer range for labels has been divided into several sections with
   a standard range, a private range, and a range that is dependent on
   the algorithm selected.  The tables of labels can be found in
   Table 2.

   Two buckets are provided for each layer: [CREF5]

   protected  contains attributes about the layer which are to be
      cryptographically protected.  This bucket MUST NOT be used if it
      is not going to be included in a cryptographic computation.

   unprotected  contains attributes about the layer which are not
      cryptographically protected.

   Both of the buckets are optional and are omitted if there are no
   items contained in the map.  The CDDL fragment which describes the
   two buckets is:





Schaad                  Expires December 30, 2015               [Page 9]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   header_map = {+ label => any }

   Headers = (
       ? protected => bstr,
       ? unprotected => header_map
   )

3.1.  COSE Headers

   The set of header fields defined in this document are:

   alg  This field is used to indicate the algorithm used for the
      security processing.  This field MUST be present at each level of
      a signed, encrypted or authenticated message.  This field using
      the integer '1' for the label.  The value is taken from the 'COSE
      Algorithm Registry' (see Section 15.4).

   crit  This field is used to ensure that applications will take
      appropriate action based on the values found.  The field is used
      to indicate which protected header labels an application which is
      processing a message is required to understand.  This field uses
      the integer '2' for the label.  The value is an array of COSE
      Header Labels.  When present, this MUST be placed in the protected
      header bucket.

      *  Integer labels in the range of 0 to 10 SHOULD be omitted.

      *  Integer labels in the range -1 to -255 can be omitted as they
         are algorithm dependent.  If an application can correctly
         process an algorithm, it can be assumed that it will correctly
         process all of the parameters associated with that algorithm.

      The header values indicated by 'crit' can be processed by either
      the security library code or by an application using a security
      library, the only requirement is that the field is processed.

   cty  This field is used to indicate the content type of the data in
      the payload or ciphertext fields.  The field uses the integer of
      '3' for the label.  The value can be either an integer or a
      string.  Integers are from the XXXXX[CREF6] IANA registry table.
      Strings are from the IANA 'mime-content types' registry.
      Applications SHOULD provide this field if the content structure is
      potentially ambiguous.

   kid  This field one of the ways that can be used to find the key to
      be used.  This value can be matched against the 'kid' field in a
      COSE_Key structure.  Applications MUST NOT assume that 'kid'
      values are unique.  There may be more than one key with the same



Schaad                  Expires December 30, 2015              [Page 10]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


      'kid' value, it may be required that all of the keys need to be
      checked to find the correct one.  This field uses the integer
      value of '4' for the label.  The value of field is the CBOR 'bstr'
      type.  The internal structure of 'kid' is not defined and
      generally cannot be relied on by applications.  Key identifier
      values are hints about which key to use, they are not directly a
      security critical field, for this reason they can normally be
      placed in the unprotected headers bucket.

   nonce  This field holds either a nonce or Initialization Vector
      value.  This value can be used either as a counter value for a
      protocol or as an IV for an algorithm.  TODO: Talk about zero
      extending the value in some cases.

   This table contains a list of all of the parameters for use in
   signature and encryption message types defined by the JOSE document
   set.  In the table is the data value type to be used for CBOR as well
   as the integer value that can be used as a replacement for the name
   in order to further decrease the size of the sent item.
































Schaad                  Expires December 30, 2015              [Page 11]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   +----------+-------+----------+-------------+-----------------------+
   | name     | label | value    | registry    | description           |
   +----------+-------+----------+-------------+-----------------------+
   | alg      | 1     | int /    | COSE        | Integers are taken    |
   |          |       | tstr     | Algorithm   | from table Appendix E |
   |          |       |          | Registry    |                       |
   |          |       |          |             |                       |
   | crit     | 2     | [+       | COSE Header | integer values are    |
   |          |       | label]   | Label       | from this table.      |
   |          |       |          | Registry    |                       |
   |          |       |          |             |                       |
   | cty      | 3     | tstr /   | media-types | Value is either a     |
   |          |       | int      | registry    | media-type or an      |
   |          |       |          |             | integer from the      |
   |          |       |          |             | media-type registry   |
   |          |       |          |             |                       |
   | jku      | *     | tstr     |             | URL to COSE key       |
   |          |       |          |             | object                |
   |          |       |          |             |                       |
   | jwk      | *     | COSE_Key |             | contains a COSE key   |
   |          |       |          |             | not a JWK key         |
   |          |       |          |             |                       |
   | kid      | 4     | bstr     |             | key identifier        |
   |          |       |          |             |                       |
   | x5c      | *     | bstr*    |             | X.509 Certificate     |
   |          |       |          |             | Chain                 |
   |          |       |          |             |                       |
   | x5t      | *     | bstr     |             | SHA-1 thumbprint of   |
   |          |       |          |             | key                   |
   |          |       |          |             |                       |
   | x5t#S256 | *     | bstr     |             | SHA-256 thumbprint of |
   |          |       |          |             | key                   |
   |          |       |          |             |                       |
   | x5u      | *     | tstr     |             | URL for X.509         |
   |          |       |          |             | certificate           |
   |          |       |          |             |                       |
   | zip      | *     | int /    |             | Integers are taken    |
   |          |       | tstr     |             | from the table        |
   |          |       |          |             | Appendix E            |
   |          |       |          |             |                       |
   | nonce    | 5     | bstr     |             | Nonce or              |
   |          |       |          |             | Initialization Vector |
   |          |       |          |             | (IV)                  |
   +----------+-------+----------+-------------+-----------------------+

                          Table 2: Header Labels

   OPEN ISSUES:



Schaad                  Expires December 30, 2015              [Page 12]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   1.  Which of the following items do we want to have standardized in
       this document: jku, jwk, x5c, x5t, x5t#S256, x5u, zip

   2.  I am currently torn on the question "Should epk and iv/nonce be
       algorithm specific or generic headers?"  They are really specific
       to an algorithm and can potentially be defined in different ways
       for different algorithms.  As an example, it would make sense to
       defined nonce for CCM and GCM modes that can have the leading
       zero bytes stripped, while for other algorithms this might be
       undesirable.

   3.  We might want to define some additional items.  What are they?  A
       possible example would be a sequence number as this might be
       common.  On the other hand, this is the type of things that is
       frequently used as the nonce in some places and thus should not
       be used in the same way.  Other items might be challenge/response
       fields for freshness as these are likely to be common.

4.  Signing Structure

   The signature structure allows for one or more signatures to be
   applied to a message payload.  There are provisions for attributes
   about the content and attributes about the signature to be carried
   along with the signature itself.  These attributes may be
   authenticated by the signature, or just present.  Examples of
   attributes about the content would be the type of content, when the
   content was created, and who created the content.  Examples of
   attributes about the signature would be the algorithm and key used to
   create the signature, when the signature was created, and counter-
   signatures.

   When more than one signature is present, the successful validation of
   one signature associated with a given signer is usually treated as a
   successful signature by that signer.  However, there are some
   application environments where other rules are needed.  An
   application that employs a rule other than one valid signature for
   each signer must specify those rules.  Also, where simple matching of
   the signer identifier is not sufficient to determine whether the
   signatures were generated by the same signer, the application
   specification must describe how to determine which signatures were
   generated by the same signer.  Support of different communities of
   recipients is the primary reason that signers choose to include more
   than one signature.  For example, the COSE_Sign structure might
   include signatures generated with the RSA signature algorithm and
   with the Elliptic Curve Digital Signature Algorithm (ECDSA) signature
   algorithm.  This allows recipients to verify the signature associated
   with one algorithm or the other.  (The original source of this text




Schaad                  Expires December 30, 2015              [Page 13]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   is [RFC5652].)  More detailed information on multiple signature
   evaluation can be found in [RFC5752].

   The CDDL grammar for a signature message is:

   COSE_Sign = {
       msg_type => msg_type_signed,
       Headers,
       ? payload => bstr,
       signatures => [+ COSE_signature]
   }

   The fields is the structure have the following semantics:

   msg_type  identifies this as providing the signed security service.
      The value MUST be msg_type_signed (1).

   protected  contains attributes about the payload which are to be
      protected by the signature.  An example of such an attribute would
      be the content type ('cty') attribute.  The content is a CBOR map
      of attributes which is encoded to a byte stream.  This field MUST
      NOT contain attributes about the signature, even if those
      attributes are common across multiple signatures.  The labels in
      this map are typically taken from Table 2.

   unprotected  contains attributes about the payload which are not
      protected by the signature.  An example of such an attribute would
      be the content type ('cty') attribute.  This field MUST NOT
      contain attributes about a signature, even if the attributes are
      common across multiple signatures.  The labels in this map are
      typically taken from Table 2.

   payload  contains the serialized content to be signed.  If the
      payload is not present in the message, the application is required
      to supply the payload separately.  The payload is wrapped in a
      bstr to ensure that it is transported without changes, if the
      payload is transported separately it is the responsibility of the
      application to ensure that it will be transported without changes.

   signatures  is an array of signature items.  Each of these items uses
      the COSE_signature structure for its representation.

   We use the values in Table 1 as the labels in the COSE_Sign map.
   While other labels can be present in the map, it is not generally a
   recommended practice.  The other labels can be either of integer or
   string type, use of other types SHOULD be treated as an error.

   The CDDL grammar structure for a signature is:



Schaad                  Expires December 30, 2015              [Page 14]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   COSE_signature =  {
       Headers,
       signature => bstr
   }

   The fields in the structure have the following semantics:

   protected  contains additional information to be authenticated by the
      signature.  The field holds data about the signature operation.
      The field MUST NOT hold attributes about the payload being signed.
      The content is a CBOR map of attributes which is encoded to a byte
      stream.  At least one of protected and unprotected MUST be
      present.

   unprotected  contains attributes about the signature which are not
      protected by the signature.  This field MUST NOT contain
      attributes about the payload being signed.  At least one of
      protected and unprotected MUST be present.

   signature  contains the computed signature value.

   The COSE structure used to create the byte stream to be signed uses
   the following CDDL grammar structure:

   Sig_structure = [
       body_protected: bstr,
       sign_protected: bstr,
       payload: bstr
   ]

   How to compute a signature:

   1.  Create a Sig_structure object and populate it with the
       appropriate fields.  For body_protected and sign_protected, if
       the fields are not present in their corresponding maps, an bstr
       of length zero is used.

   2.  Create the value ToBeSigned by encoding the Sig_structure to a
       byte string.

   3.  Call the signature creation algorithm passing in K (the key to
       sign with), alg (the algorithm to sign with) and ToBeSigned (the
       value to sign).

   4.  Place the resulting signature value in the 'signature' field of
       the map.

   How to verify a signature:



Schaad                  Expires December 30, 2015              [Page 15]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   1.  Create a Sig_structure object and populate it with the
       appropriate fields.  For body_protected and sign_protected, if
       the fields are not present in their corresponding maps, an bstr
       of length zero is used.

   2.  Create the value ToBeSigned by encoding the Sig_structure to a
       byte string.

   3.  Call the signature verification algorithm passing in K (the key
       to verify with), alg (the algorithm to sign with), ToBeSigned
       (the value to sign), and sig (the signature to be verified).

   In addition to performing the signature verification, one must also
   perform the appropriate checks to ensure that the key is correctly
   paired with the signing identity and that the appropriated
   authorization is done.

5.  Encryption object

   In this section we describe the structure and methods to be used when
   doing an encryption in COSE.  In COSE, we use the same techniques and
   structures for encrypting both the plain text and the keys used to
   protect the text.  This is different from the approach used by both
   [RFC5652] and [RFC7516] where different structures are used for the
   plain text and for the different key management techniques.

   One of the byproducts of using the same technique for encrypting and
   encoding both the content and the keys using the various key
   management techniques, is a requirement that all of the key
   management techniques use an Authenticated Encryption (AE) algorithm.
   (For the purpose of this document we use a slightly loose definition
   of AE algorithms.)  When encrypting the plain text, it is normal to
   use an Authenticated Encryption with Additional Data (AEAD)
   algorithm.  For key management, either AE or AEAD algorithms can be
   used.  See Appendix A for more details about the different types of
   algorithms.  [CREF7]

   The CDDL grammar structure for encryption is:













Schaad                  Expires December 30, 2015              [Page 16]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   COSE_encrypt = {
       msg_type=>msg_type_encrypted,
       COSE_encrypt_fields
   }

   COSE_encrypt_fields = (
       Headers,
       ? ciphertext => bstr,
       ? recipients => [+{COSE_encrypt_fields}]
   )

   Description of the fields:

   msg_type  identifies this as providing the encrypted security
      service.  The value MUST be msg_type_encrypted (2).

   protected  contains the information about the plain text or
      encryption process that is to be integrity protected.  The field
      is encoded in CBOR as a 'bstr'.  The contents of the protected
      field is a CBOR map of the protected data names and values.  The
      map is CBOR encoded before placing it into the bstr.  Only values
      associated with the current cipher text are to be placed in this
      location even if the value would apply to multiple recipient
      structures.

   unprotected  contains information about the plain text that is not
      integrity protected.  Only values associated with the current
      cipher text are to be placed in this location even if the value
      would apply to multiple recipient structures.

   ciphertext  contains the encrypted plain text.  If the ciphertext is
      to be transported independently of the control information about
      the encryption process (i.e. detached content) then the field is
      omitted.

   recipients  contains the recipient information.  It is required that
      at least one recipient MUST be present for the content encryption
      layer.

5.1.  Key Management Methods

   This section has moved.  Still need to make some small comments here.

5.2.  Encryption Algorithm for AEAD algorithms

   The encryption algorithm for AEAD algorithms is fairly simple.  In
   order to get a consistent encoding of the data to be authenticated,
   the Enc_structure is used to have canonical form of the AAD.



Schaad                  Expires December 30, 2015              [Page 17]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   Enc_structure = [
       protected: bstr,
       external_aad: bstr
   ]


   1.  Copy the protected header field from the message to be sent.

   2.  If the application has supplied external additional authenticated
       data to be included in the computation, then it is placed in the
       'external_aad' field.  If no data was supplied, then a zero
       length binary value is used.

   3.  Encode the Enc_structure using a CBOR Canonical encoding
       Section 8 to get the AAD value.

   4.  Determine the encryption key.  This step is dependent on the key
       management method being used: For:

       No Recipients:  The key to be used is determined by the algorithm
          and key at the current level.

       Direct and Direct Key Agreement:  The key is determined by the
          key and algorithm in the recipient structure.  The encryption
          algorithm and size of the key to be used are inputs into the
          KDF used for the recipient.  (For direct, the KDF can be
          thought of as the identity operation.)

       Other:  The key is randomly generated.

   5.  Call the encryption algorithm with K (the encryption key to use),
       P (the plain text) and AAD (the additional authenticated data).
       Place the returned cipher text into the 'ciphertext' field of the
       structure.

   6.  For recipients of the message, recursively perform the encryption
       algorithm for that recipient using the encryption key as the
       plain text.

5.3.  Encryption algorithm for AE algorithms

   1.  Verify that the 'protected' field is absent.

   2.  Verify that there was no external additional authenticated data
       supplied for this operation.

   3.  Determine the encryption key.  This step is dependent on the key
       management method being used: For:



Schaad                  Expires December 30, 2015              [Page 18]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


       No Recipients:  The key to be used is determined by the algorithm
          and key at the current level.

       Direct and Direct Key Agreement:  The key is determined by the
          key and algorithm in the recipient structure.  The encryption
          algorithm and size of the key to be used are inputs into the
          KDF used for the recipient.  (For direct, the KDF can be
          thought of as the identity operation.)

       Other:  The key is randomly generated.

   4.  Call the encryption algorithm with K (the encryption key to use)
       and the P (the plain text).  Place the returned cipher text into
       the 'ciphertext' field of the structure.

   5.  For recipients of the message, recursively perform the encryption
       algorithm for that recipient using the encryption key as the
       plain text.

6.  MAC objects

   In this section we describe the structure and methods to be used when
   doing MAC authentication in COSE.  JOSE used a variant of the
   signature structure for doing MAC operations and it is restricted to
   using a single pre-shared secret to do the authentication.  [CREF8]
   This document allows for the use of all of the same methods of key
   management as are allowed for encryption.

   When using MAC operations, there are two modes in which it can be
   used.  The first is just a check that the content has not been
   changed since the MAC was computed.  Any of the key management
   methods can be used for this purpose.  The second mode is to both
   check that the content has not been changed since the MAC was
   computed, and to use key management to verify who sent it.  The key
   management modes that support this are ones that either use a pre-
   shared secret, or do static-static key agreement.  In both of these
   cases the entity MAC-ing the message can be validated by a key
   binding.  (The binding of identity assumes that there are only two
   parties involved and you did not send the message yourself.)

   COSE_mac = {
      msg_type=>msg_type_mac,
      Headers,
      ? payload => bstr,
      tag => bstr,
      recipients => [+{COSE_encrypt_fields}]
   }




Schaad                  Expires December 30, 2015              [Page 19]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   Field descriptions:

   msg_type  identifies this as providing the encrypted security
      service.  The value MUST be msg_type_mac (3).

   protected  contains attributes about the payload which are to be
      protected by the MAC.  An example of such an attribute would be
      the content type ('cty') attribute.  The content is a CBOR map of
      attributes which is encoded to a byte stream.  This field MUST NOT
      contain attributes about the recipient, even if those attributes
      are common across multiple recipients.  At least one of protected
      and unprotected MUST be present.

   unprotected  contains attributes about the payload which are not
      protected by the MAC.  An example of such an attribute would be
      the content type ('cty') attribute.  This field MUST NOT contain
      attributes about a recipient, even if the attributes are common
      across multiple recipients.  At least one of protected and
      unprotected MUST be present.

   payload  contains the serialized content to be MAC-ed.  If the
      payload is not present in the message, the application is required
      to supply the payload separately.  The payload is wrapped in a
      bstr to ensure that it is transported without changes, if the
      payload is transported separately it is the responsibility of the
      application to ensure that it will be transported without changes.

   tag  contains the MAC value.

   recipients  contains the recipient information.  See the description
      under COSE_Encryption for more info.

    MAC_structure = [
        protected: bstr,
        external_aad: bstr,
        payload: bstr
   ]

   How to compute a MAC:

   1.  Create a MAC_structure and copy the protected and payload
       elements from the COSE_mac structure.

   2.  If the application has supplied external authenticated data,
       encode it as a binary value and place in the MAC_structure.  If
       there is no external authenticated data, then use a zero length
       'bstr'.




Schaad                  Expires December 30, 2015              [Page 20]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   3.  Encode the MAC_structure using a canonical CBOR encoder.  The
       resulting bytes is the value to compute the MAC on.

   4.  Compute the MAC and place the result in the 'tag' field of the
       COSE_mac structure.

   5.  Encrypt and encode the MAC key for each recipient of the message.

7.  Key Structure

   There are only a few changes between JOSE and COSE for how keys are
   formatted.  As with JOSE, COSE uses a map to contain the elements of
   a key.  Those values, which in JOSE, are base64url encoded because
   they are binary values, are encoded as bstr values in COSE.

   For COSE we use the same set of fields that were defined in
   [RFC7517].  [CREF9] [CREF10]

   COSE_Key = {
       kty => tstr / int,
       ? key_ops => [+ tstr / int ],
       ? alg => tstr / int,
       ? kid => bstr,
       * label => values
   }

   COSE_KeySet = [+COSE_Key]

   The element "kty" is a required element in a COSE_Key map.  All other
   elements are optional and not all of the elements listed in [RFC7517]
   or [RFC7518] have been listed here even though they can all appear in
   a COSE_Key map.

   The "key_ops" element is preferred over the "use" element as the
   information provided that way is more finely detailed about the
   operations allowed.  It is strongly suggested that this element be
   present for all keys.

   The same fields defined in [RFC7517] are used here with the following
   changes in rules:

   o  Any item which is base64 encoded in JWK, is bstr encoded for COSE.

   o  Any item which is integer encoded in JWK, is int encoded for COSE.

   o  Any item which is string (but not base64) encoded in JWK, is tstr
      encoded for COSE.




Schaad                  Expires December 30, 2015              [Page 21]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   o  Exceptions to this are the following fields:

      kid  is always bstr encoded rather than tstr encoded.  This change
         in encoding is due to the fact that frequently, values such as
         a hash of the public key is used for a kid value.  Since the
         field is defined as not having a specific structure, making it
         binary rather than textual makes sense.

7.1.  COSE Key Map Labels

   This table contains a list of all of the parameters defined for keys
   that were defined by the JOSE document set.  In the table is the data
   value type to be used for CBOR as well as the integer value that can
   be used as a replacement for the name in order to further decrease
   the size of the sent item.

   +----------+-------+-------+-------------+--------------------------+
   | name     | label | CBOR  | registry    | description              |
   |          |       | type  |             |                          |
   +----------+-------+-------+-------------+--------------------------+
   | kty      | 1     | tstr  | COSE        | Identification of the    |
   |          |       | / int | General     | key type                 |
   |          |       |       | Values      |                          |
   |          |       |       |             |                          |
   | use      | *     | tstr  |             | deprecated - don't use   |
   |          |       |       |             |                          |
   | key_ops  | *     | [*    |             |                          |
   |          |       | tstr] |             |                          |
   |          |       |       |             |                          |
   | alg      | 3     | tstr  | COSE        | Key usage restriction to |
   |          |       | / int | Algorithm   | this algorithm           |
   |          |       |       | Values      |                          |
   |          |       |       |             |                          |
   | kid      | 2     | bstr  |             | Key Identification value |
   |          |       |       |             | - match to kid in        |
   |          |       |       |             | message                  |
   |          |       |       |             |                          |
   | x5u      | *     | tstr  |             |                          |
   |          |       |       |             |                          |
   | x5c      | *     | bstr* |             |                          |
   |          |       |       |             |                          |
   | x5t      | *     | bstr  |             |                          |
   |          |       |       |             |                          |
   | x5t#S256 | *     | bstr  |             |                          |
   +----------+-------+-------+-------------+--------------------------+






Schaad                  Expires December 30, 2015              [Page 22]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   ;key_labels
   kty=1
   key_kid=2
   key_alg=3


8.  CBOR Encoder Restrictions

   There as been an attempt to limit the number of places where the
   document needs to impose restrictions on how the CBOR Encoder needs
   to work.  We have managed to narrow it down to the following
   restrictions:

   o  The restriction applies to the encoding the Sig_structure, the
      Enc_structure, and the MAC_structure.

   o  The rules for Canonical CBOR (Section 3.9 of RFC 7049) MUST be
      used in these locations.  The main rule that needs to be enforced
      is that all lengths in these structures MUST be encoded such that
      they are encoded using definite lengths and the minimum length
      encoding is used.

   o  All parsers used SHOULD fail on both parsing and generation if the
      same label is used twice as a key for the same map.

9.  Signature Algorithms

9.1.  RSASSA-PSS

                 +-------+-------+-----------------------+
                 | name  | value | description           |
                 +-------+-------+-----------------------+
                 | PS256 | -10   | RSASSA-PSS w/ SHA-256 |
                 |       |       |                       |
                 | PS384 | *     | RSASSA-PSS w/ SHA-384 |
                 |       |       |                       |
                 | PS512 | -11   | RSASSA-PSS w/ SHA-512 |
                 +-------+-------+-----------------------+

9.2.  ECDSA

   ECDSA [DSS] defines a signature algorithm using ECC.

   The security strength of the signature is no greater than the minimum
   of the security strength associated with the bit length of the key
   and the security strength of the hash function.  When a hash function
   is used that has greater security than is provided by the length of




Schaad                  Expires December 30, 2015              [Page 23]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   the key, the signature algorithm uses the leftmost keyLength bits of
   the hash function output.

              +-------+-------+---------+------------------+
              | name  | value | hash    | description      |
              +-------+-------+---------+------------------+
              | ES256 | -7    | SHA-256 | ECDSA w/ SHA-256 |
              |       |       |         |                  |
              | ES384 | -8    | SHA-384 | ECDSA w/ SHA-384 |
              |       |       |         |                  |
              | ES512 | -9    | SHA-512 | ECDSA w/ SHA-512 |
              +-------+-------+---------+------------------+

                      Table 3: ECDSA Algorithm Values

   In order to promote interoperability, it is suggested that SHA-256 be
   used only with keys of length 256, SHA-384 be used only with keys of
   length 384 and SHA-512 be used only with keys of length 521.  This is
   aligned with the recommendation in Section 4 of [RFC5480].

   The signature algorithm results in a pair of integers (R, S).  These
   integers will be of the same order as length of the key used for the
   signature process.  The signature is encoded by converting the
   integers into byte strings of the same length as the key size.  The
   length is rounded up to the nearest byte and is left padded with zero
   bits to get to the correct length.  The two integers are then
   concatenated together to form a byte string that is the resulting
   signature.

   Using the function defined in [RFC3447] the signature is:
   Signature = I2OSP(R, n) | I2OSP(S, n)
   where n = ceiling(key_length / 8)

9.2.1.  Security Considerations

   On of the issues that needs to be discussed is substitution attacks.
   There are two different things that can potentially be substituted in
   this algorithm.  Both of these attacks are current theoretical only.

   The first substitution attack is changing the curve used to validate
   the signature, the only requirement is that the order of the key
   match the length of R and S.  It is theoretically possible to use a
   different curve and get a different result.  We current do not have
   any way to deal with this version of the attack except to restrict
   the overall set of curves that can be used.

   The second substitution attack is to change the hash function that is
   used to verify the signature.  This attack can be mitigated by



Schaad                  Expires December 30, 2015              [Page 24]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   including the signature algorithm identifier in the data to be
   signed.

10.  Message Authentication (MAC) Algorithms

   Message Authentication Codes (MACs) provide data authentication and
   integrity protection.  They provide either no or very limited data
   origination.  (One cannot, for example, be used to prove the identity
   of the sender to a third party.)

   MAC algorithms can be based on either a block cipher algorithm (i.e.
   AES-MAC) or a hash algorithm (i.e.  HMAC).  This document defines a
   MAC algorithm for each of these two constructions.

10.1.  Hash-based Message Authentication Codes (HMAC)

   The Hash-base Message Authentication Code algorithm (HMAC)
   [RFC2104][RFC4231] was designed, in part, to deal with the birthday
   attacks on straight hash functions.  The algorithm was also designed
   to all for new hash algorithms to be directly plugged in without
   changes to the hash function.  The HMAC design process has been
   vindicated as, while the security of hash algorithms such as MD5 has
   decreased over time, the security of HMAC combined with MD5 has not
   yet been shown to be compromised [RFC6151].

   For use in constrained environments, we define a set of HMAC
   algorithms that are truncated.  There are currently no known issues
   when truncating, however the security strength of the message tag is
   correspondingly reduced in strength.  When truncating, the left most
   tag length bits are kept and transmitted.

   +-----------+-------+---------+--------+----------------------------+
   | name      | value | Hash    | Length | description                |
   +-----------+-------+---------+--------+----------------------------+
   | HMAC      | *     | SHA-256 | 64     | HMAC w/ SHA-256 truncated  |
   | 256/64    |       |         |        | to 8 bytes                 |
   |           |       |         |        |                            |
   | HMAC      | 4     | SHA-256 | 256    | HMAC w/ SHA-256            |
   | 256/256   |       |         |        |                            |
   |           |       |         |        |                            |
   | HMAC      | 5     | SHA-384 | 384    | HMAC w/ SHA-384            |
   | 384/384   |       |         |        |                            |
   |           |       |         |        |                            |
   | HMAC      | 6     | SHA-512 | 512    | HMAC w/ SHA-512            |
   | 512/512   |       |         |        |                            |
   +-----------+-------+---------+--------+----------------------------+

                      Table 4: HMAC Algorithm Values



Schaad                  Expires December 30, 2015              [Page 25]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


10.1.1.  Security Considerations

   TBD.

10.2.  AES Message Authentication Code (AES-MAC)

   There are a set of different algorithms that we can specify here.
   Which should it be?

      AES-MAC - Use standard CBC mode

      AES-CMAC - RFC 4493 - has improved security over AES-CBC.  The
      padding is different from CBC mode and requires one extra AES
      block encryption step plus and xor operation.

11.  Content Encryption Algorithms

11.1.  AES GCM

             +---------+-------+-----------------------------+
             | name    | value | description                 |
             +---------+-------+-----------------------------+
             | A128GCM | 1     | AES-GCM mode w/ 128-bit key |
             |         |       |                             |
             | A192GCM | 2     | AES-GCM mode w/ 192-bit key |
             |         |       |                             |
             | A256GCM | 3     | AES-GCM mode w/ 256-bit key |
             +---------+-------+-----------------------------+

                   Table 5: Algorithm Value for AES-GCM

11.2.  AES CCM

   Counter with CBC-MAC (CCM) is a generic authentication encryption
   block cipher mode defined in [RFC3610].  The CCM mode is combined
   with the AES block encryption algorithm to define a commonly used
   content encryption algorithm used in constrainted devices.

   The CCM mode has two parameter choices.  The first choice is M, the
   size of the authentication field.  The choice of the value for M
   involves a trade-off between message expansion and the probably that
   an attacker can undetecably modify a message.  The second choice is
   L, the size of the length field.  This value requires a trade-off
   between the maximum message size and the size of the Nonce.

   It is unfortunate that the specification for CCM specified L and M as
   a count of bytes rather than a count of bits.  This leads to possible
   misunderstandings where AES-CCM-8 is frequently used to refer to a



Schaad                  Expires December 30, 2015              [Page 26]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   version of CCM mode where the size of the authentication is 64-bits
   and not 8-bits.  These values have traditionally been specified as
   bit counts rather than byte counts.  This document will follow the
   tradition of using bit counts so that it is easier to compare the
   different algorithms presented in this document.

   We define a matrix of algorithms in this document over the values of
   L and M.  Constrained devices are usually operating in situations
   where they use short messages and want to avoid doing key management
   operations.  This favors smaller values of M and larger values of L.
   Less constrained devices do will want to be able to user larger
   messages and are more willing to generate new keys for every
   operation.  This favors larger values of M and smaller values of L.
   (The use of a large nonce means that random generation of both the
   key and the nonce will decrease the chances of repeating the pair on
   two different messages.)

   The following values are used for L:

   16-bits (2)  limits messages to 2^16 bytes in length.  The nonce
      length is 13 octets allowing for 2^(13*8) possible values of the
      nonce without repeating.

   64-bits (8)  limits messages to 2^64 byes in length.  The nonce
      length is 7 octets allowing for 2^56 possible values of the nonce
      without repeating.

   The following values are used for M:

   64-bits (8)  produces a 64-bit authentication tag.  This implies that
      there is a 1 in 2^64 chance that an modified message will
      authenticate.

   128-bits (16)  produces a 128-bit authentication tag.  This implies
      that there is a 1 in 2^128 chance that an modified message will
      authenticate.

   +--------------------+--------+----+-----+-----+--------------------+
   | name               | value  | L  | M   | k   | description        |
   +--------------------+--------+----+-----+-----+--------------------+
   | AES-CCM-16-64-128  | A281C  | 16 | 64  | 128 | AES-CCM mode       |
   |                    |        |    |     |     | 128-bit key,       |
   |                    |        |    |     |     | 64-bit tag,        |
   |                    |        |    |     |     | 13-byte nonce      |
   |                    |        |    |     |     |                    |
   | AES-CCM-16-64-192  | A282C  | 16 | 64  | 192 | AES-CCM mode       |
   |                    |        |    |     |     | 192-bit key,       |
   |                    |        |    |     |     | 64-bit tag,        |



Schaad                  Expires December 30, 2015              [Page 27]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   |                    |        |    |     |     | 13-byte nonce      |
   |                    |        |    |     |     |                    |
   | AES-CCM-16-64-256  | A283C  | 16 | 64  | 256 | AES-CCM mode       |
   |                    |        |    |     |     | 256-bit key,       |
   |                    |        |    |     |     | 64-bit tag,        |
   |                    |        |    |     |     | 13-byte nonce      |
   |                    |        |    |     |     |                    |
   | AES-CCM-64-64-128  | A881C  | 64 | 64  | 128 | AES-CCM mode       |
   |                    |        |    |     |     | 128-bit key,       |
   |                    |        |    |     |     | 64-bit tag, 7-byte |
   |                    |        |    |     |     | nonce              |
   |                    |        |    |     |     |                    |
   | AES-CCM-64-64-192  | A882C  | 64 | 64  | 192 | AES-CCM mode       |
   |                    |        |    |     |     | 192-bit key,       |
   |                    |        |    |     |     | 64-bit tag, 7-byte |
   |                    |        |    |     |     | nonce              |
   |                    |        |    |     |     |                    |
   | AES-CCM-64-64-256  | A883C  | 64 | 64  | 256 | AES-CCM mode       |
   |                    |        |    |     |     | 256-bit key,       |
   |                    |        |    |     |     | 64-bit tag, 7-byte |
   |                    |        |    |     |     | nonce              |
   |                    |        |    |     |     |                    |
   | AES-CCM-16-128-128 | A2161C | 16 | 128 | 128 | AES-CCM mode       |
   |                    |        |    |     |     | 128-bit key,       |
   |                    |        |    |     |     | 128-bit tag,       |
   |                    |        |    |     |     | 13-byte nonce      |
   |                    |        |    |     |     |                    |
   | AES-CCM-16-128-192 | A2162C | 16 | 128 | 192 | AES-CCM mode       |
   |                    |        |    |     |     | 192-bit key,       |
   |                    |        |    |     |     | 128-bit tag,       |
   |                    |        |    |     |     | 13-byte nonce      |
   |                    |        |    |     |     |                    |
   | AES-CCM-16-128-256 | A2163C | 16 | 128 | 256 | AES-CCM mode       |
   |                    |        |    |     |     | 256-bit key,       |
   |                    |        |    |     |     | 128-bit tag,       |
   |                    |        |    |     |     | 13-byte nonce      |
   |                    |        |    |     |     |                    |
   | AES-CCM-64-128-128 | A8161C | 64 | 128 | 128 | AES-CCM mode       |
   |                    |        |    |     |     | 128-bit key,       |
   |                    |        |    |     |     | 128-bit tag,       |
   |                    |        |    |     |     | 7-byte nonce       |
   |                    |        |    |     |     |                    |
   | AES-CCM-64-128-192 | A8162C | 64 | 128 | 192 | AES-CCM mode       |
   |                    |        |    |     |     | 192-bit key,       |
   |                    |        |    |     |     | 128-bit tag,       |
   |                    |        |    |     |     | 7-byte nonce       |
   |                    |        |    |     |     |                    |
   | AES-CCM-64-128-256 | A8163C | 64 | 128 | 256 | AES-CCM mode       |



Schaad                  Expires December 30, 2015              [Page 28]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   |                    |        |    |     |     | 256-bit key,       |
   |                    |        |    |     |     | 128-bit tag,       |
   |                    |        |    |     |     | 7-byte nonce       |
   +--------------------+--------+----+-----+-----+--------------------+

                   Table 6: Algorithm Values for AES-CCM

   M00TODO: Make a determination of which ones get 1-, 2- or 3-byte
   identifiers.  I.e. which ones are going to be popular.

11.2.1.  Security Considerations

   When using AES-CCM the following restrictions MUST be enforced:

   o  The key and nonce pair MUST be unique for every message encrypted.

   o  The total number of times the AES block cipher is used MUST NOT
      exceed 2^61 operations.  This limitation is the sum of times the
      block cipher is used in computing the MAC value and in performing
      stream encryption operations.  An explicit check is required only
      in environments where it is expected that it might be exceeded.

   [RFC3610] additionally calls out one other consideration of note.  It
   is possible to do a pre-computation attack against the algorithm in
   cases where the portions encryption content is highly predictable.
   This reduces the security of the key size by half.  Ways to deal with
   this attack include adding a random portion to the nonce value and/or
   increasing the key size used.  Using a portion of the nonce for a
   random value will decrease the number of messages that a single key
   can be used for.  Increasing the key size may require more resources
   in the constrained device.  See sections 5 and 10 of [RFC3610] for
   more information.

12.  Key Derivation Functions (KDF)

12.1.  HMAC-based Extract-and-Expand Key Derivation Function (HKDF)

   See [RFC5869].

   Inputs:

      secret - a shared value that is secret.  Secrets may be either
      previously shared or derived from operations like a DH key
      agreement.

      salt - an optional public value that is used to change the
      generation process.  If specified, the salt is carried using the
      'salt' algorithm parameter.  While [RFC5869] suggests that the



Schaad                  Expires December 30, 2015              [Page 29]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


      length of the salt be the same as the length of the underlying
      hash value, any amount of salt will improve the security as
      different key values will be generated.  The 'salt' parameter is
      encoded as a binary string.  This parameter is protected by being
      included in the key computation and does not need to be separately
      authenticated.

      length - the number of octets of output that need to be generated.

      context information

      hash function - The underlying hash function to be used in the
      HKDF algorithm.  The hash function is encoded into the HKDF
      algorithm selection.

                     +----------+---------+---------+
                     | name     | hash    | context |
                     +----------+---------+---------+
                     | HKDF-256 | SHA-256 | XXX     |
                     |          |         |         |
                     | HKDF-512 | SHA-512 | XXX     |
                     +----------+---------+---------+

                         Table 7: HKDF algorithms

                   +------+-------+------+-------------+
                   | name | label | type | description |
                   +------+-------+------+-------------+
                   | salt | -20   | bstr | Random salt |
                   +------+-------+------+-------------+

                              HKDF parameters

12.2.  Context Information Structure

   The context information structure is used to ensure that the derived
   keying material is "bound" to the context of the transaction.  The
   context information structure used here is based on that defined in
   [SP800-56A].  By using CBOR for the encoding of the context
   information structure, we automatically get the same type of type and
   length separation of fields that is obtained by the use of ASN.1.
   This means that there is no need to encode the lengths for the base
   elements as it is done by the CBOR encoding.

   The context information structure refers to PartyU and PartyV as the
   two parties which are doing the key derivation.  Unless the
   application protocol defines differently, we assign PartyU to the
   entity that is creating the message and PartyV to the entity that is



Schaad                  Expires December 30, 2015              [Page 30]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   receiving the message.  This is because we are assuming a set of
   stand alone store and forward messaging processes.

   Application protocols are free to define the roles differently.  For
   example, they could assign the PartyU role to the entity that
   initiates the connection and allow directly sending multiple messages
   over the line without changing the role information.

   We encode the context specific information using a CBOR array type.
   The fields in the array are:

   AlgorithmID  This field indicates the algorithm for which the key
      material will be used.  This field is required to be present and
      is a copy of the algorithm identifier in the message.  The field
      exists in the context information so that if the same environment
      is used for different algorithms, then completely different keys
      will be generated each of those algorithms.  (This practice means
      if algorithm A uses a shorter key than algorithm B and thus can be
      found easier, the key derived for algorithm B will not contain the
      key for algorithm A as a prefix.)  [CREF11]

   PartyUInfo  This field holds information about party U.  The
      ParytUInfo structure is divided into three pieces:

      identity  This contains the identity information for party U.  The
         identities can be assigned in one of two manners.  Firstly, a
         protocol can assign identities based on roles.  For example,
         the roles of "client" and "server" may be assigned to different
         entities in the protocol.  Each entity would then use the
         correct label for the data they they send or receive.  The
         second way is for a protocol to assign identities is to use a
         name based on a naming system (i.e.  DNS, X.509 names).
         We define an algorithm parameter 'PartyU identity' that can be
         used to carry identity information in the message.  However,
         identity information is often known as part of the protocol and
         can thus be inferred rather than made explicit.  If identity
         information is carried in the message, applications SHOULD have
         a way of validating the supplied identity information.  The
         identity information does not need to be specified and can be
         left as absent.
         The identity value supplied will be validated as part of the
         key derivation process.  If the identity string is wrong, then
         the wrong key will be created.

      nonce  This contains a one time nonce value.  The nonce can either
         be implicit from the protocol or carried as a value in the
         unprotected headers.  [CREF12]




Schaad                  Expires December 30, 2015              [Page 31]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


         We define an algorithm parameter 'PartyU nonce' that can be
         used to carry this value in the message However, the nonce
         value could be determined by the application and the value
         determined from elsewhere.
         This item is optional and can be absent.

      other  This contains other information that is defined by the
         protocol.
         This item is optional and can be absent.

   PartyVInfo  M00TODO: Copy down from PartyUInfo when that text is
      ready.

   SuppPubInfo  This field contains public information that is mutually
      known to both parties.

      keyDataLength  This is set to the number of bits of the desired
         output value.

      other  The field other is for free form data defined by the
         application.  An example is that an application could defined
         two different strings to be placed here to generate different
         keys for a data stream vs a control stream.  This field is
         optional and will only be present if the application defines a
         structure for this information.  Applications that define this
         SHOULD use CBOR to encode the data so that types and lengths
         are correctly include.

   SuppPrivInfo  This field contains private information that is
      mutually known information.  An example of this information would
      be a pre-existing shared secret.  The field is optional and will
      only be present if the application defines a structure for this
      information.  Applications that define this SHOULD use CBOR to
      encode the data so that types and lengths are correctly include.

















Schaad                  Expires December 30, 2015              [Page 32]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   COSE_KDF_Context = [
       AlgorithmID : int / tstr,
       PartyUInfo : [
           ? nonce : bstr / int,
           ? identity : bstr,
           ? other : bstr
       ],
       PartyVInfo : [
           ? nonce : bstr,
           ? identity : bstr / tstr,
           ? other : bstr
       ],
       SuppPubInfo : [
           keyDataLength : uint,
           ? other : bstr
       ],
       ? SuppPrivInfo : bstr
   ]

   +---------------+-------+-----------+-------------------------------+
   | name          | label | type      | description                   |
   +---------------+-------+-----------+-------------------------------+
   | PartyU        | -21   | bstr      | Party U identity Information  |
   | identity      |       |           |                               |
   |               |       |           |                               |
   | PartyU nonce  | -22   | bstr /    | Party U provided nonce        |
   |               |       | int       |                               |
   |               |       |           |                               |
   | PartyU other  | -23   | bstr      | Party U other provided        |
   |               |       |           | information                   |
   |               |       |           |                               |
   | PartyV        | -24   | bstr      | Party V identity Information  |
   | identity      |       |           |                               |
   |               |       |           |                               |
   | PartyV nonce  | -25   | bstr /    | Party V provided nonce        |
   |               |       | int       |                               |
   |               |       |           |                               |
   | PartyV other  | -26   | bstr      | Party V other provided        |
   |               |       |           | information                   |
   +---------------+-------+-----------+-------------------------------+

                       Context Algorithm Parameters

13.  Key Management Algorithms

   There are a number of different key management methods that can be
   used in the COSE encryption system.  In this section we will discuss
   each of the key management methods, what fields need to be specified,



Schaad                  Expires December 30, 2015              [Page 33]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   and which algorithms are defined in this document to deal with each
   of them.

   The names of the key management methods used here are the same as are
   defined in [RFC7517].  Other specifications use different terms for
   the key management methods or do not support some of the key
   management methods.

   At the moment we do not have any key management methods that allow
   for the use of protected headers.  This may be changed in the future
   if, for example, the AES-GCM Key wrap method defined in [RFC7518]
   were extended to allow for authenticated data.  In that event the use
   of the 'protected' field, which is current forbidden below, would be
   permitted.

13.1.  Direct Encryption

   In direct encryption mode, a shared secret between the sender and the
   recipient is used as the key.  [CREF13] When direct encryption mode
   is used, it MUST be the only mode used on the message.  It is a
   massive security leak to have both direct encryption and a different
   key management mode on the same message.

   For JOSE, direct encryption key management is the only key management
   method allowed for doing MAC-ed messages.  In COSE, all of the key
   management methods can be used for MAC-ed messages.

   The COSE_encrypt structure for the recipient is organized as follows:

   o  The 'protected', 'ciphertext' and 'recipients' fields MUST be
      absent.

   o  At a minimum, the 'unprotected' field MUST contain the 'alg'
      parameter and SHOULD contain a parameter identifying the shared
      secret.

13.1.1.  Direct Key

         +---------+-------+--------------+----------------------+
         | name    | value | KDF          | description          |
         +---------+-------+--------------+----------------------+
         | dir     | -6    | N/A          | Direct use of CEK    |
         |         |       |              |                      |
         | dir+KDF | *     | HKDF SHA-256 | Shared secret w/ KDF |
         +---------+-------+--------------+----------------------+

                            Table 8: Direct Key




Schaad                  Expires December 30, 2015              [Page 34]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


13.1.1.1.  Security Considerations

   Lifetime, Length, Compromise

13.2.  Key Wrapping

   In key wrapping mode, the CEK is randomly generated and that key is
   then encrypted by a shared secret between the sender and the
   recipient.  All of the currently defined key wrapping algorithms for
   JOSE (and thus for COSE) are AE algorithms.  Key wrapping mode is
   considered to be superior to direct encryption if the system has any
   capability for doing random key generation.  This is because the
   shared key is used to wrap random data rather than data has some
   degree of organization and may in fact be repeating the same content.

   The COSE_encrypt structure for the recipient is organized as follows:

   o  The 'protected' field MUST be absent if the key wrap algorithm is
      an AE algorithm.

   o  The 'recipients' field is normally absent, but can be used.
      Applications MUST deal with a recipients field present, not being
      able to decrypt that recipient is an acceptable way of dealing
      with it.  Failing to process the message is not an acceptable way
      of dealing with it.

   o  The plain text to be encrypted is the key from next layer down
      (usually the content layer).

   o  At a minimum, the 'unprotected' field MUST contain the 'alg'
      parameter and SHOULD contain a parameter identifying the shared
      secret.

13.2.1.  AES Key Wrapping

   The AES Key Wrapping algorithm is defined in [RFC3394].  This
   algorithm uses an AES key to wrap a value that is a multiple of
   64-bits, as such it can be used to wrap a key for any of the content
   encryption algorithms defined in this document.  [CREF14] The
   algorithm requires a single fixed parameter, the initial value.  This
   is fixed to the value specified in Section 2.2.3.1 of [RFC3394].
   There are no public parameters that vary on a per invocation basis.









Schaad                  Expires December 30, 2015              [Page 35]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


        +--------+-------+----------+-----------------------------+
        | name   | value | key size | description                 |
        +--------+-------+----------+-----------------------------+
        | A128KW | -3    | 128      | AES Key Wrap w/ 128-bit key |
        |        |       |          |                             |
        | A192KW | -4    | 192      | AES Key Wrap w/ 192-bit key |
        |        |       |          |                             |
        | A256KW | -5    | 256      | AES Key Wrap w/ 256-bit key |
        +--------+-------+----------+-----------------------------+

                  Table 9: AES Key Wrap Algorithm Values

13.2.1.1.  Security Considerations for AES-KW

   There are no specific security considerations for this algorithm.

13.3.  Key Encryption

   Key Encryption mode is also called key transport mode in some
   standards.  Key Encryption mode differs from Key Wrap mode in that it
   uses an asymmetric encryption algorithm rather than a symmetric
   encryption algorithm to protect the key.  The only current Key
   Encryption mode algorithm supported is RSAES-OAEP.

   The COSE_encrypt structure for the recipient is organized as follows:

   o  The 'protected' field MUST be absent.

   o  The plain text to be encrypted is the key from next layer down
      (usually the content layer).

   o  At a minimum, the 'unprotected' field MUST contain the 'alg'
      parameter and SHOULD contain a parameter identifying the
      asymmetric key.

13.3.1.  RSA OAEP

               +----------+-------+-----------------------+
               | name     | value | description           |
               +----------+-------+-----------------------+
               | RSA-OAEP | -2    | RSAES OAEP w/ SHA-256 |
               +----------+-------+-----------------------+

                    Table 10: RSA OAEP Algorithm Values







Schaad                  Expires December 30, 2015              [Page 36]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


13.3.1.1.  Security Considerations for RSA OAEP

   A key size of 2048 bits or larger MUST be used with this algorithm.
   This key size corresponds roughly to the same strength as provided by
   a 128-bit symmetric encryption algorithm.

   It is highly recommended that checks on the key length be done before
   starting a decryption operation.  One potential denial of service
   operation is to provide encrypted objects using either abnormally
   long or oddly sized RSA modulus values.  Implementations SHOULD be
   able to encrypt and decrypt with modulus between 2048 and 16K bits in
   length.[CREF15] Applications can impose additional restrictions on
   the length of the modulus.

13.4.  Direct Key Agreement

   Direct Key Agreement derives a key from the shared secret computed by
   the key agreement operation.

   When direct key agreement mode is used, it SHOULD be the only mode
   used on the message.  This method creates the key directly and that
   makes it difficult to mix with additional recipients.

   The COSE_encrypt structure for the recipient is organized as follows:

   o  The 'protected' field MUST be absent.

   o  At a minimum, the 'unprotected' field MUST contain the 'alg'
      parameter and SHOULD contain a parameter identifying the
      recipient's asymmetric key.

   o  The 'unprotected' field MUST contain the 'epk' parameter.

13.4.1.  ECDH Ephemeral-Static

   This algorithm uses the key agreement algorithm specified in
   [RFC6090] combined with the KDF defined in Section 12.1 to generate
   the key to be used in encrypting/decrypting the next layer down.













Schaad                  Expires December 30, 2015              [Page 37]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   +---------+-------+--------------+----------------------------------+
   | name    | value | KDF          | description                      |
   +---------+-------+--------------+----------------------------------+
   | ECDH-ES | *     | HKDF -       | ECDH ES w/ HKDF - generate key   |
   |         |       | SHA-256      | directly                         |
   |         |       |              |                                  |
   | ECDH-SS | *     | HKDF -       | ECDH SS w/ HKDF - generate key   |
   |         |       | SHA-256      | directly                         |
   +---------+-------+--------------+----------------------------------+

                      Table 11: ECDH Algorithm Values

   +-------------+-------+----------+----------------------------------+
   | name        | label | type     | description                      |
   +-------------+-------+----------+----------------------------------+
   | ephemeral   | -1    | COSE_Key | Ephemeral Public key for the     |
   | key         |       |          | sender                           |
   |             |       |          |                                  |
   | static key  | -2    | COSE_Key | Static Public key for the sender |
   |             |       |          |                                  |
   | static key  | -3    | bstr     | Static Public key identifier for |
   | id          |       |          | the sender                       |
   +-------------+-------+----------+----------------------------------+

                    Table 12: ECDH Algorithm Parameters

13.5.  Key Agreement with KDF

   Key Agreement with Key Wrapping uses a randomly generated CEK.  The
   CEK is then encrypted using a Key Wrapping algorithm and a key
   derived from the shared secret computed by the key agreement
   algorithm.

   The COSE_encrypt structure for the recipient is organized as follows:

   o  The 'protected' field MUST be absent if the key wrap algorithm is
      an AE algorithm.  [CREF16]

   o  The plain text to be encrypted is the key from next layer down
      (usually the content layer).

   o  At a minimum, the 'unprotected' field MUST contain the 'alg'
      parameter, a parameter identifying the recipient asymmetric key,
      and a parameter with the sender's asymmetric public key.







Schaad                  Expires December 30, 2015              [Page 38]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


13.5.1.  ECDH ES + HKDF

   +----------------+-------+----------+-------------------------------+
   | name           | value | KDF      | description                   |
   +----------------+-------+----------+-------------------------------+
   | ECDH-ES+A128KW | *     | HKDF -   | ECDH ES w/ Concat KDF and AES |
   |                |       | SHA-256  | Key wrap w/ 128 bit key       |
   |                |       |          |                               |
   | ECDH-ES+A192KW | *     | HKDF -   | ECDH ES w/ Concat KDF and AES |
   |                |       | SHA-256  | Key wrap w/ 192 bit key       |
   |                |       |          |                               |
   | ECDH-ES+A256KW | *     | HKDF -   | ECDH ES w/ Concat KDF and AES |
   |                |       | SHA-256  | Key wrap w/ 256 bit key       |
   +----------------+-------+----------+-------------------------------+

13.6.  Password

   [CREF17]

13.6.1.  PBES2

   +--------------------+-------+--------------------------------------+
   | name               | value | description                          |
   +--------------------+-------+--------------------------------------+
   | PBES2-HS256+A128KW | *     | PBES2 w/ HMAC SHA-256 and AES Key    |
   |                    |       | wrap w/ 128 bit key                  |
   |                    |       |                                      |
   | PBES2-HS384+A192KW | *     | PBES2 w/ HMAC SHA-384 and AES Key    |
   |                    |       | wrap w/ 192 bit key                  |
   |                    |       |                                      |
   | PBES2-HS512+A256KW | *     | PBES2 w/ HMAC SHA-512 and AES Key    |
   |                    |       | wrap w/ 256 bit key                  |
   +--------------------+-------+--------------------------------------+

14.  Keys

   The COSE_Key object defines a way to hold a single key object, it is
   still required that the members of individual key types be defined.
   This section of the document is where we define an initial set of
   members for specific key types.

   For each of the key types, we define both public and private members.
   The public members are what is transmitted to others for their usage.
   We define private members mainly for the purpose of archival of keys
   by individuals.  However, there are some circumstances where private
   keys may be distributed by various entities in a protocol.  Examples
   include: Entities which have poor random number generation.
   Centralized key creation for multi-cast type operations.  Protocols



Schaad                  Expires December 30, 2015              [Page 39]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   where a shared secret is used as a bearer token for authorization
   purposes.

   Keys are identified by the 'kty' member of the COSE_Key object.  In
   this document we define four values for the member.

    +-----------+-------+--------------------------------------------+
    | name      | value | description                                |
    +-----------+-------+--------------------------------------------+
    | EC1       | 1     | Elliptic Curve Keys w/ X Coordinate only   |
    |           |       |                                            |
    | EC2       | 2     | Elliptic Curve Keys w/ X,Y Coordinate pair |
    |           |       |                                            |
    | RSA       | 3     | RSA Keys                                   |
    |           |       |                                            |
    | Symmetric | 4     | Symmetric Keys                             |
    +-----------+-------+--------------------------------------------+

                         Table 13: Key Type Values

14.1.  Elliptic Curve Keys

   Two different key structures are being defined for Elliptic Curve
   keys.  One version uses both an x and a y coordinate, potentially
   with point compression.  This is the traditional EC point
   representation that is used in [EC-in-PKIX].  The other version uses
   only the x coordinate as the y coordinate is either to be recomputed
   or not needed for the key agreement operation.  An example of this is
   [Curve25549].

14.1.1.  Single Coordinate Curves

   NOTE: This section represents at risk work depending on the ability
   to get good references for Curve24559 and Goldilocks.

   New versions of ECC have been targeted at variants where only a
   single value of the EC Point need to be transmitted.  This work is
   currently going on in the IRTF CFRG group.

   For EC keys with both coordinates, the 'kty' member is set to 1
   (EC1).  The members that are defined for this key type are:

   crv  contains an identifier of the curve to be used with the key.
      [CREF18] The curves defined in this document for this key type can
      be found in Table 14.  Other curves may be registered in the
      future and private curves can be used as well.





Schaad                  Expires December 30, 2015              [Page 40]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   x  contains the x coordinate for the EC point.  The integer is
      converted to an octet string as defined in [SEC1].  Zero byte MUST
      NOT be removed from the front of the octet string.  [CREF19]

   y  contains either the sign bit or the value of y coordinate for the
      EC point.  For the value, the integer is converted to an octet
      string as defined in [SEC1].  Zero bytes MUST NOT be removed from
      the front of the octet string.  For the sign bit, the value is
      true if the value of y is positive.

   d  contains the private key.

   For public keys, it is REQUIRED that 'crv' and 'x' be present in the
   structure.  For private keys, it is REQUIRED that 'crv' and 'd' be
   present in the structure.  It is RECOMMENDED that 'x' also be
   present, but it can be recomputed from the required elements and
   omitting it saves on space.

                +------------+-------+-------------------+
                | name       | value | description       |
                +------------+-------+-------------------+
                | Curve24559 | 1     | Provide reference |
                |            |       |                   |
                | Goldilocks | 2     | Provide reference |
                +------------+-------+-------------------+

                            Table 14: EC Curves

   +------+-------+-------+--------+-----------------------------------+
   | name | key   | value | type   | description                       |
   |      | type  |       |        |                                   |
   +------+-------+-------+--------+-----------------------------------+
   | crv  | 1     | -1    | int /  | EC Curve identifier - Taken from  |
   |      |       |       | tstr   | the COSE General Registry         |
   |      |       |       |        |                                   |
   | x    | 1     | -2    | bstr   | X Coordinate                      |
   |      |       |       |        |                                   |
   | d    | 1     | -4    | bstr   | Private key                       |
   +------+-------+-------+--------+-----------------------------------+

                        Table 15: EC Key Parameters

14.1.2.  Double Coordinate Curves

   The traditional way of sending EC curves has been to send either both
   the x and y coordinates, or the x coordinate and a sign bit for the y
   coordinate.  The latter encoding has not been recommend in the IETF
   due to potential IPR issues with Certicom.  However, for operations



Schaad                  Expires December 30, 2015              [Page 41]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   in constrained environments, the ability to shrink a message by not
   sending the y coordinate is potentially useful.

   For EC keys with both coordinates, the 'kty' member is set to 2
   (EC2).  The members that are defined for this key type are:

   crv  contains an identifier of the curve to be used with the key.
      The curves defined in this document for this key type can be found
      in Table 16.  Other curves may be registered in the future and
      private curves can be used as well.

   x  contains the x coordinate for the EC point.  The integer is
      converted to an octet string as defined in [SEC1].  Zero byte MUST
      NOT be removed from the front of the octet string.  [CREF20]

   y  contains either the sign bit or the value of y coordinate for the
      EC point.  For the value, the integer is converted to an octet
      string as defined in [SEC1].  Zero bytes MUST NOT be removed from
      the front of the octet string.  For the sign bit, the value is
      true if the value of y is positive.

   d  contains the private key.

   For public keys, it is REQUIRED that 'crv', 'x' and 'y' be present in
   the structure.  For private keys, it is REQUIRED that 'crv' and 'd'
   be present in the structure.  It is RECOMMENDED that 'x' and 'y' also
   be present, but they can be recomputed from the required elements and
   omitting them saves on space.

             +-------+-------+-------------------------------+
             | name  | value | description                   |
             +-------+-------+-------------------------------+
             | P-256 | 1     | NIST P-256 also known as .... |
             |       |       |                               |
             | P-384 | 2     | NIST P-384 also known as .... |
             |       |       |                               |
             | P-521 | 3     | NIST P-512 also known as .... |
             +-------+-------+-------------------------------+

                            Table 16: EC Curves











Schaad                  Expires December 30, 2015              [Page 42]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   +------+-------+-------+---------+----------------------------------+
   | name | key   | value | type    | description                      |
   |      | type  |       |         |                                  |
   +------+-------+-------+---------+----------------------------------+
   | crv  | 2     | -1    | int /   | EC Curve identifier - Taken from |
   |      |       |       | tstr    | the COSE General Registry        |
   |      |       |       |         |                                  |
   | x    | 2     | -2    | bstr    | X Coordinate                     |
   |      |       |       |         |                                  |
   | y    | 2     | -3    | bstr /  | Y Coordinate                     |
   |      |       |       | bool    |                                  |
   |      |       |       |         |                                  |
   | d    | 2     | -4    | bstr    | Private key                      |
   +------+-------+-------+---------+----------------------------------+

                        Table 17: EC Key Parameters

14.2.  RSA Keys

          +-------+-------+-------+----------------------------+
          | name  | value | type  | description                |
          +-------+-------+-------+----------------------------+
          | n     | -1    | bstr  | Modulus Parameter          |
          |       |       |       |                            |
          | e     | -2    | int   | Exponent Parameter         |
          |       |       |       |                            |
          | d     | -3    | bstr  | Private Exponent Parameter |
          |       |       |       |                            |
          | p     | -4    | bstr  | First Prime Factor         |
          |       |       |       |                            |
          | q     | -5    | bstr  | Second Prime Factor        |
          |       |       |       |                            |
          | dp    | -6    | bstr  | First Factor CRT Exponent  |
          |       |       |       |                            |
          | dq    | -7    | bstr  | Second Factor CRT Exponent |
          |       |       |       |                            |
          | qi    | -8    | bstr  | First CRT Coefficient      |
          |       |       |       |                            |
          | other | -9    | array | Other Primes Info          |
          |       |       |       |                            |
          | r     | -10   | bstr  | Prime Factor               |
          |       |       |       |                            |
          | d     | -11   | bstr  | Factor CRT Exponent        |
          |       |       |       |                            |
          | t     | -12   | bstr  | Factor CRT Coefficient     |
          +-------+-------+-------+----------------------------+

                       Table 18: RSA Key Parameters



Schaad                  Expires December 30, 2015              [Page 43]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


14.3.  Symmetric Keys

   Occasionally it is required that a symmetric key be transported
   between entities.  This key structure allows for that to happen.

   For symmetric keys, the 'kty' member is set to 3 (Symmetric).  The
   member that is defined for this key type is:

   k  contains the value of the key.

   This key structure contains only private key information, care must
   be taken that it is never transmitted accidentally.  For public keys,
   there are no required fields.  For private keys, it is REQUIRED that
   'k' be present in the structure.

                   +------+-------+------+-------------+
                   | name | value | type | description |
                   +------+-------+------+-------------+
                   | k    | -1    | bstr | Key Value   |
                   +------+-------+------+-------------+

                    Table 19: Symmetric Key Parameters

15.  IANA Considerations

15.1.  CBOR Tag assignment

   It is requested that IANA assign a new tag from the "Concise Binary
   Object Representation (CBOR) Tags" registry.  It is requested that
   the tag be assigned in the 0 to 23 value range.

   Tag Value: TBD1

   Data Item: COSE_Msg

   Semantics: COSE security message.

15.2.  COSE Object Labels Registry

   It is requested that IANA create a new registry entitled "COSE Object
   Labels Registry".  [CREF21]

   This table is initially populated by the table in Table 1.








Schaad                  Expires December 30, 2015              [Page 44]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


15.3.  COSE Header Label Table

   It is requested that IANA create a new registry entitled "COSE Header
   Labels".

   The columns of the registry are:

   name  The name is present to make it easier to refer to and discuss
      the registration entry.  The value is not used in the protocol.
      Names are to be unique in the table.

   label  This is the value used for the label.  The label can be either
      an integer or a string.  Registration in the table is based on the
      value of the label requested.  Integer values between 1 and 255
      and strings of length 1 are designated as Standards Track Document
      required.  Integer values from 256 to 65535 and strings of length
      2 are designated as Specification Required.  Integer values of
      greater than 65535 and strings of length greater than 2 are
      designated as first come first server.  Integer values in the
      range -1 to -65536 are delegated to the "COSE Header Algorithm
      Label" registry.  Integer values beyond -65536 are marked as
      private use.

   value  This contains the CBOR type for the value portion of the
      label.

   value registry  This contains a pointer to the registry used to
      contain values where the set is limited.

   description  This contains a brief description of the header field.

   specification  This contains a pointer to the specification defining
      the header field (where public).

   The initial contents of the registry can be found in Table 2.  The
   specification column for all rows in that table should be this
   document.

   Additionally, the value of 0 is to be marked as 'Reserved'.

   NOTE: Need to review the range assignments.  It does not necessarily
   make sense as specification required uses 1 byte positive integers
   and 2 byte strings.








Schaad                  Expires December 30, 2015              [Page 45]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


15.4.  COSE Header Algorithm Label Table

   It is requested that IANA create a new registry entitled "COSE Header
   Algorithm Labels".

   The columns of the registry are:

   name  The name is present to make it easier to refer to and discuss
      the registration entry.  The value is not used in the protocol.

   algorithm  The algorithm(s) that this registry entry is used for.
      This value is taken from the "COSE Algorithm Value" registry.
      Multiple algorithms can be specified in this entry.  For the
      table, the algorithm, label pair MUST be unique.

   label  This is the value used for the label.  The label is an integer
      in the range of -1 to -65536.

   value  This contains the CBOR type for the value portion of the
      label.

   value registry  This contains a pointer to the registry used to
      contain values where the set is limited.

   description  This contains a brief description of the header field.

   specification  This contains a pointer to the specification defining
      the header field (where public).

   The initial contents of the registry can be found in Appendix D.  The
   specification column for all rows in that table should be this
   document.

15.5.  COSE Algorithm Registry

   It is requested that IANA create a new registry entitled "COSE
   Algorithm Registry".

   The columns of the registry are:

   value  The value to be used to identify this algorithm.  Algorithm
      values MUST be unique.  The value can be a positive integer, a
      negative integer or a string.  Integer values between 0 and 255
      and strings of length 1 are designated as Standards Track Document
      required.  Integer values from 256 to 65535 and strings of length
      2 are designated as Specification Required.  Integer values of
      greater than 65535 and strings of length greater than 2 are
      designated as first come first server.  Integer values in the



Schaad                  Expires December 30, 2015              [Page 46]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


      range -1 to -65536 are delegated to the "COSE Header Algorithm
      Label" registry.  Integer values beyond -65536 are marked as
      private use.

   description  A short description of the algorithm.

   specification  A document where the algorithm is defined (if publicly
      available).

   The initial contents of the registry can be found in the following:
   Table 6, Table 5, Table 3, Table 4, Table 8, Table 9, Table 10.  The
   specification column for all rows in that table should be this
   document.

15.6.  COSE Key Map Registry

   It is requested that IANA create a new registry entitled "COSE Key
   Map Registry".

   The columns of the registry are:

   name  This is a descriptive name that enables easier reference to the
      item.  It is not used in the encoding.

   label  The value to be used to identify this algorithm.  Algorithm
      labels MUST be unique.  The label can be a positive integer, a
      negative integer or a string.  Integer values between 0 and 255
      and strings of length 1 are designated as Standards Track Document
      required.  Integer values from 256 to 65535 and strings of length
      2 are designated as Specification Required.  Integer values of
      greater than 65535 and strings of length greater than 2 are
      designated as first come first server.  Integer values in the
      range -1 to -65536 are used for key parameters specific to a
      single algorithm delegated to the "COSE Key Parameter Label"
      registry.  Integer values beyond -65536 are marked as private use.

   CBOR Type  This field contains the CBOR type for the field

   registry  This field denotes the registry that values come from, if
      one exists.

   description  This field contains a brief description for the field

   specification  This contains a pointer to the public specification
      for the field if one exists






Schaad                  Expires December 30, 2015              [Page 47]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   This registry will be initially populated by the values in
   Section 7.1.  The specification column for all of these entries will
   be this document.

15.7.  COSE Key Parameter Registry

   It is requested that IANA create a new registry "COSE Key
   Parameters".

   The columns of the table are:

   key type  This field contains a descriptive string of a key type.
      This should be a value that is in the COSE General Values table
      and is placed in the 'kty' field of a COSE Key structure.

   name  This is a descriptive name that enables easier reference to the
      item.  It is not used in the encoding.

   label  The label is to be unique for every value of key type.  The
      range of values is from -256 to -1.  Labels are expected to be re-
      used for different keys.

   CBOR type  This field contains the CBOR type for the field

   description  This field contains a brief description for the field

   specification  This contains a pointer to the public specification
      for the field if one exists

   This registry will be initially populated by the values in
   Appendix G.  The specification column for all of these entries will
   be this document.

15.8.  Media Type Registration

15.8.1.  COSE Security Message

   This section registers the "application/cose" and "application/
   cose+cbor" media types in the "Media Types" registry.  [CREF22] These
   media types are used to indicate that the content is a COSE_MSG.

      Type name: application

      Subtype name: cose

      Required parameters: N/A

      Optional parameters: N/A



Schaad                  Expires December 30, 2015              [Page 48]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


      Encoding considerations: binary

      Security considerations: See the Security Considerations section
      of RFC TBD.

      Interoperability considerations: N/A

      Published specification: RFC TBD

      Applications that use this media type: To be identified

      Fragment identifier considerations: N/A

      Additional information:

      *  Magic number(s): N/A

      *  File extension(s): cbor

      *  Macintosh file type code(s): N/A

      Person & email address to contact for further information:
      iesg@ietf.org

      Intended usage: COMMON

      Restrictions on usage: N/A

      Author: Jim Schaad, ietf@augustcellars.com

      Change Controller: IESG

      Provisional registration?  No

      Type name: application

      Subtype name: cose+cbor

      Required parameters: N/A

      Optional parameters: N/A

      Encoding considerations: binary

      Security considerations: See the Security Considerations section
      of RFC TBD.

      Interoperability considerations: N/A



Schaad                  Expires December 30, 2015              [Page 49]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


      Published specification: RFC TBD

      Applications that use this media type: To be identified

      Fragment identifier considerations: N/A

      Additional information:

      *  Magic number(s): N/A

      *  File extension(s): cbor

      *  Macintosh file type code(s): N/A

      Person & email address to contact for further information:
      iesg@ietf.org

      Intended usage: COMMON

      Restrictions on usage: N/A

      Author: Jim Schaad, ietf@augustcellars.com

      Change Controller: IESG

      Provisional registration?  No

15.8.2.  COSE Key media type

   This section registers the "application/cose+json" and "application/
   cose-set+json" media typesin the "Media Types" registry.  These media
   types are used to indicate, respectively, that content is a COSE_Key
   or COSE_KeySet object.

      Type name: application

      Subtype name: cose-key+cbor

      Required parameters: N/A

      Optional parameters: N/A

      Encoding considerations: binary

      Security considerations: See the Security Considerations section
      of RFC TBD.

      Interoperability considerations: N/A



Schaad                  Expires December 30, 2015              [Page 50]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


      Published specification: RFC TBD

      Applications that use this media type: To be identified

      Fragment identifier considerations: N/A

      Additional information:

      *  Magic number(s): N/A

      *  File extension(s): cbor

      *  Macintosh file type code(s): N/A

      Person & email address to contact for further information:
      iesg@ietf.org

      Intended usage: COMMON

      Restrictions on usage: N/A

      Author: Jim Schaad, ietf@augustcellars.com

      Change Controller: IESG

      Provisional registration?  No

      Type name: application

      Subtype name: cose-key-set+cbor

      Required parameters: N/A

      Optional parameters: N/A

      Encoding considerations: binary

      Security considerations: See the Security Considerations section
      of RFC TBD.

      Interoperability considerations: N/A

      Published specification: RFC TBD

      Applications that use this media type: To be identified

      Fragment identifier considerations: N/A




Schaad                  Expires December 30, 2015              [Page 51]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


      Additional information:

      *  Magic number(s): N/A

      *  File extension(s): cbor

      *  Macintosh file type code(s): N/A

      Person & email address to contact for further information:
      iesg@ietf.org

      Intended usage: COMMON

      Restrictions on usage: N/A

      Author: Jim Schaad, ietf@augustcellars.com

      Change Controller: IESG

      Provisional registration?  No

16.  Security Considerations

   There are security considerations:

   1.  Protect private keys

   2.  MAC messages with more than one recipient means one cannot figure
       out who sent the message

   3.  Use of direct key with other recipient structures hands the key
       to other recipients.

   4.  Use of direct ECDH direct encryption is easy for people to leak
       information on if there are other recipients in the message.

   5.  Considerations about protected vs unprotected header fields.

17.  References

17.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC7049]  Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", RFC 7049, October 2013.




Schaad                  Expires December 30, 2015              [Page 52]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


17.2.  Informative References

   [AES-GCM]  Dworkin, M., "NIST Special Publication 800-38D:
              Recommendation for Block Cipher Modes of Operation:
              Galois/Counter Mode (GCM) and GMAC.", Nov 2007.

   [DSS]      U.S. National Institute of Standards and Technology,
              "Digital Signature Standard (DSS)", July 2013.

   [I-D.greevenbosch-appsawg-cbor-cddl]
              Vigano, C., Birkholz, H., and R. Sun, "CBOR data
              definition language: a notational convention to express
              CBOR data structures.", draft-greevenbosch-appsawg-cbor-
              cddl-05 (work in progress), March 2015.

   [I-D.mcgrew-aead-aes-cbc-hmac-sha2]
              McGrew, D., Foley, J., and K. Paterson, "Authenticated
              Encryption with AES-CBC and HMAC-SHA", draft-mcgrew-aead-
              aes-cbc-hmac-sha2-05 (work in progress), July 2014.

   [RFC2104]  Krawczyk, H., Bellare, M., and R. Canetti, "HMAC: Keyed-
              Hashing for Message Authentication", RFC 2104, February
              1997.

   [RFC3394]  Schaad, J. and R. Housley, "Advanced Encryption Standard
              (AES) Key Wrap Algorithm", RFC 3394, September 2002.

   [RFC3447]  Jonsson, J. and B. Kaliski, "Public-Key Cryptography
              Standards (PKCS) #1: RSA Cryptography Specifications
              Version 2.1", RFC 3447, February 2003.

   [RFC3610]  Whiting, D., Housley, R., and N. Ferguson, "Counter with
              CBC-MAC (CCM)", RFC 3610, September 2003.

   [RFC4231]  Nystrom, M., "Identifiers and Test Vectors for HMAC-SHA-
              224, HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-512", RFC
              4231, December 2005.

   [RFC5480]  Turner, S., Brown, D., Yiu, K., Housley, R., and T. Polk,
              "Elliptic Curve Cryptography Subject Public Key
              Information", RFC 5480, March 2009.

   [RFC5652]  Housley, R., "Cryptographic Message Syntax (CMS)", STD 70,
              RFC 5652, September 2009.

   [RFC5752]  Turner, S. and J. Schaad, "Multiple Signatures in
              Cryptographic Message Syntax (CMS)", RFC 5752, January
              2010.



Schaad                  Expires December 30, 2015              [Page 53]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   [RFC5869]  Krawczyk, H. and P. Eronen, "HMAC-based Extract-and-Expand
              Key Derivation Function (HKDF)", RFC 5869, May 2010.

   [RFC5990]  Randall, J., Kaliski, B., Brainard, J., and S. Turner,
              "Use of the RSA-KEM Key Transport Algorithm in the
              Cryptographic Message Syntax (CMS)", RFC 5990, September
              2010.

   [RFC6090]  McGrew, D., Igoe, K., and M. Salter, "Fundamental Elliptic
              Curve Cryptography Algorithms", RFC 6090, February 2011.

   [RFC6151]  Turner, S. and L. Chen, "Updated Security Considerations
              for the MD5 Message-Digest and the HMAC-MD5 Algorithms",
              RFC 6151, March 2011.

   [RFC7159]  Bray, T., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, March 2014.

   [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web
              Signature (JWS)", RFC 7515, May 2015.

   [RFC7516]  Jones, M. and J. Hildebrand, "JSON Web Encryption (JWE)",
              RFC 7516, May 2015.

   [RFC7517]  Jones, M., "JSON Web Key (JWK)", RFC 7517, May 2015.

   [RFC7518]  Jones, M., "JSON Web Algorithms (JWA)", RFC 7518, May
              2015.

   [SEC1]     Standards for Efficient Cryptography Group, "SEC 1:
              Elliptic Curve Cryptography", May 2009.

   [SP800-56A]
              Barker, E., Chen, L., Roginsky, A., and M. Smid, "NIST
              Special Publication 800-56A: Recommendation for Pair-Wise
              Key Establishment Schemes Using Discrete Logarithm
              Cryptography", May 2013.

Appendix A.  AEAD and AE algorithms

   The set of encryption algorithms that can be used with this
   specification is restricted to authenticated encryption (AE) and
   authenticated encryption with additional data (AEAD) algorithms.
   This means that there is a strong check that the data decrypted by
   the recipient is the same as what was encrypted by the sender.
   Encryption modes such as counter have no check on this at all.  The
   CBC encryption mode had a weak check that the data is correct, given
   a random key and random data, the CBC padding check will pass one out



Schaad                  Expires December 30, 2015              [Page 54]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   of 256 times.  There have been several times that a normal encryption
   mode has been combined with an integrity check to provide a content
   encryption mode that does provide the necessary authentication.  AES-
   GCM [AES-GCM], AES-CCM [RFC3610], AES-CBC-HMAC
   [I-D.mcgrew-aead-aes-cbc-hmac-sha2] are examples of these composite
   modes.

   PKCS v1.5 RSA key transport does not qualify as an AE algorithm.
   There are only three bytes in the encoding that can be checked as
   having decrypted correctly, the rest of the content can only be
   probabilistically checked as having decrypted correctly.  For this
   reason, PKCS v1.5 RSA key transport MUST NOT be used with this
   specification.  RSA-OAEP was designed to have the necessary checks
   that that content correctly decrypted and does qualify as an AE
   algorithm.

   When dealing with authenticated encryption algorithms, there is
   always some type of value that needs to be checked to see if the
   authentication level has passed.  This authentication value may be:

   o  A separately generated tag computed by both the encrypter and
      decrypter and then compared by the decryptor.  This tag value may
      be either placed at the end of the cipher text (the decision we
      made) or kept separately (the decision made by the JOSE working
      group).  This is the approach followed by AES-GCM [AES-GCM] and
      AES-CCM [RFC3610].

   o  A fixed value which is part of the encoded plain text.  This is
      the approach followed by the AES key wrap algorithm [RFC3394].

   o  A computed value is included as part of the encoded plain text.
      The computed value is then checked by the decryptor using the same
      computation path.  This is the approach followed by RSAES-OAEP
      [RFC3447].

Appendix B.  Three Levels of Recipient Information

   All of the currently defined Key Management methods only use two
   levels of the COSE_Encrypt structure.  The first level is the message
   content and the second level is the content key encryption.  However,
   if one uses a key management technique such as RSA-KEM (see
   Appendix A of RSA-KEM [RFC5990], then it make sense to have three
   levels of the COSE_Encrypt structure.

   These levels would be:

   o  Level 0: The content encryption level.  This level contains the
      payload of the message.



Schaad                  Expires December 30, 2015              [Page 55]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   o  Level 1: The encryption of the CEK by a KEK.

   o  Level 2: The encryption of a long random secret using an RSA key
      and a key derivation function to convert that secret into the KEK.

   This is an example of what a triple layer message would look like.
   The message has the following layers:

   o  Level 0: Has a content encrypted with AES-GCM using a 128-bit key.

   o  Level 1: Uses the AES Key wrap algorithm with a 128-bit key.

   o  Level 3: Uses ECDH Ephemeral-Static direct to generate the level 1
      key.

   In effect this example is a decomposed version of using the ECDH-
   ES+A128KW algorithm.


































Schaad                  Expires December 30, 2015              [Page 56]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   {
     1: 2,
     2: h'a10101',
     3: {
       -1: h'02d1f7e6f26c43d4868d87ce'
     },
     4: h'64f84d913ba60a76070a9a48f26e97e863e285295a44320878caceb076
   3a334806857c67',
     9: [
       {
         3: {
           1: -3
         },
         4: h'5a15dbf5b282ecb31a6074ee3815c252405dd7583e078188',
         9: [
           {
             3: {
               1: "ECDH-ES",
               5: "meriadoc.brandybuck@buckland.example",
               4: {
                 1: 1,
                 -1: 4,
                 -2: h'b2add44368ea6d641f9ca9af308b4079aeb519f11e9b8
   a55a600b21233e86e68',
                 -3: h'1a2cf118b9ee6895c8f415b686d4ca1cef362d4a7630a
   31ef6019c0c56d33de0'
               }
             }
           }
         ]
       }
     ]
   }

Appendix C.  Examples

   The examples can be found at https://github.com/cose-wg/Examples.  I
   am currently still in the process of getting the examples up there
   along with some control information for people to be able to check
   and reproduce the examples.

C.1.  Direct MAC

   This example has some features that are in questions but not yet
   incorporated in the document.

   To make it easier to read, this uses CBOR's diagnostic notation
   rather than a binary dump.



Schaad                  Expires December 30, 2015              [Page 57]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   This example is uses HMAC with SHA-256 as the digest algorithm.  The
   key management is uses two static ECDH keys along with HKDF to
   directly derive the key used in the HMAC operation.

   {
     1: 3,
     2: h'a10104',
     4: h'546869732069732074686520636f6e74656e742e',
     10: h'2ba937ca03d76c3dbad30cfcbaeef586f9c0f9ba616ad67e9205d3857
   6ad9930',
     9: [
       {
         3: {
           1: "ECDH-SS",
           5: "meriadoc.brandybuck@buckland.example",
           "spk": {
             "kid": "peregrin.took@tuckborough.example"
           },
           "apu": h'4d8553e7e74f3c6a3a9dd3ef286a8195cbf8a23d19558ccf
   ec7d34b824f42d92bd06bd2c7f0271f0214e141fb779ae2856abf585a58368b01
   7e7f2a9e5ce4db5'
         }
       }
     ]
   }

C.2.  Wrapped MAC

   This example has some features that are in questions but not yet
   incorporated in the document.

   To make it easier to read, this uses CBOR's diagnostic notation
   rather than a binary dump.

   This example uses AES-128-MAC truncated to 64-bits as the digest
   algorithm.  It uses AES-256 Key wrap for the key management algorithm
   wrapping the 128-bit key used for the digest algorithm.














Schaad                  Expires December 30, 2015              [Page 58]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   {
     1: 3,
     2: h'a1016e4145532d3132382d4d41432d3634',
     4: h'546869732069732074686520636f6e74656e742e',
     10: h'6d1fa77b2dd9146a',
     9: [
       {
         3: {
           1: -5,
           5: "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
         },
         4: h'711ab0dc2fc4585dce27effa6781c8093eba906f227b6eb0'
       }
     ]
   }

C.3.  Multi-recipient MAC message

   This example has some features that are in questions but not yet
   incorporated in the document.

   To make it easier to read, this uses CBOR's diagnostic notation
   rather than a binary dump.

   This example uses HMAC with SHA-256 for the digest algorithm.  There
   are three different key management techniques applied:

   o  An ephemeral static ECDH key agreement operation using AES-128 key
      wrap on the digest key.

   o  Key transport using RSA-OAEP with SHA-256 for the hash and the mfg
      function operations.

   o  AES 256-bit Key wrap using a pre-shared secret.

   {
     1: 3,
     2: h'a10104',
     4: h'546869732069732074686520636f6e74656e742e',
     10: h'7aaa6e74546873061f0a7de21ff0c0658d401a68da738dd8937486519
   83ce1d0',
     9: [
       {
         3: {
           1: "ECDH-ES+A128KW",
           5: h'62696c626f2e62616767696e7340686f626269746f6e2e657861
   6d706c65',
           4: {



Schaad                  Expires December 30, 2015              [Page 59]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


             1: 1,
             -1: 5,
             -2: h'43b12669acac3fd27898ffba0bcd2e6c366d53bc4db71f909
   a759304acfb5e18cdc7ba0b13ff8c7636271a6924b1ac63c02688075b55ef2d61
   3574e7dc242f79c3',
             -3: h'812dd694f4ef32b11014d74010a954689c6b6e8785b333d1a
   b44f22b9d1091ae8fc8ae40b687e5cfbe7ee6f8b47918a07bb04e9f5b1a51a334
   a16bc09777434113'
           }
         },
         4: h'1b120c848c7f2f8943e402cbdbdb58efb281753af4169c70d0126c
   0d16436277160821790ef4fe3f'
       },
       {
         3: {
           1: -2,
           5: h'62696c626f2e62616767696e7340686f626269746f6e2e657861
   6d706c65'
         },
         4: h'46c4f88069b650909a891e84013614cd58a3668f88fa18f3852940
   a20b35098591d3aacf91c125a2595cda7bee75a490579f0e2f20fd6bc956623bf
   de3029c318f82c426dac3463b261c981ab18b72fe9409412e5c7f2d8f2b5abaf7
   80df6a282db033b3a863fa957408b81741878f466dcc437006ca21407181a016c
   a608ca8208bd3c5a1ddc828531e30b89a67ec6bb97b0c3c3c92036c0cb84aa0f0
   ce8c3e4a215d173bfa668f116ca9f1177505afb7629a9b0b5e096e81d37900e06
   f561a32b6bc993fc6d0cb5d4bb81b74e6ffb0958dac7227c2eb8856303d989f93
   b4a051830706a4c44e8314ec846022eab727e16ada628f12ee7978855550249cc
   b58'
       },
       {
         3: {
           1: -5,
           5: "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
         },
         4: h'0b2c7cfce04e98276342d6476a7723c090dfdd15f9a518e7736549
   e998370695e6d6a83b4ae507bb'
       }
     ]
   }

C.4.  Direct ECDH

   This example has some features that are in questions but not yet
   incorporated in the document.

   To make it easier to read, this uses CBOR's diagnostic notation
   rather than a binary dump.




Schaad                  Expires December 30, 2015              [Page 60]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   Encoded in CBOR - 216 bytes, content is 14 bytes long

   {
     1: 2,
     2: h'a10101',
     3: {
       -1: h'c9cf4df2fe6c632bf7886413'
     },
     4: h'45fce2814311024d3a479e7d3eed063850f3f0b9f3f948677e3ae9869b
   cf9ff4e1763812',
     9: [
       {
         3: {
           1: "ECDH-ES",
           5: "meriadoc.brandybuck@buckland.example",
           4: {
             1: 1,
             -1: 4,
             -2: h'98f50a4ff6c05861c8860d13a638ea56c3f5ad7590bbfbf05
   4e1c7b4d91d6280',
             -3: h'f01400b089867804b8e9fc96c3932161f1934f4223069170d
   924b7e03bf822bb'
           }
         }
       }
     ]
   }

C.5.  Single Signature

   This example has some features that are in questions but not yet
   cooperated in the document.

   To make it easier to read, this uses CBOR's diagnostic notation
   rather than a binary dump.
















Schaad                  Expires December 30, 2015              [Page 61]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   {
     1: 1,
     4: h'546869732069732074686520636f6e74656e742e',
     5: [
       {
         2: h'a20165505333383405781e62696c626f2e62616767696e7340686f
   626269746f6e2e6578616d706c65',
         6: h'7c4656acc11ffe98e2ea4babff6d177b2e5a088da2034e0096a6f8
   8cd50a36ed971a83f42244d40d97043d080f43dff7a7c0eb5bc322a3d3d18826c
   e755d82293ecc22a3919857bc60c456017ca87b7d662971687aac7315f68c9f52
   d95c24f72418b7eb07cd432875ab42658bde269534da10d8572c2d5340be660cf
   cf7f6cceaf5cd02ddfdac1cf18930199c0e8721c2d71c646516cc3da79f6d555e
   89825803ef1ecf7fb411cea24d15610f56d33af0d1a7e68a2e07e9790326f01f2
   9ad7210e317c637f7cbd16f8cd32a9959dfd419de697dfa3145aa7cd1019072f9
   5c3d041bd8d47de09abbce16117733378e1593fe2439454cd907f88aabc664d26
   298'
       }
     ]
   }

C.6.  Multiple Signers

   This example has some features that are in questions but not yet
   cooperated in the document.

   To make it easier to read, this uses CBOR's diagnostic notation
   rather than a binary dump.

   Encoded in CBOR - 491 bytes, content is 14 bytes long






















Schaad                  Expires December 30, 2015              [Page 62]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   {
     1: 1,
     4: h'546869732069732074686520636f6e74656e742e',
     5: [
       {
         2: h'a10129',
         3: {
           5: "bilbo.baggins@hobbiton.example"
         },
         6: h'93f83aaf872d9fc8c7cad30437dc8fed33a673ec5d4d8e004f16d9
   ed236f6b2ce4cc15ea48aef8c5c0c4eab8ed539a4eae27ac9d5f5e6ef7b9cfb02
   133f3f4ad7062db989fcff6ecc67c13624418224416116ff0a67d1a133d27bb79
   1a1893a03c683d84def6742059c63670c2738efc2dde8eac364b4d714c60db424
   ffbfb098c579c6538daa2a9fc5be2d829a82c148c9913a537f98ceb469b78fae2
   02531353fe740ba5ef3eb01377b01e7b27f0ffad35cdd3ef8d2c010a60331b2ac
   2924183022425a1a3a4495adb03d67a92fb420bd408cb0c81d5bac694d1568f11
   2ec8bbab834ca02b098c3b8f4975d75114bb001408252875d14bc1516f843b9fa
   bb0'
       },
       {
         3: {
           1: -9,
           5: "bilbo.baggins@hobbiton.example"
         },
         6: h'5bacf5cf8e84051f01030a688c9c5dfa867173a6038e6655374ce3
   e07de671d16dbe8cee3e965f2492d7850debf63b64a93e8fe7062ea536f3f165a
   e34d5852f5001f1a1caffc52b05aec184da5a4148e305d87d0ef68642701b05c6
   dde19669a1ffb39158a8fa4d51e95a2557b86da7a64a719a1422568dec9ec699d
   af93a58eab268'
       }
     ]
   }

Appendix D.  COSE Header Algorithm Label Table

















Schaad                  Expires December 30, 2015              [Page 63]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   +------+-------------------+-------+----------+---------------------+
   | name | algorithm         | label | CBOR     | description         |
   |      |                   |       | type     |                     |
   +------+-------------------+-------+----------+---------------------+
   | apu  | ECDH              | -1    | bstr     |                     |
   |      |                   |       |          |                     |
   | apv  | ECDH              | -2    | bstr     |                     |
   |      |                   |       |          |                     |
   | epk  | ECDH              | -3    | COSE_Key | contains a COSE key |
   |      |                   |       |          | not a JWK key       |
   |      |                   |       |          |                     |
   | iv   | A128GCMKW,        | -1    | bstr     |                     |
   |      | A192GCMKW,        |       |          |                     |
   |      | A256GCMKW         |       |          |                     |
   |      |                   |       |          |                     |
   | iv   | A128GCM, A192GCM, | -1    | bstr     |                     |
   |      | A256GCM           |       |          |                     |
   |      |                   |       |          |                     |
   | p2c  | PBE               | -1    | int      |                     |
   |      |                   |       |          |                     |
   | p2s  | PBE               | -2    | bstr     |                     |
   +------+-------------------+-------+----------+---------------------+

Appendix E.  COSE Algorithm Name Values

   This table contains all of the defined algorithms for COSE.

          +-----------+-------+---------------------------------+
          | name      | value | description                     |
          +-----------+-------+---------------------------------+
          | RS256     | *     | RSASSA-v1.5 w/ SHA-256          |
          |           |       |                                 |
          | RS384     | *     | RSASSA-v1.5 w/ SHA-384          |
          |           |       |                                 |
          | RSA512    | *     | RSASSA-v1.5 w/ SHA-256          |
          |           |       |                                 |
          | RSA1_5    | *     | RSAES v1.5 Key Encryption       |
          |           |       |                                 |
          | A128GCMKW | *     | AES GCM Key Wrap w/ 128 bit key |
          |           |       |                                 |
          | A192GCMKW | *     | AES GCM Key Wrap w/ 192 bit key |
          |           |       |                                 |
          | A256GCMKW | *     | AES GCM Key Wrap w/ 256 bit key |
          +-----------+-------+---------------------------------+







Schaad                  Expires December 30, 2015              [Page 64]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


Appendix F.  COSE General Values

                +------+--------+-------------------------+
                | name | number | description             |
                +------+--------+-------------------------+
                | EC   | 1      | Elliptic Curve key Type |
                |      |        |                         |
                | RSA  | 2      | RSA Key type            |
                |      |        |                         |
                | oct  | 3      | Octet Key type          |
                |      |        |                         |
                | P256 | 4      | EC Curve P256 (NIST)    |
                |      |        |                         |
                | P521 | 5      | EC Curve P521 (NIST)    |
                +------+--------+-------------------------+

Appendix G.  COSE Key Parameter Labels

   This table contains a list of all of the parameters that were defined
   by the JOSE document set for a specific key type.  In the table is
   the data value type to be used for CBOR as well as the integer value
   that can be used as a replacement for the name in order to further
   decrease the size of the sent item.  Parameters dealing with keys




























Schaad                  Expires December 30, 2015              [Page 65]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


   +-------+------+-------+---------+--------------------+-------------+
   | key   | name | label | CBOR    | registry           | description |
   | type  |      |       | type    |                    |             |
   +-------+------+-------+---------+--------------------+-------------+
   | EC    | crv  | -1    | int /   | Pull from general  |             |
   |       |      |       | tstr    | value registry     |             |
   |       |      |       |         |                    |             |
   | EC    | x    | -2    | bstr    |                    |             |
   |       |      |       |         |                    |             |
   | EC    | y    | -3    | bstr    |                    |             |
   |       |      |       |         |                    |             |
   | EC    | d    | -4    | bstr    |                    |             |
   |       |      |       |         |                    |             |
   | RSA   | e    | -1    | bstr    |                    |             |
   |       |      |       |         |                    |             |
   | RSA   | n    | -2    | bstr    |                    |             |
   |       |      |       |         |                    |             |
   | RSA   | d    | -3    | bstr    |                    |             |
   |       |      |       |         |                    |             |
   | RSA   | p    | -4    | bstr    |                    |             |
   |       |      |       |         |                    |             |
   | RSA   | q    | -5    | bstr    |                    |             |
   |       |      |       |         |                    |             |
   | RSA   | dp   | -6    | bstr    |                    |             |
   |       |      |       |         |                    |             |
   | RSA   | dq   | -7    | bstr    |                    |             |
   |       |      |       |         |                    |             |
   | RSA   | qi   | -8    | bstr    |                    |             |
   |       |      |       |         |                    |             |
   | RSA   | oth  | -9    | bstr    |                    |             |
   |       |      |       |         |                    |             |
   | RSA   | r    | -10   | bstr    |                    |             |
   |       |      |       |         |                    |             |
   | RSA   | t    | -11   | bstr    |                    |             |
   |       |      |       |         |                    |             |
   | oct   | k    | -1    | bstr    |                    |             |
   +-------+------+-------+---------+--------------------+-------------+

Editorial Comments

[CREF1] JLS: Need to check this list for correctness before publishing.

[CREF2] JLS: I have moved msg_type into the individual structures.
        However, they would not be necessary in the cases where a) the
        security service is known and b) security libraries can setup to
        take individual structures.  Should they be moved back to just
        appearing if used in a COSE_MSG rather than on the individual
        structure?



Schaad                  Expires December 30, 2015              [Page 66]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


[CREF3] JLS: Should we create an IANA registries for the values of
        msg_type?

[CREF4] JLS: OPEN ISSUE

[CREF5] JLS: A completest version of this grammar would list the options
        available in the protected and unprotected headers.  Do we want
        to head that direction?

[CREF6] JLS: Need to figure out how we are going to go about creating
        this registry -or are we going to modify the current mime-
        content table?

[CREF7] Ilari: I don't follow/understand this text

[CREF8] JLS: Should this sentence be removed?

[CREF9] JLS: Do we remove this line and just define them ourselves?

[CREF10] JLS: We can really simplify the grammar for COSE_Key to be just
         the kty (the one required field) and the generic item.  The
         reason to do this is that it makes things simpler.  The reason
         not to do this says that we really need to add a lot more items
         so that a grammar check can be done which is more tightly
         enforced.

[CREF11] JLS: Unless key material is being derived for multiple items
         (i.e both a key and an IV) this will be the COSE algorithm
         value.  Even then it might still be the COSE algorithm value,
         it is just a requirement for a new algorithm.  Do we want to
         have the ability to derive both the key and a partial IV for
         CCM?

[CREF12] JLS: I need to get a better justification for this item.  It
         has to do with generating new keys for each message in a series
         of messages that have the same salt value.

[CREF13] JLS: It would be reasonable to support a shared-secret + KDF
         that is not PBE for when one has good randomness in the shared-
         secret.

[CREF14] JLS: Do we also want to document the use of RFC 5649 as well?
         It allows for other sizes of keys which might be used for HMAC
         - i.e. a 200 bit key.  The algorithm exists, but I do not
         personally know of any standard uses of it.

[CREF15] JLS: Is this range we want to specify?




Schaad                  Expires December 30, 2015              [Page 67]

Internet-Draft         CBOR Encoded Message Syntax             June 2015


[CREF16] JLS: It would be possible to include the protected field in the
         KDF rather than the key wrap algorithm if we wanted to.  This
         would provide the same level of security, it would not be
         possible to get the same key if they are different.

[CREF17] JLS: Do we want/need to support this?  JOSE did it mainly to
         support the encryption of private keys.

[CREF18] JLS: Do we create a registry for curves?  Is is the same
         registry for both EC1 and EC2?

[CREF19] JLS: Should we use the integer encoding for x, y and d instead
         of bstr?

[CREF20] JLS: Should we use the integer encoding for x, y and d instead
         of bstr?

[CREF21] JLS: Finish the registration process.

[CREF22] JLS: Should we register both or just the cose+cbor one?

Author's Address

   Jim Schaad
   August Cellars

   Email: ietf@augustcellars.com
























Schaad                  Expires December 30, 2015              [Page 68]
